ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"CapSense_CSHL.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CapSense_BaseInit,"ax",%progbits
  18              		.align	2
  19              		.global	CapSense_BaseInit
  20              		.code	16
  21              		.thumb_func
  22              		.type	CapSense_BaseInit, %function
  23              	CapSense_BaseInit:
  24              	.LFB34:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\CapSense_CSHL.c"
   1:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * File Name: CapSense_CSHL.c
   3:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Version 2.10
   4:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
   5:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Description:
   6:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This file provides the source code to the High Level APIs for the CapSesne
   7:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CSD component.
   8:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
   9:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Note:
  10:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
  11:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Copyright 2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  18:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #include "CapSense_CSHL.h"
  19:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #include "CapSense_PVT.h"
  20:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  21:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /* SmartSense functions */
  22:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO)
  23:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     extern void CapSense_UpdateThresholds(uint32 sensor);
  24:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO) */
  25:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  26:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /* Storage of filters data */
  27:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)) || \
  28:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)) )
  29:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  30:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
  31:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData2[CapSense_TOTAL_SENSOR_COUNT];
  32:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 2


  33:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #elif ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER))   || \
  34:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER))   || \
  35:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         (0u != (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)) || \
  36:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER))   || \
  37:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)) )
  38:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
  39:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_rawFilterData1[CapSense_TOTAL_SENSOR_COUNT];
  40:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif  /* ( (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
  41:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         *    (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) )
  42:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         */
  43:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  44:.\Generated_Source\PSoC4/CapSense_CSHL.c **** extern uint16 CapSense_sensorRaw[CapSense_TOTAL_SENSOR_COUNT];
  45:.\Generated_Source\PSoC4/CapSense_CSHL.c **** extern uint8 CapSense_sensorEnableMask[CapSense_TOTAL_SENSOR_MASK];
  46:.\Generated_Source\PSoC4/CapSense_CSHL.c **** extern const uint8 CapSense_widgetNumber[CapSense_TOTAL_SENSOR_COUNT];
  47:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  48:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_TUNING_METHOD != CapSense__TUNING_NONE)
  49:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	extern uint32 CapSense_widgetResolution[CapSense_RESOLUTIONS_TBL_SIZE];	
  50:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TUNING_METHOD != CapSense__TUNING_NONE) */
  51:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  52:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_sensorBaseline[CapSense_TOTAL_SENSOR_COUNT] = {0u};
  53:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_sensorBaselineLow[CapSense_TOTAL_SENSOR_COUNT] = {0u};
  54:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_sensorSignal[CapSense_TOTAL_SENSOR_COUNT] = {0u};
  55:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_sensorOnMask[CapSense_TOTAL_SENSOR_MASK] = {0u};
  56:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  57:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_lowBaselineResetCnt[CapSense_TOTAL_SENSOR_COUNT];
  58:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_lowBaselineReset[CapSense_TOTAL_SENSOR_COUNT] = {
  59:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     5u, 
  60:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  61:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  62:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  63:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  64:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO)
  65:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	extern CapSense_CONFIG_TYPE_P4_v2_20 CapSense_config;
  66:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif  /* (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO) */
  67:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  68:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_RAW_FILTER_MASK != 0u)
  69:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_enableRawFilters = CapSense_RAW_FILTERS_ENABLED;
  70:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif  /* (CapSense_RAW_FILTER_MASK != 0u) */
  71:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  72:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /* Generated by Customizer */
  73:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_fingerThreshold[] = {
  74:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     200u, 
  75:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  76:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  77:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_noiseThreshold[] = {
  78:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     100u, 
  79:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  80:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  81:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_negativeNoiseThreshold[] = {
  82:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     20u, 
  83:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  84:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  85:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_hysteresis[] = {
  86:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     25u, 
  87:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  88:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  89:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_debounce[] = {
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 3


  90:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     2u, 
  91:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  92:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  93:.\Generated_Source\PSoC4/CapSense_CSHL.c **** static uint8 CapSense_debounceCounter[] = {
  94:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     0u, 0u, 
  95:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
  96:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
  97:.\Generated_Source\PSoC4/CapSense_CSHL.c **** const uint8 CapSense_rawDataIndex[] = {
  98:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     0u, /* ProximitySensor__PROX */
  99:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
 100:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 101:.\Generated_Source\PSoC4/CapSense_CSHL.c **** const uint8 CapSense_numberOfSensors[] = {
 102:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     1u, /* ProximitySensor__PROX */
 103:.\Generated_Source\PSoC4/CapSense_CSHL.c **** };
 104:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 105:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 106:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 107:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 108:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 109:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_BaseInit
 110:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 111:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 112:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 113:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 114:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  initial value which is equal to the raw count value. 
 115:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Resets to zero CapSense_sensorBaselineLow[sensor] and 
 116:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorSignal[sensor] array element.
 117:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Loads the CapSense_rawFilterData2[sensor] and 
 118:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_rawFilterData2[sensor] array element with an 
 119:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  initial value which is equal to the raw count value if the raw data filter is enabled.
 120:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 121:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 122:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 123:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 124:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 125:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 126:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 127:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 128:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store the baseline value.
 129:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store the fraction byte of 
 130:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  the baseline value.
 131:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store a difference between 
 132:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  the current value of raw data and the previous value of the baseline.
 133:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store a previous sample of 
 134:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  any enabled raw data filter.
 135:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before a previous sample
 136:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  of the enabled raw data filter. Required only for median or average filters.
 137:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 138:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 139:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 140:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 141:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 142:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_BaseInit(uint32 sensor)
 143:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
  26              		.loc 1 143 0
  27              		.cfi_startproc
  28              	.LVL0:
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 4


  29 0000 10B5     		push	{r4, lr}
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 4, -8
  32              		.cfi_offset 14, -4
 144:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if ((CapSense_TOTAL_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || \
 145:.\Generated_Source\PSoC4/CapSense_CSHL.c ****          (CapSense_TOTAL_GENERICS_COUNT))
 146:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 widget = CapSense_widgetNumber[sensor];
  33              		.loc 1 146 0
  34 0002 084B     		ldr	r3, .L2
  35 0004 1A5C     		ldrb	r2, [r3, r0]
  36              	.LVL1:
 147:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif /* ((CapSense_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)) */
 148:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 149:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)
 150:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 debounceIndex;
 151:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* (CapSense_TOTAL_MATRIX_BUTTONS_COUNT) */
 152:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 153:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 154:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Exclude generic widget */
 155:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 156:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 157:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 158:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 159:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Initialize Baseline */
 160:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_sensorBaseline[sensor] = CapSense_sensorRaw[sensor];
  37              		.loc 1 160 0
  38 0006 4300     		lsl	r3, r0, #1
  39 0008 0749     		ldr	r1, .L2+4
  40 000a 5C5A     		ldrh	r4, [r3, r1]
  41 000c 0749     		ldr	r1, .L2+8
  42 000e 5C52     		strh	r4, [r3, r1]
 161:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_sensorBaselineLow[sensor] = 0u;
  43              		.loc 1 161 0
  44 0010 0818     		add	r0, r1, r0
  45              	.LVL2:
  46 0012 0024     		mov	r4, #0
  47 0014 0471     		strb	r4, [r0, #4]
 162:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_sensorSignal[sensor] = 0u;
  48              		.loc 1 162 0
  49 0016 CB18     		add	r3, r1, r3
  50 0018 1C81     		strh	r4, [r3, #8]
 163:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
 164:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_debounceCounter[widget] =  CapSense_debounce[widget];
  51              		.loc 1 164 0
  52 001a 054B     		ldr	r3, .L2+12
  53 001c 9B5C     		ldrb	r3, [r3, r2]
  54 001e 8A18     		add	r2, r1, r2
  55              	.LVL3:
  56 0020 1373     		strb	r3, [r2, #12]
 165:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 166:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 167:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if ((0u != (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)) ||\
 168:.\Generated_Source\PSoC4/CapSense_CSHL.c ****          (0u != (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)))
 169:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 170:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
 171:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_rawFilterData2[sensor] = CapSense_sensorRaw[sensor];
 172:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 5


 173:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #elif ((CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER) ||\
 174:.\Generated_Source\PSoC4/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER) ||\
 175:.\Generated_Source\PSoC4/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER) ||\
 176:.\Generated_Source\PSoC4/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER) ||\
 177:.\Generated_Source\PSoC4/CapSense_CSHL.c ****            (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER))
 178:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             
 179:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_rawFilterData1[sensor] = CapSense_sensorRaw[sensor];
 180:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 181:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #else
 182:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* No Raw filters */
 183:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* ((CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) || \
 184:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             *   (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER))
 185:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             */
 186:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 187:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 188:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Exclude generic widget */
 189:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 190:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 191:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
  57              		.loc 1 191 0
  58              		@ sp needed
  59 0022 10BD     		pop	{r4, pc}
  60              	.L3:
  61              		.align	2
  62              	.L2:
  63 0024 00000000 		.word	CapSense_widgetNumber
  64 0028 00000000 		.word	CapSense_sensorRaw
  65 002c 00000000 		.word	.LANCHOR0
  66 0030 00000000 		.word	.LANCHOR1
  67              		.cfi_endproc
  68              	.LFE34:
  69              		.size	CapSense_BaseInit, .-CapSense_BaseInit
  70              		.section	.text.CapSense_InitializeSensorBaseline,"ax",%progbits
  71              		.align	2
  72              		.global	CapSense_InitializeSensorBaseline
  73              		.code	16
  74              		.thumb_func
  75              		.type	CapSense_InitializeSensorBaseline, %function
  76              	CapSense_InitializeSensorBaseline:
  77              	.LFB35:
 192:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 193:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 194:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 195:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_InitializeSensorBaseline
 196:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 197:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 198:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 199:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Loads the CapSense_sensorBaseline[sensor] array element with an 
 200:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  initial value by scanning the selected sensor (one channel design) or a pair 
 201:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  of sensors (two channels designs). The raw count value is copied into the 
 202:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  baseline array for each sensor. The raw data filters are initialized if 
 203:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  enabled.
 204:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 205:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 206:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 207:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 208:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 6


 209:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 210:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 211:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 212:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 213:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 214:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 215:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 216:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 217:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 218:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_InitializeSensorBaseline(uint32 sensor)
 219:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
  78              		.loc 1 219 0
  79              		.cfi_startproc
  80              	.LVL4:
  81 0000 10B5     		push	{r4, lr}
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 4, -8
  84              		.cfi_offset 14, -4
  85 0002 041C     		mov	r4, r0
 220:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Scan sensor */
 221:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_ScanSensor(sensor);
  86              		.loc 1 221 0
  87 0004 FFF7FEFF 		bl	CapSense_ScanSensor
  88              	.LVL5:
  89              	.L5:
 222:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
  90              		.loc 1 222 0 discriminator 1
  91 0008 FFF7FEFF 		bl	CapSense_IsBusy
  92              	.LVL6:
  93 000c 0028     		cmp	r0, #0
  94 000e FBD1     		bne	.L5
 223:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 224:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Wait while sensor is busy */
 225:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 226:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 227:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Initialize Baseline, Signal and debounce counters */       
 228:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_BaseInit(sensor);
  95              		.loc 1 228 0
  96 0010 201C     		mov	r0, r4
  97 0012 FFF7FEFF 		bl	CapSense_BaseInit
  98              	.LVL7:
 229:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
  99              		.loc 1 229 0
 100              		@ sp needed
 101              	.LVL8:
 102 0016 10BD     		pop	{r4, pc}
 103              		.cfi_endproc
 104              	.LFE35:
 105              		.size	CapSense_InitializeSensorBaseline, .-CapSense_InitializeSensorBaseline
 106              		.section	.text.CapSense_InitializeAllBaselines,"ax",%progbits
 107              		.align	2
 108              		.global	CapSense_InitializeAllBaselines
 109              		.code	16
 110              		.thumb_func
 111              		.type	CapSense_InitializeAllBaselines, %function
 112              	CapSense_InitializeAllBaselines:
 113              	.LFB36:
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 7


 230:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 231:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 232:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 233:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_InitializeAllBaselines
 234:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 235:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 236:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 237:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Uses the CapSense_InitializeSensorBaseline function to load the 
 238:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaseline[] array with an initial values by scanning 
 239:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  all the sensors. The raw count values are copied into the baseline array for 
 240:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  all the sensors. The raw data filters are initialized if enabled.
 241:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 242:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 243:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 244:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 245:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 246:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 247:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 248:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 249:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 250:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 251:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 252:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 253:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 254:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 255:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_InitializeAllBaselines(void)
 256:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 114              		.loc 1 256 0
 115              		.cfi_startproc
 116 0000 10B5     		push	{r4, lr}
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 4, -8
 119              		.cfi_offset 14, -4
 120              	.LVL9:
 257:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 i;
 258:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 259:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	for(i = 0u; i < CapSense_TOTAL_SCANSLOT_COUNT; i++)
 121              		.loc 1 259 0
 122 0002 0024     		mov	r4, #0
 123 0004 03E0     		b	.L7
 124              	.LVL10:
 125              	.L8:
 260:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 261:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     	CapSense_InitializeSensorBaseline(i);
 126              		.loc 1 261 0 discriminator 3
 127 0006 201C     		mov	r0, r4
 128 0008 FFF7FEFF 		bl	CapSense_InitializeSensorBaseline
 129              	.LVL11:
 259:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 130              		.loc 1 259 0 discriminator 3
 131 000c 0134     		add	r4, r4, #1
 132              	.LVL12:
 133              	.L7:
 259:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 134              		.loc 1 259 0 is_stmt 0 discriminator 1
 135 000e 002C     		cmp	r4, #0
 136 0010 F9D0     		beq	.L8
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 8


 262:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 263:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 137              		.loc 1 263 0 is_stmt 1
 138              		@ sp needed
 139              	.LVL13:
 140 0012 10BD     		pop	{r4, pc}
 141              		.cfi_endproc
 142              	.LFE36:
 143              		.size	CapSense_InitializeAllBaselines, .-CapSense_InitializeAllBaselines
 144              		.section	.text.CapSense_InitializeEnabledBaselines,"ax",%progbits
 145              		.align	2
 146              		.global	CapSense_InitializeEnabledBaselines
 147              		.code	16
 148              		.thumb_func
 149              		.type	CapSense_InitializeEnabledBaselines, %function
 150              	CapSense_InitializeEnabledBaselines:
 151              	.LFB37:
 264:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 265:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 266:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 267:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_InitializeEnabledBaselines
 268:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 269:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 270:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 271:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Scans all the enabled widgets and the raw count values are copied into the 
 272:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  baseline array for all the sensors enabled in the scanning process. The baselines 
 273:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  are initialized with zero values for sensors disabled from the scanning process. 
 274:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  The raw data filters are initialized if enabled.
 275:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 276:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 277:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 278:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 279:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 280:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 281:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 282:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 283:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorRaw[] - used to store the sensors raw data.
 284:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[ ] - used to store bit masks of the enabled sensors.
 285:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 286:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 287:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 288:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 289:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 290:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_InitializeEnabledBaselines(void)
 291:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 152              		.loc 1 291 0
 153              		.cfi_startproc
 154 0000 10B5     		push	{r4, lr}
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 4, -8
 157              		.cfi_offset 14, -4
 292:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 i;
 293:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 isSensorEnabled;
 294:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 295:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_ScanEnabledWidgets();
 158              		.loc 1 295 0
 159 0002 FFF7FEFF 		bl	CapSense_ScanEnabledWidgets
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 9


 160              	.LVL14:
 161              	.L10:
 296:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     while(CapSense_IsBusy() != 0u)
 162              		.loc 1 296 0 discriminator 1
 163 0006 FFF7FEFF 		bl	CapSense_IsBusy
 164              	.LVL15:
 165 000a 0028     		cmp	r0, #0
 166 000c FBD1     		bne	.L10
 167 000e 0024     		mov	r4, #0
 168 0010 09E0     		b	.L11
 169              	.LVL16:
 170              	.L13:
 297:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 298:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Wait while sensor is busy */
 299:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 300:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 301:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 302:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 303:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         isSensorEnabled = CapSense_GetBitValue(CapSense_sensorEnableMask, i);
 171              		.loc 1 303 0
 172 0012 0648     		ldr	r0, .L14
 173 0014 211C     		mov	r1, r4
 174 0016 FFF7FEFF 		bl	CapSense_GetBitValue
 175              	.LVL17:
 304:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
 305:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Clear raw data if sensor is disabled from scanning process */
 306:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(isSensorEnabled != 0u)
 176              		.loc 1 306 0
 177 001a 0028     		cmp	r0, #0
 178 001c 02D0     		beq	.L12
 307:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 308:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Initialize baselines */
 309:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_BaseInit(i);
 179              		.loc 1 309 0
 180 001e 201C     		mov	r0, r4
 181              	.LVL18:
 182 0020 FFF7FEFF 		bl	CapSense_BaseInit
 183              	.LVL19:
 184              	.L12:
 301:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 185              		.loc 1 301 0 discriminator 2
 186 0024 0134     		add	r4, r4, #1
 187              	.LVL20:
 188              	.L11:
 301:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 189              		.loc 1 301 0 is_stmt 0 discriminator 1
 190 0026 002C     		cmp	r4, #0
 191 0028 F3D0     		beq	.L13
 310:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 311:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 312:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }  
 192              		.loc 1 312 0 is_stmt 1
 193              		@ sp needed
 194              	.LVL21:
 195 002a 10BD     		pop	{r4, pc}
 196              	.L15:
 197              		.align	2
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 10


 198              	.L14:
 199 002c 00000000 		.word	CapSense_sensorEnableMask
 200              		.cfi_endproc
 201              	.LFE37:
 202              		.size	CapSense_InitializeEnabledBaselines, .-CapSense_InitializeEnabledBaselines
 203              		.section	.text.CapSense_UpdateBaselineNoThreshold,"ax",%progbits
 204              		.align	2
 205              		.global	CapSense_UpdateBaselineNoThreshold
 206              		.code	16
 207              		.thumb_func
 208              		.type	CapSense_UpdateBaselineNoThreshold, %function
 209              	CapSense_UpdateBaselineNoThreshold:
 210              	.LFB38:
 313:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 314:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 315:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_UpdateBaselineNoThreshold
 317:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 319:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 320:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Updates the CapSense_sensorBaseline[sensor] array element using the 
 321:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by 
 322:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 323:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  it in CapSense_sensorSignal[sensor]. 
 324:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  If the auto reset option is enabled, the baseline updated regards the noise threshold. 
 325:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  If the auto reset option is disabled, the baseline stops updating; baseline is loaded 
 326:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  with a raw count value if a signal is greater than zero and if signal is less 
 327:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  than noise threshold.
 328:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline 
 329:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  calculation.
 330:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 331:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API does not update the thresholds in the Smartsense Mode.
 332:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 333:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 334:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 335:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 336:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 337:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 338:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 339:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 340:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_widgetNumber[]  - stores widget numbers.
 341:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaseline[]    - used to store baseline value.
 342:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaselineLow[] - used to store fraction byte of 
 343:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  baseline value.
 344:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorSignal[]      - used to store difference between 
 345:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  current value of raw data and previous value of baseline.
 346:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_rawFilterData1[]    - used to store previous sample of 
 347:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  any enabled raw data filter.
 348:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_rawFilterData2[]    - used to store before previous sample
 349:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 350:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 351:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 352:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 353:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 354:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 355:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_UpdateBaselineNoThreshold(uint32 sensor)
 356:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 11


 211              		.loc 1 356 0
 212              		.cfi_startproc
 213              	.LVL22:
 214 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 215              		.cfi_def_cfa_offset 20
 216              		.cfi_offset 4, -20
 217              		.cfi_offset 5, -16
 218              		.cfi_offset 6, -12
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 4746     		mov	r7, r8
 222 0004 80B4     		push	{r7}
 223              		.cfi_def_cfa_offset 24
 224              		.cfi_offset 8, -24
 225 0006 82B0     		sub	sp, sp, #8
 226              		.cfi_def_cfa_offset 32
 227 0008 041C     		mov	r4, r0
 357:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 calc;
 358:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	uint32 sign;
 359:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 tempRaw;
 360:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 filteredRawData;
 361:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 widget = CapSense_widgetNumber[sensor];
 228              		.loc 1 361 0
 229 000a 314B     		ldr	r3, .L25
 230 000c 1B5C     		ldrb	r3, [r3, r0]
 362:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 noiseThreshold = CapSense_noiseThreshold[widget];
 231              		.loc 1 362 0
 232 000e 5A00     		lsl	r2, r3, #1
 233 0010 3049     		ldr	r1, .L25+4
 234 0012 8A18     		add	r2, r1, r2
 235 0014 9688     		ldrh	r6, [r2, #4]
 236              	.LVL23:
 363:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 364:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 365:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Exclude generic widget */
 366:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 367:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 368:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 369:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 370:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     filteredRawData = CapSense_sensorRaw[sensor];
 237              		.loc 1 370 0
 238 0016 4200     		lsl	r2, r0, #1
 239 0018 2F49     		ldr	r1, .L25+8
 240 001a 505A     		ldrh	r0, [r2, r1]
 241              	.LVL24:
 371:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 372:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#if (CapSense_RAW_FILTER_MASK != 0u)
 373:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	if(CapSense_enableRawFilters != 0u)
 374:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 375:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#if (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)
 376:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			tempRaw = filteredRawData;
 377:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_MedianFilter(filteredRawData, CapSense_rawFilterData1[sensor], 
 378:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 															CapSense_rawFilterData2[sensor]);
 379:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 380:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = tempRaw;
 381:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			
 382:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#elif (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 12


 383:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			tempRaw = filteredRawData;
 384:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_AveragingFilter(filteredRawData, CapSense_rawFilterData1[sensor],
 385:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 															   CapSense_rawFilterData2[sensor]);
 386:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData2[sensor] = CapSense_rawFilterData1[sensor];
 387:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = tempRaw;
 388:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			
 389:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#elif (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)
 390:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_IIR2Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 391:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = filteredRawData;
 392:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			
 393:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#elif (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)
 394:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_IIR4Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 395:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = filteredRawData;
 396:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 				
 397:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#elif (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)
 398:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_JitterFilter(filteredRawData, CapSense_rawFilterData1[sensor]);
 399:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = filteredRawData;
 400:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			
 401:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#elif (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)
 402:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_IIR8Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 403:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = filteredRawData;
 404:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			
 405:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#elif (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER)
 406:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			filteredRawData = CapSense_IIR16Filter(filteredRawData, CapSense_rawFilterData1[sensor]);
 407:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_rawFilterData1[sensor] = filteredRawData;
 408:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			
 409:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#else
 410:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			/* No Raw filters */
 411:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#endif  /* (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER) */
 412:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 413:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#endif  /* (CapSense_RAW_FILTER_MASK != 0u) */
 414:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
 415:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#if (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO)
 416:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	    MeasureNoiseEnvelope_P4_v2_20(&CapSense_config, (uint8)sensor, CapSense_sensorRaw);
 417:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#endif /* (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO) */
 418:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 419:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Baseline calculation */
 420:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Calculate difference RawData[cur] - Baseline[prev] */
 421:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     if(filteredRawData >= CapSense_sensorBaseline[sensor])
 242              		.loc 1 421 0
 243 001c 2F49     		ldr	r1, .L25+12
 244 001e 515A     		ldrh	r1, [r2, r1]
 245 0020 8142     		cmp	r1, r0
 246 0022 06D8     		bhi	.L17
 422:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 423:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_lowBaselineResetCnt[sensor] = 0u;	
 247              		.loc 1 423 0
 248 0024 0025     		mov	r5, #0
 249 0026 2E4A     		ldr	r2, .L25+16
 250 0028 1555     		strb	r5, [r2, r4]
 424:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tempRaw = filteredRawData - CapSense_sensorBaseline[sensor];
 251              		.loc 1 424 0
 252 002a 451A     		sub	r5, r0, r1
 253 002c ADB2     		uxth	r5, r5
 254              	.LVL25:
 425:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         sign = 1u;    /* Positive difference - Calculate the Signal */
 255              		.loc 1 425 0
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 13


 256 002e 0127     		mov	r7, #1
 257 0030 02E0     		b	.L18
 258              	.LVL26:
 259              	.L17:
 426:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 427:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     else
 428:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 429:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tempRaw = CapSense_sensorBaseline[sensor] - filteredRawData;
 260              		.loc 1 429 0
 261 0032 0D1A     		sub	r5, r1, r0
 262 0034 ADB2     		uxth	r5, r5
 263              	.LVL27:
 430:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         sign = 0u;    /* Negative difference - Do NOT calculate the Signal */
 264              		.loc 1 430 0
 265 0036 0027     		mov	r7, #0
 266              	.LVL28:
 267              	.L18:
 431:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 432:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 433:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#if (CapSense_TUNING_METHOD != CapSense__TUNING_NONE)
 434:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	if((sign == 0u) && (tempRaw > (uint16) CapSense_negativeNoiseThreshold[widget]))
 268              		.loc 1 434 0
 269 0038 002F     		cmp	r7, #0
 270 003a 1AD1     		bne	.L19
 271              		.loc 1 434 0 is_stmt 0 discriminator 1
 272 003c 5A00     		lsl	r2, r3, #1
 273 003e 0192     		str	r2, [sp, #4]
 274 0040 244A     		ldr	r2, .L25+4
 275 0042 9446     		mov	ip, r2
 276 0044 019A     		ldr	r2, [sp, #4]
 277 0046 6244     		add	r2, r2, ip
 278 0048 1289     		ldrh	r2, [r2, #8]
 279 004a AA42     		cmp	r2, r5
 280 004c 11D2     		bcs	.L19
 435:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#else
 436:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	if((sign == 0u) && (tempRaw > (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD))
 437:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#endif /* (CapSense_TUNING_METHOD != CapSense__TUNING_NONE) */ 
 438:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 439:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(CapSense_lowBaselineResetCnt[sensor] >= CapSense_lowBaselineReset[sensor])
 281              		.loc 1 439 0 is_stmt 1
 282 004e 244B     		ldr	r3, .L25+16
 283 0050 1B5D     		ldrb	r3, [r3, r4]
 284 0052 6246     		mov	r2, ip
 285 0054 1219     		add	r2, r2, r4
 286 0056 127B     		ldrb	r2, [r2, #12]
 287 0058 9342     		cmp	r3, r2
 288 005a 06D3     		bcc	.L20
 440:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 441:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_BaseInit(sensor);
 289              		.loc 1 441 0
 290 005c 201C     		mov	r0, r4
 291              	.LVL29:
 292 005e FFF7FEFF 		bl	CapSense_BaseInit
 293              	.LVL30:
 442:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor] = 0u;
 294              		.loc 1 442 0
 295 0062 0022     		mov	r2, #0
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 14


 296 0064 1E4B     		ldr	r3, .L25+16
 297 0066 1A55     		strb	r2, [r3, r4]
 298 0068 20E0     		b	.L21
 299              	.LVL31:
 300              	.L20:
 443:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 444:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
 445:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 446:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_lowBaselineResetCnt[sensor]++;
 301              		.loc 1 446 0
 302 006a 0133     		add	r3, r3, #1
 303 006c 1C4A     		ldr	r2, .L25+16
 304 006e 1355     		strb	r3, [r2, r4]
 305 0070 1CE0     		b	.L21
 306              	.L19:
 447:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 448:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 449:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     else
 450:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 451:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 452:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#if (CapSense_TUNING_METHOD != CapSense__TUNING_NONE)			
 453:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			/* Update Baseline if lower than noiseThreshold */
 454:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			if ( (tempRaw <= noiseThreshold) || 
 307              		.loc 1 454 0
 308 0072 B542     		cmp	r5, r6
 309 0074 07D9     		bls	.L22
 455:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			 ((tempRaw < (uint16) CapSense_negativeNoiseThreshold[widget])
 310              		.loc 1 455 0 discriminator 1
 311 0076 5B00     		lsl	r3, r3, #1
 312 0078 164A     		ldr	r2, .L25+4
 313 007a D318     		add	r3, r2, r3
 314 007c 1B89     		ldrh	r3, [r3, #8]
 454:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			 ((tempRaw < (uint16) CapSense_negativeNoiseThreshold[widget])
 315              		.loc 1 454 0 discriminator 1
 316 007e AB42     		cmp	r3, r5
 317 0080 14D9     		bls	.L21
 456:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			   && (sign == 0u)))
 318              		.loc 1 456 0
 319 0082 002F     		cmp	r7, #0
 320 0084 12D1     		bne	.L21
 321              	.L22:
 457:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			{
 458:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#else
 459:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			/* Update Baseline if lower than noiseThreshold */
 460:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			if ( (tempRaw <= noiseThreshold) || 
 461:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 				 ((tempRaw < (uint16) CapSense_NEGATIVE_NOISE_THRESHOLD)
 462:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 				   && (sign == 0u)))
 463:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			{
 464:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#endif /* (CapSense_TUNING_METHOD != CapSense__TUNING_NONE) */ 
 465:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 466:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Make full Baseline 23 bits */
 467:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 calc = (uint32) CapSense_sensorBaseline[sensor] << 8u;
 322              		.loc 1 467 0
 323 0086 0A02     		lsl	r2, r1, #8
 324              	.LVL32:
 468:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 calc |= (uint32) CapSense_sensorBaselineLow[sensor];
 325              		.loc 1 468 0
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 15


 326 0088 144B     		ldr	r3, .L25+12
 327 008a 9846     		mov	r8, r3
 328 008c A446     		mov	ip, r4
 329 008e C444     		add	ip, ip, r8
 330 0090 6346     		mov	r3, ip
 331 0092 1B79     		ldrb	r3, [r3, #4]
 332 0094 1343     		orr	r3, r2
 333              	.LVL33:
 469:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 470:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Add Raw Data to Baseline */
 471:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 calc += filteredRawData;
 334              		.loc 1 471 0
 335 0096 C318     		add	r3, r0, r3
 336              	.LVL34:
 472:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 473:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Sub the high Baseline */
 474:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 calc -= CapSense_sensorBaseline[sensor];
 337              		.loc 1 474 0
 338 0098 5B1A     		sub	r3, r3, r1
 339              	.LVL35:
 475:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 476:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Put Baseline and BaselineLow */
 477:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 340              		.loc 1 477 0
 341 009a 190A     		lsr	r1, r3, #8
 342 009c 6200     		lsl	r2, r4, #1
 343 009e 4046     		mov	r0, r8
 344              	.LVL36:
 345 00a0 8152     		strh	r1, [r0, r2]
 478:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_sensorBaselineLow[sensor] = ((uint8) calc);
 346              		.loc 1 478 0
 347 00a2 6246     		mov	r2, ip
 348 00a4 1371     		strb	r3, [r2, #4]
 479:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 480:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_lowBaselineResetCnt[sensor] = 0u;
 349              		.loc 1 480 0
 350 00a6 0022     		mov	r2, #0
 351 00a8 0D4B     		ldr	r3, .L25+16
 352              	.LVL37:
 353 00aa 1A55     		strb	r2, [r3, r4]
 354              	.LVL38:
 355              	.L21:
 481:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE)
 482:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
 483:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_AUTO_RESET == CapSense_AUTO_RESET_DISABLE) */
 484:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 485:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 486:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Calculate Signal if positive difference > noiseThreshold */
 487:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     if((tempRaw > (uint16) noiseThreshold) && (sign != 0u))
 356              		.loc 1 487 0
 357 00ac B542     		cmp	r5, r6
 358 00ae 06D9     		bls	.L23
 359              		.loc 1 487 0 is_stmt 0 discriminator 1
 360 00b0 002F     		cmp	r7, #0
 361 00b2 04D0     		beq	.L23
 488:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 489:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8)
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 16


 490:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Over flow defence for uint8 */
 491:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if (tempRaw > 0xFFu)
 492:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
 493:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = 0xFFu;
 494:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }    
 495:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             else 
 496:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
 497:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_sensorSignal[sensor] = ((uint8) tempRaw);
 498:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
 499:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #else
 500:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_sensorSignal[sensor] = ((uint16) tempRaw);
 362              		.loc 1 500 0 is_stmt 1
 363 00b4 6400     		lsl	r4, r4, #1
 364              	.LVL39:
 365 00b6 094B     		ldr	r3, .L25+12
 366 00b8 1C19     		add	r4, r3, r4
 367 00ba 2581     		strh	r5, [r4, #8]
 368 00bc 04E0     		b	.L16
 369              	.LVL40:
 370              	.L23:
 501:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif  /* (CapSense_SIGNAL_SIZE == CapSense_SIGNAL_SIZE_UINT8) */
 502:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 503:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     else
 504:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 505:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Signal is zero */
 506:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_sensorSignal[sensor] = 0u;
 371              		.loc 1 506 0
 372 00be 6400     		lsl	r4, r4, #1
 373              	.LVL41:
 374 00c0 064B     		ldr	r3, .L25+12
 375 00c2 1C19     		add	r4, r3, r4
 376 00c4 0023     		mov	r3, #0
 377 00c6 2381     		strh	r3, [r4, #8]
 378              	.L16:
 507:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 508:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 509:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 510:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Exclude generic widget */
 511:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 512:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 513:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 379              		.loc 1 513 0
 380 00c8 02B0     		add	sp, sp, #8
 381              		@ sp needed
 382              	.LVL42:
 383              	.LVL43:
 384              	.LVL44:
 385 00ca 04BC     		pop	{r2}
 386 00cc 9046     		mov	r8, r2
 387 00ce F0BD     		pop	{r4, r5, r6, r7, pc}
 388              	.L26:
 389              		.align	2
 390              	.L25:
 391 00d0 00000000 		.word	CapSense_widgetNumber
 392 00d4 00000000 		.word	.LANCHOR1
 393 00d8 00000000 		.word	CapSense_sensorRaw
 394 00dc 00000000 		.word	.LANCHOR0
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 17


 395 00e0 00000000 		.word	CapSense_lowBaselineResetCnt
 396              		.cfi_endproc
 397              	.LFE38:
 398              		.size	CapSense_UpdateBaselineNoThreshold, .-CapSense_UpdateBaselineNoThreshold
 399              		.section	.text.CapSense_UpdateSensorBaseline,"ax",%progbits
 400              		.align	2
 401              		.global	CapSense_UpdateSensorBaseline
 402              		.code	16
 403              		.thumb_func
 404              		.type	CapSense_UpdateSensorBaseline, %function
 405              	CapSense_UpdateSensorBaseline:
 406              	.LFB39:
 514:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 515:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 516:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 517:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_UpdateSensorBaseline
 518:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 519:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 520:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 521:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Updates the CapSense_sensorBaseline[sensor] array element using the 
 522:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by 
 523:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 524:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  it in CapSense_sensorSignal[sensor]. 
 525:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  If the auto reset option is enabled, the baseline updated regards the noise threshold. 
 526:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  If the auto reset option is disabled, the baseline stops updating. 
 527:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Baseline is loaded with raw count value if a signal is greater than zero and  
 528:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  if signal is less than noise threshold.
 529:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline 
 530:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  calculation.
 531:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API updates the thresholds in the Smartsense Mode.
 532:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 533:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 534:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 535:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 536:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 537:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 538:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 539:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 540:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_widgetNumber[]  - stores widget numbers.
 541:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 542:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 543:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 544:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 545:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 546:.\Generated_Source\PSoC4/CapSense_CSHL.c ****  void CapSense_UpdateSensorBaseline(uint32 sensor)
 547:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 407              		.loc 1 547 0
 408              		.cfi_startproc
 409              	.LVL45:
 410 0000 08B5     		push	{r3, lr}
 411              		.cfi_def_cfa_offset 8
 412              		.cfi_offset 3, -8
 413              		.cfi_offset 14, -4
 548:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 549:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		uint32 widget;
 550:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		
 551:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		widget = CapSense_widgetNumber[sensor];
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 18


 552:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
 553:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Exclude generic widget */
 554:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(widget < CapSense_END_OF_WIDGETS_INDEX)
 555:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 556:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 557:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 558:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO)
 559:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     	CapSense_UpdateThresholds(sensor);
 560:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif /* (CapSense_TUNING_METHOD == CapSense__TUNING_AUTO) */
 561:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 562:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_UpdateBaselineNoThreshold(sensor);
 414              		.loc 1 562 0
 415 0002 FFF7FEFF 		bl	CapSense_UpdateBaselineNoThreshold
 416              	.LVL46:
 563:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 564:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #if (CapSense_TOTAL_GENERICS_COUNT)
 565:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Exclude generic widget */
 566:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 567:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     #endif  /* CapSense_TOTAL_GENERICS_COUNT */
 568:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 417              		.loc 1 568 0
 418              		@ sp needed
 419 0006 08BD     		pop	{r3, pc}
 420              		.cfi_endproc
 421              	.LFE39:
 422              		.size	CapSense_UpdateSensorBaseline, .-CapSense_UpdateSensorBaseline
 423              		.section	.text.CapSense_UpdateEnabledBaselines,"ax",%progbits
 424              		.align	2
 425              		.global	CapSense_UpdateEnabledBaselines
 426              		.code	16
 427              		.thumb_func
 428              		.type	CapSense_UpdateEnabledBaselines, %function
 429              	CapSense_UpdateEnabledBaselines:
 430              	.LFB40:
 569:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 570:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 571:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 572:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_UpdateEnabledBaselines
 573:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 574:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 575:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 576:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Checks CapSense_sensorEnableMask[] array and calls the 
 577:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_UpdateSensorBaseline function to update the baselines 
 578:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  for the enabled sensors.
 579:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 580:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 581:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 582:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 583:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 584:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 585:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 586:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 587:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 588:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  state.
 589:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 590:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 591:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 19


 592:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 593:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 594:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 595:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 596:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 597:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 598:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 599:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 600:.\Generated_Source\PSoC4/CapSense_CSHL.c ****  void CapSense_UpdateEnabledBaselines(void)
 601:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 431              		.loc 1 601 0
 432              		.cfi_startproc
 433 0000 10B5     		push	{r4, lr}
 434              		.cfi_def_cfa_offset 8
 435              		.cfi_offset 4, -8
 436              		.cfi_offset 14, -4
 437              	.LVL47:
 602:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 i;
 603:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 isSensorEnabled;
 604:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 605:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_SENSOR_COUNT; i++)
 438              		.loc 1 605 0
 439 0002 0024     		mov	r4, #0
 440 0004 09E0     		b	.L29
 441              	.LVL48:
 442              	.L31:
 606:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 607:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         isSensorEnabled = CapSense_GetBitValue(CapSense_sensorEnableMask, i);
 443              		.loc 1 607 0
 444 0006 0648     		ldr	r0, .L32
 445 0008 211C     		mov	r1, r4
 446 000a FFF7FEFF 		bl	CapSense_GetBitValue
 447              	.LVL49:
 608:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
 609:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(0u != isSensorEnabled)
 448              		.loc 1 609 0
 449 000e 0028     		cmp	r0, #0
 450 0010 02D0     		beq	.L30
 610:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 611:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_UpdateSensorBaseline(i);
 451              		.loc 1 611 0
 452 0012 201C     		mov	r0, r4
 453              	.LVL50:
 454 0014 FFF7FEFF 		bl	CapSense_UpdateSensorBaseline
 455              	.LVL51:
 456              	.L30:
 605:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 457              		.loc 1 605 0 discriminator 2
 458 0018 0134     		add	r4, r4, #1
 459              	.LVL52:
 460              	.L29:
 605:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 461              		.loc 1 605 0 is_stmt 0 discriminator 1
 462 001a 002C     		cmp	r4, #0
 463 001c F3D0     		beq	.L31
 612:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 613:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 20


 614:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 464              		.loc 1 614 0 is_stmt 1
 465              		@ sp needed
 466              	.LVL53:
 467 001e 10BD     		pop	{r4, pc}
 468              	.L33:
 469              		.align	2
 470              	.L32:
 471 0020 00000000 		.word	CapSense_sensorEnableMask
 472              		.cfi_endproc
 473              	.LFE40:
 474              		.size	CapSense_UpdateEnabledBaselines, .-CapSense_UpdateEnabledBaselines
 475              		.section	.text.CapSense_UpdateWidgetBaseline,"ax",%progbits
 476              		.align	2
 477              		.global	CapSense_UpdateWidgetBaseline
 478              		.code	16
 479              		.thumb_func
 480              		.type	CapSense_UpdateWidgetBaseline, %function
 481              	CapSense_UpdateWidgetBaseline:
 482              	.LFB41:
 615:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 616:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 617:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_UpdateWidgetBaseline
 618:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 619:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 620:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 621:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Checks CapSense_sensorEnableMask[] array and calls the 
 622:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_UpdateSensorBaseline function to update the baselines 
 623:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  for the enabled sensors that belong to widget.
 624:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 625:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 626:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  Widget number.
 627:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 628:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 629:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 630:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 631:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 632:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
 633:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  state.
 634:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
 635:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 636:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
 637:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 638:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
 639:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
 640:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 641:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 642:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 643:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 644:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 645:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_UpdateWidgetBaseline(uint32 widget)
 646:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 483              		.loc 1 646 0
 484              		.cfi_startproc
 485              	.LVL54:
 486 0000 10B5     		push	{r4, lr}
 487              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 21


 488              		.cfi_offset 4, -8
 489              		.cfi_offset 14, -4
 490              	.LVL55:
 647:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 sensorsPerWidget;
 648:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 firstSensor;
 649:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 lastSensor;
 650:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 i;
 651:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 isSensorEnabled;
 652:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
 653:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/* Get number of sensors in widget */
 654:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	sensorsPerWidget = CapSense_numberOfSensors[widget];
 655:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 656:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/* Get first sensor in widget */
 657:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	firstSensor = CapSense_rawDataIndex[widget];
 658:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
 659:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/* Get last sensor in widget */
 660:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	lastSensor = (CapSense_rawDataIndex[widget] + sensorsPerWidget);
 661:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
 662:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = firstSensor; i < lastSensor; i++)
 491              		.loc 1 662 0
 492 0002 0024     		mov	r4, #0
 493 0004 09E0     		b	.L35
 494              	.LVL56:
 495              	.L37:
 663:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 664:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         isSensorEnabled = CapSense_GetBitValue(CapSense_sensorEnableMask, i);
 496              		.loc 1 664 0
 497 0006 0648     		ldr	r0, .L38
 498 0008 211C     		mov	r1, r4
 499 000a FFF7FEFF 		bl	CapSense_GetBitValue
 500              	.LVL57:
 665:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
 666:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(0u != isSensorEnabled)
 501              		.loc 1 666 0
 502 000e 0028     		cmp	r0, #0
 503 0010 02D0     		beq	.L36
 667:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
 668:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_UpdateSensorBaseline(i);
 504              		.loc 1 668 0
 505 0012 201C     		mov	r0, r4
 506              	.LVL58:
 507 0014 FFF7FEFF 		bl	CapSense_UpdateSensorBaseline
 508              	.LVL59:
 509              	.L36:
 662:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 510              		.loc 1 662 0 discriminator 2
 511 0018 0134     		add	r4, r4, #1
 512              	.LVL60:
 513              	.L35:
 662:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 514              		.loc 1 662 0 is_stmt 0 discriminator 1
 515 001a 002C     		cmp	r4, #0
 516 001c F3D0     		beq	.L37
 669:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
 670:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
 671:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 517              		.loc 1 671 0 is_stmt 1
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 22


 518              		@ sp needed
 519              	.LVL61:
 520 001e 10BD     		pop	{r4, pc}
 521              	.L39:
 522              		.align	2
 523              	.L38:
 524 0020 00000000 		.word	CapSense_sensorEnableMask
 525              		.cfi_endproc
 526              	.LFE41:
 527              		.size	CapSense_UpdateWidgetBaseline, .-CapSense_UpdateWidgetBaseline
 528              		.section	.text.CapSense_GetBaselineData,"ax",%progbits
 529              		.align	2
 530              		.global	CapSense_GetBaselineData
 531              		.code	16
 532              		.thumb_func
 533              		.type	CapSense_GetBaselineData, %function
 534              	CapSense_GetBaselineData:
 535              	.LFB42:
 672:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 673:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 674:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 675:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetBaselineData
 676:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 677:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 678:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 679:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function reads the sensor baseline from the component.
 680:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 681:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 682:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 683:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 684:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 685:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the baseline value of the sensor indicated by an argument.
 686:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 687:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 688:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaseline[] - the array with an initial values by scanning
 689:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 690:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 691:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 692:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 693:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 694:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_GetBaselineData(uint32 sensor)
 695:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 536              		.loc 1 695 0
 537              		.cfi_startproc
 538              	.LVL62:
 696:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return (CapSense_sensorBaseline[sensor]);
 539              		.loc 1 696 0
 540 0000 4000     		lsl	r0, r0, #1
 541              	.LVL63:
 542 0002 014B     		ldr	r3, .L41
 543 0004 185A     		ldrh	r0, [r3, r0]
 697:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 544              		.loc 1 697 0
 545              		@ sp needed
 546 0006 7047     		bx	lr
 547              	.L42:
 548              		.align	2
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 23


 549              	.L41:
 550 0008 00000000 		.word	.LANCHOR0
 551              		.cfi_endproc
 552              	.LFE42:
 553              		.size	CapSense_GetBaselineData, .-CapSense_GetBaselineData
 554              		.section	.text.CapSense_SetBaselineData,"ax",%progbits
 555              		.align	2
 556              		.global	CapSense_SetBaselineData
 557              		.code	16
 558              		.thumb_func
 559              		.type	CapSense_SetBaselineData, %function
 560              	CapSense_SetBaselineData:
 561              	.LFB43:
 698:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 699:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 700:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 701:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_SetBaselineData
 702:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 703:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 704:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 705:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API writes the data value passed as an argument to the sensor baseline array.
 706:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 707:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 708:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 709:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  data:    Sensor baseline.
 710:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 711:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 712:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None.
 713:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 714:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 715:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorBaseline[] - the array with initial values by scanning
 716:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 717:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 718:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 719:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 720:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 721:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_SetBaselineData(uint32 sensor, uint16 data)
 722:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 562              		.loc 1 722 0
 563              		.cfi_startproc
 564              	.LVL64:
 723:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	CapSense_sensorBaseline[sensor] = data;
 565              		.loc 1 723 0
 566 0000 4000     		lsl	r0, r0, #1
 567              	.LVL65:
 568 0002 014B     		ldr	r3, .L44
 569 0004 C152     		strh	r1, [r0, r3]
 724:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 570              		.loc 1 724 0
 571              		@ sp needed
 572 0006 7047     		bx	lr
 573              	.L45:
 574              		.align	2
 575              	.L44:
 576 0008 00000000 		.word	.LANCHOR0
 577              		.cfi_endproc
 578              	.LFE43:
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 24


 579              		.size	CapSense_SetBaselineData, .-CapSense_SetBaselineData
 580              		.section	.text.CapSense_GetDiffCountData,"ax",%progbits
 581              		.align	2
 582              		.global	CapSense_GetDiffCountData
 583              		.code	16
 584              		.thumb_func
 585              		.type	CapSense_GetDiffCountData, %function
 586              	CapSense_GetDiffCountData:
 587              	.LFB44:
 725:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 726:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 727:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 728:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetDiffCountData
 729:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 730:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 731:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 732:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function returns the Sensor Signal from the component.
 733:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 734:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 735:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 736:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 737:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 738:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the difference count value of the sensor indicated by the 
 739:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  argument. 
 740:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 741:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 742:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorSignal[] - the array with difference counts for sensors
 743:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 744:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 745:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 746:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 747:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 748:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_GetDiffCountData(uint32 sensor)
 749:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 588              		.loc 1 749 0
 589              		.cfi_startproc
 590              	.LVL66:
 750:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return (CapSense_sensorSignal[sensor]);
 591              		.loc 1 750 0
 592 0000 4000     		lsl	r0, r0, #1
 593              	.LVL67:
 594 0002 024B     		ldr	r3, .L47
 595 0004 1818     		add	r0, r3, r0
 596 0006 0089     		ldrh	r0, [r0, #8]
 751:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 597              		.loc 1 751 0
 598              		@ sp needed
 599 0008 7047     		bx	lr
 600              	.L48:
 601 000a C046     		.align	2
 602              	.L47:
 603 000c 00000000 		.word	.LANCHOR0
 604              		.cfi_endproc
 605              	.LFE44:
 606              		.size	CapSense_GetDiffCountData, .-CapSense_GetDiffCountData
 607              		.section	.text.CapSense_SetDiffCountData,"ax",%progbits
 608              		.align	2
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 25


 609              		.global	CapSense_SetDiffCountData
 610              		.code	16
 611              		.thumb_func
 612              		.type	CapSense_SetDiffCountData, %function
 613              	CapSense_SetDiffCountData:
 614              	.LFB45:
 752:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 753:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 754:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 755:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_SetDiffCountData
 756:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 757:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 758:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 759:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API writes the data value passed as an argument to the sensor signal array.
 760:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 761:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 762:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
 763:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  value:   Sensor signal.
 764:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 765:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 766:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None. 
 767:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 768:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 769:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorSignal[] - the array with difference counts for sensors
 770:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 771:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 772:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 773:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 774:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 775:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_SetDiffCountData(uint32 sensor, uint16 value)
 776:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 615              		.loc 1 776 0
 616              		.cfi_startproc
 617              	.LVL68:
 777:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     CapSense_sensorSignal[sensor] = value;
 618              		.loc 1 777 0
 619 0000 4000     		lsl	r0, r0, #1
 620              	.LVL69:
 621 0002 024B     		ldr	r3, .L50
 622 0004 1818     		add	r0, r3, r0
 623 0006 0181     		strh	r1, [r0, #8]
 778:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 624              		.loc 1 778 0
 625              		@ sp needed
 626 0008 7047     		bx	lr
 627              	.L51:
 628 000a C046     		.align	2
 629              	.L50:
 630 000c 00000000 		.word	.LANCHOR0
 631              		.cfi_endproc
 632              	.LFE45:
 633              		.size	CapSense_SetDiffCountData, .-CapSense_SetDiffCountData
 634              		.section	.text.CapSense_GetFingerThreshold,"ax",%progbits
 635              		.align	2
 636              		.global	CapSense_GetFingerThreshold
 637              		.code	16
 638              		.thumb_func
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 26


 639              		.type	CapSense_GetFingerThreshold, %function
 640              	CapSense_GetFingerThreshold:
 641              	.LFB46:
 779:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 780:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 781:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 782:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetFingerThreshold
 783:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 784:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 785:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 786:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function reads the finger threshold from the component.
 787:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 788:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 789:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
 790:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 791:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 792:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the finger threshold of the widget indicated by the argument. 
 793:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 794:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 795:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_fingerThreshold[] - This array contains the level of signal 
 796:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  for each widget that is determined if a finger is present on the widget.
 797:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 798:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 799:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 800:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 801:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 802:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_GetFingerThreshold(uint32 widget)
 803:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 642              		.loc 1 803 0
 643              		.cfi_startproc
 644              	.LVL70:
 804:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return(CapSense_fingerThreshold[widget]);
 645              		.loc 1 804 0
 646 0000 4000     		lsl	r0, r0, #1
 647              	.LVL71:
 648 0002 024B     		ldr	r3, .L53
 649 0004 1818     		add	r0, r3, r0
 650 0006 008A     		ldrh	r0, [r0, #16]
 805:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 651              		.loc 1 805 0
 652              		@ sp needed
 653 0008 7047     		bx	lr
 654              	.L54:
 655 000a C046     		.align	2
 656              	.L53:
 657 000c 00000000 		.word	.LANCHOR1
 658              		.cfi_endproc
 659              	.LFE46:
 660              		.size	CapSense_GetFingerThreshold, .-CapSense_GetFingerThreshold
 661              		.section	.text.CapSense_GetNoiseThreshold,"ax",%progbits
 662              		.align	2
 663              		.global	CapSense_GetNoiseThreshold
 664              		.code	16
 665              		.thumb_func
 666              		.type	CapSense_GetNoiseThreshold, %function
 667              	CapSense_GetNoiseThreshold:
 668              	.LFB47:
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 27


 806:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 807:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 808:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 809:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetNoiseThreshold
 810:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 811:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 812:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 813:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function reads the noise threshold from the component.
 814:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 815:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 816:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
 817:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 818:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 819:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the noise threshold of the widget indicated by the argument. 
 820:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 821:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 822:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_noiseThreshold[] - This array contains the level of signal 
 823:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  for each widget that determines the level of noise in the capacitive scan.
 824:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 825:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 826:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 827:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 828:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 829:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_GetNoiseThreshold(uint32 widget)
 830:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 669              		.loc 1 830 0
 670              		.cfi_startproc
 671              	.LVL72:
 831:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return (CapSense_noiseThreshold[widget]);
 672              		.loc 1 831 0
 673 0000 4000     		lsl	r0, r0, #1
 674              	.LVL73:
 675 0002 024B     		ldr	r3, .L56
 676 0004 1818     		add	r0, r3, r0
 677 0006 8088     		ldrh	r0, [r0, #4]
 832:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 678              		.loc 1 832 0
 679              		@ sp needed
 680 0008 7047     		bx	lr
 681              	.L57:
 682 000a C046     		.align	2
 683              	.L56:
 684 000c 00000000 		.word	.LANCHOR1
 685              		.cfi_endproc
 686              	.LFE47:
 687              		.size	CapSense_GetNoiseThreshold, .-CapSense_GetNoiseThreshold
 688              		.section	.text.CapSense_GetFingerHysteresis,"ax",%progbits
 689              		.align	2
 690              		.global	CapSense_GetFingerHysteresis
 691              		.code	16
 692              		.thumb_func
 693              		.type	CapSense_GetFingerHysteresis, %function
 694              	CapSense_GetFingerHysteresis:
 695              	.LFB48:
 833:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 834:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 835:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 28


 836:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetFingerHysteresis
 837:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
 838:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 839:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 840:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function reads the Hysteresis value from the component.
 841:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 842:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
 843:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
 844:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 845:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
 846:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the Hysteresis of the widget indicated by the argument. 
 847:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 848:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 849:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_hysteresis[] - This array contains the hysteresis value 
 850:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *   for each widget.
 851:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_widgetNumberSld - structure with dynamic sliders' parameters.
 852:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 853:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 854:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 855:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 856:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 857:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_GetFingerHysteresis(uint32 widget)
 858:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 696              		.loc 1 858 0
 697              		.cfi_startproc
 698              	.LVL74:
 859:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return(CapSense_hysteresis[widget]);
 699              		.loc 1 859 0
 700 0000 4000     		lsl	r0, r0, #1
 701              	.LVL75:
 702 0002 024B     		ldr	r3, .L59
 703 0004 1818     		add	r0, r3, r0
 704 0006 808A     		ldrh	r0, [r0, #20]
 860:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 705              		.loc 1 860 0
 706              		@ sp needed
 707 0008 7047     		bx	lr
 708              	.L60:
 709 000a C046     		.align	2
 710              	.L59:
 711 000c 00000000 		.word	.LANCHOR1
 712              		.cfi_endproc
 713              	.LFE48:
 714              		.size	CapSense_GetFingerHysteresis, .-CapSense_GetFingerHysteresis
 715              		.section	.text.CapSense_GetNegativeNoiseThreshold,"ax",%progbits
 716              		.align	2
 717              		.global	CapSense_GetNegativeNoiseThreshold
 718              		.code	16
 719              		.thumb_func
 720              		.type	CapSense_GetNegativeNoiseThreshold, %function
 721              	CapSense_GetNegativeNoiseThreshold:
 722              	.LFB49:
 861:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 862:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 863:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
 864:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetNegativeNoiseThreshold
 865:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 29


 866:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 867:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
 868:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function reads the negative noise threshold from the component.
 869:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 870:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters: 
 871:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None.
 872:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 873:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return Value: 
 874:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the negative noise threshold
 875:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 876:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
 877:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_negativeNoiseThreshold - This variable specifies the negative 
 878:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *   difference between the raw count and baseline levels for Baseline resetting
 879:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *   to the raw count level.
 880:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
 881:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
 882:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
 883:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
 884:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
 885:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint16 CapSense_GetNegativeNoiseThreshold(uint32 widget)
 886:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 723              		.loc 1 886 0
 724              		.cfi_startproc
 725              	.LVL76:
 887:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_TUNING_METHOD != CapSense__TUNING_NONE)
 888:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return(CapSense_negativeNoiseThreshold[widget]);
 726              		.loc 1 888 0
 727 0000 4000     		lsl	r0, r0, #1
 728              	.LVL77:
 729 0002 024B     		ldr	r3, .L62
 730 0004 1818     		add	r0, r3, r0
 731 0006 0089     		ldrh	r0, [r0, #8]
 889:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #else
 890:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return(CapSense_NEGATIVE_NOISE_THRESHOLD);
 891:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TUNING_METHOD != CapSense__TUNING_NONE) */ 
 892:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 732              		.loc 1 892 0
 733              		@ sp needed
 734 0008 7047     		bx	lr
 735              	.L63:
 736 000a C046     		.align	2
 737              	.L62:
 738 000c 00000000 		.word	.LANCHOR1
 739              		.cfi_endproc
 740              	.LFE49:
 741              		.size	CapSense_GetNegativeNoiseThreshold, .-CapSense_GetNegativeNoiseThreshold
 742              		.section	.text.CapSense_SetFingerThreshold,"ax",%progbits
 743              		.align	2
 744              		.global	CapSense_SetFingerThreshold
 745              		.code	16
 746              		.thumb_func
 747              		.type	CapSense_SetFingerThreshold, %function
 748              	CapSense_SetFingerThreshold:
 749              	.LFB50:
 893:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 894:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 895:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if(CapSense_TUNING_METHOD != CapSense__TUNING_NONE)
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 30


 896:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
 897:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_SetFingerThreshold
 898:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
 899:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 900:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
 901:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  This API sets the finger threshold value for a widget. 
 902:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 903:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters: 
 904:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  sensorNumber:  widget index. 
 905:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  value:  Finger threshold value for the widget.
 906:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 907:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return Value: 
 908:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 909:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 910:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
 911:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_fingerThreshold[] - This array contains the level of signal 
 912:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*   for each widget that determines if a finger is present on the widget.
 913:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
 914:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
 915:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 916:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 917:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
 918:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_SetFingerThreshold(uint32 widget, uint16 value)
 919:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{	
 750              		.loc 1 919 0
 751              		.cfi_startproc
 752              	.LVL78:
 920:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_fingerThreshold[widget] = value;
 753              		.loc 1 920 0
 754 0000 4000     		lsl	r0, r0, #1
 755              	.LVL79:
 756 0002 024B     		ldr	r3, .L65
 757 0004 1818     		add	r0, r3, r0
 758 0006 0182     		strh	r1, [r0, #16]
 921:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 759              		.loc 1 921 0
 760              		@ sp needed
 761 0008 7047     		bx	lr
 762              	.L66:
 763 000a C046     		.align	2
 764              	.L65:
 765 000c 00000000 		.word	.LANCHOR1
 766              		.cfi_endproc
 767              	.LFE50:
 768              		.size	CapSense_SetFingerThreshold, .-CapSense_SetFingerThreshold
 769              		.section	.text.CapSense_SetNoiseThreshold,"ax",%progbits
 770              		.align	2
 771              		.global	CapSense_SetNoiseThreshold
 772              		.code	16
 773              		.thumb_func
 774              		.type	CapSense_SetNoiseThreshold, %function
 775              	CapSense_SetNoiseThreshold:
 776              	.LFB51:
 922:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 923:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 924:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
 925:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_SetNoiseThreshold
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 31


 926:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
 927:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 928:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
 929:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  This API sets the Noise Threshold value for each widget.
 930:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 931:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters:
 932:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  widget:  Sensor index number.
 933:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  value:   Noise Threshold value for widget.
 934:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 935:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return Value: 
 936:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 937:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 938:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
 939:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_noiseThreshold[] - This array contains the level of signal 
 940:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*   for each widget that determines the level of noise in the capacitive scan.
 941:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
 942:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
 943:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 944:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 945:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
 946:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_SetNoiseThreshold(uint32 widget, uint16 value)
 947:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 777              		.loc 1 947 0
 778              		.cfi_startproc
 779              	.LVL80:
 948:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_noiseThreshold[widget] = value;
 780              		.loc 1 948 0
 781 0000 4000     		lsl	r0, r0, #1
 782              	.LVL81:
 783 0002 024B     		ldr	r3, .L68
 784 0004 1818     		add	r0, r3, r0
 785 0006 8180     		strh	r1, [r0, #4]
 949:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 786              		.loc 1 949 0
 787              		@ sp needed
 788 0008 7047     		bx	lr
 789              	.L69:
 790 000a C046     		.align	2
 791              	.L68:
 792 000c 00000000 		.word	.LANCHOR1
 793              		.cfi_endproc
 794              	.LFE51:
 795              		.size	CapSense_SetNoiseThreshold, .-CapSense_SetNoiseThreshold
 796              		.section	.text.CapSense_SetFingerHysteresis,"ax",%progbits
 797              		.align	2
 798              		.global	CapSense_SetFingerHysteresis
 799              		.code	16
 800              		.thumb_func
 801              		.type	CapSense_SetFingerHysteresis, %function
 802              	CapSense_SetFingerHysteresis:
 803              	.LFB52:
 950:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 951:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 952:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
 953:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_SetFingerHysteresis
 954:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
 955:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 32


 956:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
 957:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  This API sets the Hysteresis value of a widget
 958:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 959:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters: 
 960:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  value:  Hysteresis value for widgets.
 961:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  widget:  widget number
 962:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 963:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return Value: 
 964:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 965:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 966:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
 967:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_hysteresis[] - This array contains the hysteresis value for each widget.
 968:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_widgetNumberSld - structure with dynamic sliders' parameters.
 969:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 970:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
 971:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 972:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 973:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
 974:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_SetFingerHysteresis(uint32 widget, uint16 value)
 975:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 804              		.loc 1 975 0
 805              		.cfi_startproc
 806              	.LVL82:
 976:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_hysteresis[widget] = value;
 807              		.loc 1 976 0
 808 0000 4000     		lsl	r0, r0, #1
 809              	.LVL83:
 810 0002 024B     		ldr	r3, .L71
 811 0004 1818     		add	r0, r3, r0
 812 0006 8182     		strh	r1, [r0, #20]
 977:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 813              		.loc 1 977 0
 814              		@ sp needed
 815 0008 7047     		bx	lr
 816              	.L72:
 817 000a C046     		.align	2
 818              	.L71:
 819 000c 00000000 		.word	.LANCHOR1
 820              		.cfi_endproc
 821              	.LFE52:
 822              		.size	CapSense_SetFingerHysteresis, .-CapSense_SetFingerHysteresis
 823              		.section	.text.CapSense_SetNegativeNoiseThreshold,"ax",%progbits
 824              		.align	2
 825              		.global	CapSense_SetNegativeNoiseThreshold
 826              		.code	16
 827              		.thumb_func
 828              		.type	CapSense_SetNegativeNoiseThreshold, %function
 829              	CapSense_SetNegativeNoiseThreshold:
 830              	.LFB53:
 978:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 979:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
 980:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
 981:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_SetNegativeNoiseThreshold
 982:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
 983:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 984:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
 985:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  This API sets the Negative Noise Threshold value of a widget
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 33


 986:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 987:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters: 
 988:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  value:  Negative Noise Threshold value for widgets.
 989:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  widget: widget number
 990:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 991:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return Value: 
 992:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
 993:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
 994:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
 995:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_negativeNoiseThreshold  - This parameter specifies the negative 
 996:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*   difference between the raw count and baseline levels for Baseline resetting to 
 997:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*   the raw count level.
 998:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
 999:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
1000:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1001:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1002:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
1003:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_SetNegativeNoiseThreshold(uint32 widget, uint16 value)
1004:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 831              		.loc 1 1004 0
 832              		.cfi_startproc
 833              	.LVL84:
1005:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_negativeNoiseThreshold[widget] = value;
 834              		.loc 1 1005 0
 835 0000 4000     		lsl	r0, r0, #1
 836              	.LVL85:
 837 0002 024B     		ldr	r3, .L74
 838 0004 1818     		add	r0, r3, r0
 839 0006 0181     		strh	r1, [r0, #8]
1006:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 840              		.loc 1 1006 0
 841              		@ sp needed
 842 0008 7047     		bx	lr
 843              	.L75:
 844 000a C046     		.align	2
 845              	.L74:
 846 000c 00000000 		.word	.LANCHOR1
 847              		.cfi_endproc
 848              	.LFE53:
 849              		.size	CapSense_SetNegativeNoiseThreshold, .-CapSense_SetNegativeNoiseThreshold
 850              		.section	.text.CapSense_SetDebounce,"ax",%progbits
 851              		.align	2
 852              		.global	CapSense_SetDebounce
 853              		.code	16
 854              		.thumb_func
 855              		.type	CapSense_SetDebounce, %function
 856              	CapSense_SetDebounce:
 857              	.LFB54:
1007:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1008:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1009:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
1010:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_SetDebounce
1011:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
1012:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1013:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
1014:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  This API sets the debounce value for a widget.
1015:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 34


1016:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters: 
1017:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  value:  Debounce value for widget.
1018:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  widget: widget index.
1019:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1020:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return Value: 
1021:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1022:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1023:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
1024:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_debounce[] - This array contains the debounce value for each widget.
1025:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_widgetNumberSld - structure with dynamic sliders' parameters.
1026:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1027:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
1028:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1029:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1030:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
1031:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_SetDebounce(uint32 widget, uint8 value)
1032:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 858              		.loc 1 1032 0
 859              		.cfi_startproc
 860              	.LVL86:
1033:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_debounce[widget] = value;
 861              		.loc 1 1033 0
 862 0000 014B     		ldr	r3, .L77
 863 0002 1954     		strb	r1, [r3, r0]
1034:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 864              		.loc 1 1034 0
 865              		@ sp needed
 866 0004 7047     		bx	lr
 867              	.L78:
 868 0006 C046     		.align	2
 869              	.L77:
 870 0008 00000000 		.word	.LANCHOR1
 871              		.cfi_endproc
 872              	.LFE54:
 873              		.size	CapSense_SetDebounce, .-CapSense_SetDebounce
 874              		.section	.text.CapSense_SetLowBaselineReset,"ax",%progbits
 875              		.align	2
 876              		.global	CapSense_SetLowBaselineReset
 877              		.code	16
 878              		.thumb_func
 879              		.type	CapSense_SetLowBaselineReset, %function
 880              	CapSense_SetLowBaselineReset:
 881              	.LFB55:
1035:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1036:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1037:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	/*******************************************************************************
1038:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Function Name: CapSense_SetLowBaselineReset
1039:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	********************************************************************************
1040:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1041:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Summary:
1042:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  This API sets the low baseline reset threshold value for the sensor.
1043:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1044:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Parameters: 
1045:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  value: low baseline reset threshold value.
1046:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  sensor: Sensor index.
1047:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1048:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Return Value: 
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 35


1049:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1050:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1051:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
1052:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_lowBaselineReset[] - This array contains the Baseline update 
1053:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  threshold value for each sensor.
1054:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
1055:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
1056:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1057:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1058:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*******************************************************************************/
1059:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	void CapSense_SetLowBaselineReset(uint32 sensor, uint8 value)
1060:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	{
 882              		.loc 1 1060 0
 883              		.cfi_startproc
 884              	.LVL87:
1061:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		CapSense_lowBaselineReset[sensor] = value;
 885              		.loc 1 1061 0
 886 0000 014B     		ldr	r3, .L80
 887 0002 1818     		add	r0, r3, r0
 888              	.LVL88:
 889 0004 0173     		strb	r1, [r0, #12]
1062:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	}
 890              		.loc 1 1062 0
 891              		@ sp needed
 892 0006 7047     		bx	lr
 893              	.L81:
 894              		.align	2
 895              	.L80:
 896 0008 00000000 		.word	.LANCHOR1
 897              		.cfi_endproc
 898              	.LFE55:
 899              		.size	CapSense_SetLowBaselineReset, .-CapSense_SetLowBaselineReset
 900              		.section	.text.CapSense_CheckIsSensorActive,"ax",%progbits
 901              		.align	2
 902              		.global	CapSense_CheckIsSensorActive
 903              		.code	16
 904              		.thumb_func
 905              		.type	CapSense_CheckIsSensorActive, %function
 906              	CapSense_CheckIsSensorActive:
 907              	.LFB56:
1063:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TUNING_METHOD != CapSense__TUNING_NONE) */
1064:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1065:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1066:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
1067:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsSensorActive
1068:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
1069:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1070:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
1071:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Compares the CapSense_sensorSignal[sensor] array element to the finger
1072:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  threshold of the widget it belongs to. The hysteresis and debounce are taken into 
1073:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  account. The hysteresis is added or subtracted from the finger threshold 
1074:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  based on whether the sensor is currently active. 
1075:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  If the sensor is active, the threshold is lowered by the hysteresis amount.
1076:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
1077:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  The debounce counter is added to the sensor active transition.
1078:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This function updates the CapSense_sensorOnMask[] array element.
1079:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 36


1080:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
1081:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor:  Sensor number.
1082:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1083:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
1084:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Returns sensor state 1 if active, 0 if not active.
1085:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1086:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
1087:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorSignal[] - used to store the difference between 
1088:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  the current value of raw data and a previous value of the baseline.
1089:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_debounceCounter[]   - used to store the current debounce 
1090:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  counter of the sensor. the widget which have this parameter are buttons, matrix 
1091:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  buttons, proximity, and guard. All other widgets don't have the  debounce parameter
1092:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
1093:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorOnMask[] - used to store the sensors on/off state.
1094:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorOnMask[0] contains the masked bits for sensors 
1095:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1096:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
1097:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1098:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 - sensor is inactive.
1099:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  1 - sensor is active.
1100:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
1101:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
1102:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1103:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1104:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
1105:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint32 CapSense_CheckIsSensorActive(uint32 sensor)
1106:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {	
 908              		.loc 1 1106 0
 909              		.cfi_startproc
 910              	.LVL89:
 911 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 912              		.cfi_def_cfa_offset 20
 913              		.cfi_offset 4, -20
 914              		.cfi_offset 5, -16
 915              		.cfi_offset 6, -12
 916              		.cfi_offset 7, -8
 917              		.cfi_offset 14, -4
 918 0002 4746     		mov	r7, r8
 919 0004 80B4     		push	{r7}
 920              		.cfi_def_cfa_offset 24
 921              		.cfi_offset 8, -24
 922 0006 041C     		mov	r4, r0
1107:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	uint8 widget;
1108:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	uint8 debounce;
1109:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	uint8 debounceIndex;
1110:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1111:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	uint16 fingerThreshold;
1112:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	uint16 hysteresis;
1113:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
1114:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
1115:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Prepare to find debounce counter index */
1116:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     widget = CapSense_widgetNumber[sensor];
 923              		.loc 1 1116 0
 924 0008 224B     		ldr	r3, .L87
 925 000a 1D5C     		ldrb	r5, [r3, r0]
1117:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
1118:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     fingerThreshold = CapSense_fingerThreshold[widget];
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 37


 926              		.loc 1 1118 0
 927 000c 224A     		ldr	r2, .L87+4
 928 000e 6B00     		lsl	r3, r5, #1
 929 0010 D318     		add	r3, r2, r3
 930 0012 198A     		ldrh	r1, [r3, #16]
 931 0014 8846     		mov	r8, r1
 932              	.LVL90:
1119:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	hysteresis = CapSense_hysteresis[widget];
 933              		.loc 1 1119 0
 934 0016 9E8A     		ldrh	r6, [r3, #20]
 935              	.LVL91:
1120:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	debounce = CapSense_debounce[widget];	
 936              		.loc 1 1120 0
 937 0018 575D     		ldrb	r7, [r2, r5]
 938              	.LVL92:
1121:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
1122:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	    debounceIndex = widget;
1123:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1124:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	
1125:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Was on */
1126:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     if (0u != CapSense_GetBitValue(CapSense_sensorOnMask, sensor))
 939              		.loc 1 1126 0
 940 001a 2048     		ldr	r0, .L87+8
 941              	.LVL93:
 942 001c 1030     		add	r0, r0, #16
 943 001e 211C     		mov	r1, r4
 944 0020 FFF7FEFF 		bl	CapSense_GetBitValue
 945              	.LVL94:
 946 0024 0028     		cmp	r0, #0
 947 0026 11D0     		beq	.L83
1127:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1128:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Hysteresis minus */
1129:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 948              		.loc 1 1129 0
 949 0028 6300     		lsl	r3, r4, #1
 950 002a 1C4A     		ldr	r2, .L87+8
 951 002c D318     		add	r3, r2, r3
 952 002e 1B89     		ldrh	r3, [r3, #8]
 953 0030 4246     		mov	r2, r8
 954 0032 961B     		sub	r6, r2, r6
 955              	.LVL95:
 956 0034 B342     		cmp	r3, r6
 957 0036 21DA     		bge	.L84
1130:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1131:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	   		CapSense_SetBitValue(CapSense_sensorOnMask, sensor, 0u);
 958              		.loc 1 1131 0
 959 0038 184E     		ldr	r6, .L87+8
 960 003a 301C     		mov	r0, r6
 961 003c 1030     		add	r0, r0, #16
 962 003e 211C     		mov	r1, r4
 963 0040 0022     		mov	r2, #0
 964 0042 FFF7FEFF 		bl	CapSense_SetBitValue
 965              	.LVL96:
1132:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			/* Sensor inactive - reset Debounce counter */
1133:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce;
 966              		.loc 1 1133 0
 967 0046 7519     		add	r5, r6, r5
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 38


 968 0048 2F73     		strb	r7, [r5, #12]
 969 004a 17E0     		b	.L84
 970              	.LVL97:
 971              	.L83:
1134:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1135:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1136:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     else    /* Was off */
1137:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1138:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Hysteresis plus */
1139:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (CapSense_sensorSignal[sensor] >= (fingerThreshold + hysteresis))
 972              		.loc 1 1139 0
 973 004c 6300     		lsl	r3, r4, #1
 974 004e 134A     		ldr	r2, .L87+8
 975 0050 D318     		add	r3, r2, r3
 976 0052 1B89     		ldrh	r3, [r3, #8]
 977 0054 4644     		add	r6, r6, r8
 978              	.LVL98:
 979 0056 B342     		cmp	r3, r6
 980 0058 0DDB     		blt	.L85
1140:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1141:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			CapSense_debounceCounter[debounceIndex]--;
 981              		.loc 1 1141 0
 982 005a 5519     		add	r5, r2, r5
 983 005c 2B7B     		ldrb	r3, [r5, #12]
 984 005e 013B     		sub	r3, r3, #1
 985 0060 DBB2     		uxtb	r3, r3
 986 0062 2B73     		strb	r3, [r5, #12]
1142:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Sensor active, decrement debounce counter */
1143:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if(CapSense_debounceCounter[debounceIndex] == 0u)
 987              		.loc 1 1143 0
 988 0064 002B     		cmp	r3, #0
 989 0066 09D1     		bne	.L84
1144:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1145:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_SetBitValue(CapSense_sensorOnMask, sensor, 1u); 
 990              		.loc 1 1145 0
 991 0068 101C     		mov	r0, r2
 992 006a 1030     		add	r0, r0, #16
 993 006c 211C     		mov	r1, r4
 994 006e 0122     		mov	r2, #1
 995 0070 FFF7FEFF 		bl	CapSense_SetBitValue
 996              	.LVL99:
 997 0074 02E0     		b	.L84
 998              	.L85:
1146:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1147:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1148:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
1149:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1150:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
1151:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_debounceCounter[debounceIndex] = debounce;
 999              		.loc 1 1151 0
 1000 0076 094B     		ldr	r3, .L87+8
 1001 0078 5D19     		add	r5, r3, r5
 1002 007a 2F73     		strb	r7, [r5, #12]
 1003              	.L84:
1152:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1153:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1154:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 39


1155:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     return ((uint32)((0u != CapSense_GetBitValue(CapSense_sensorOnMask, sensor)) ? 1u : 0u));
 1004              		.loc 1 1155 0
 1005 007c 0748     		ldr	r0, .L87+8
 1006 007e 1030     		add	r0, r0, #16
 1007 0080 211C     		mov	r1, r4
 1008 0082 FFF7FEFF 		bl	CapSense_GetBitValue
 1009              	.LVL100:
 1010 0086 0028     		cmp	r0, #0
 1011 0088 00D0     		beq	.L86
 1012 008a 0120     		mov	r0, #1
 1013              	.L86:
1156:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1014              		.loc 1 1156 0 discriminator 4
 1015              		@ sp needed
 1016              	.LVL101:
 1017              	.LVL102:
 1018              	.LVL103:
 1019 008c 04BC     		pop	{r2}
 1020 008e 9046     		mov	r8, r2
 1021 0090 F0BD     		pop	{r4, r5, r6, r7, pc}
 1022              	.L88:
 1023 0092 C046     		.align	2
 1024              	.L87:
 1025 0094 00000000 		.word	CapSense_widgetNumber
 1026 0098 00000000 		.word	.LANCHOR1
 1027 009c 00000000 		.word	.LANCHOR0
 1028              		.cfi_endproc
 1029              	.LFE56:
 1030              		.size	CapSense_CheckIsSensorActive, .-CapSense_CheckIsSensorActive
 1031              		.section	.text.CapSense_CheckIsWidgetActive,"ax",%progbits
 1032              		.align	2
 1033              		.global	CapSense_CheckIsWidgetActive
 1034              		.code	16
 1035              		.thumb_func
 1036              		.type	CapSense_CheckIsWidgetActive, %function
 1037              	CapSense_CheckIsWidgetActive:
 1038              	.LFB57:
1157:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1158:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1159:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
1160:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsWidgetActive
1161:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
1162:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1163:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
1164:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Compares the CapSense_sensorSignal[] array element to the finger threshold of 
1165:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * the widget it belongs to. The hysteresis and debounce are taken into account. 
1166:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * The hysteresis is added or subtracted from the finger threshold based on whether
1167:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  the sensor is currently active. If the sensor is active, the threshold is 
1168:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  lowered by the hysteresis amount. If the sensor is inactive, the threshold 
1169:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  is raised by the hysteresis amount. 
1170:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * The debounce counter added to the sensor active transition. 
1171:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * This function updates CapSense_sensorOnMask[] array element
1172:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1173:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
1174:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
1175:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1176:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 40


1177:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Returns widget sensor state 1 if one or more sensors within widget is/are 
1178:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  active, 0 if all sensors within widget are inactive.
1179:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1180:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
1181:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  rawDataIndex[]: Contains the  1st sensor position in the widget
1182:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
1183:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
1184:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1185:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1186:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
1187:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint32 CapSense_CheckIsWidgetActive(uint32 widget)
1188:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1039              		.loc 1 1188 0
 1040              		.cfi_startproc
 1041              	.LVL104:
 1042 0000 08B5     		push	{r3, lr}
 1043              		.cfi_def_cfa_offset 8
 1044              		.cfi_offset 3, -8
 1045              		.cfi_offset 14, -4
 1046              	.LVL105:
1189:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 rawIndex = (uint32)CapSense_rawDataIndex[widget];
1190:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 numOfSensors = (uint32)CapSense_numberOfSensors[widget] + rawIndex;
1191:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 state = 0u;
1192:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1193:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Check all sensors of widget */
1194:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     do
1195:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1196:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(CapSense_CheckIsSensorActive((uint32)rawIndex) != 0u)
 1047              		.loc 1 1196 0
 1048 0002 0020     		mov	r0, #0
 1049              	.LVL106:
 1050 0004 FFF7FEFF 		bl	CapSense_CheckIsSensorActive
 1051              	.LVL107:
 1052 0008 0028     		cmp	r0, #0
 1053 000a 00D0     		beq	.L90
1197:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1198:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             state = CapSense_SENSOR_IS_ACTIVE;
 1054              		.loc 1 1198 0
 1055 000c 0120     		mov	r0, #1
 1056              	.L90:
 1057              	.LVL108:
1199:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1200:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         rawIndex++;
1201:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1202:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     while(rawIndex < numOfSensors);
1203:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1204:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1205:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1206:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     return state;
1207:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1058              		.loc 1 1207 0
 1059              		@ sp needed
 1060 000e 08BD     		pop	{r3, pc}
 1061              		.cfi_endproc
 1062              	.LFE57:
 1063              		.size	CapSense_CheckIsWidgetActive, .-CapSense_CheckIsWidgetActive
 1064              		.section	.text.CapSense_CheckIsAnyWidgetActive,"ax",%progbits
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 41


 1065              		.align	2
 1066              		.global	CapSense_CheckIsAnyWidgetActive
 1067              		.code	16
 1068              		.thumb_func
 1069              		.type	CapSense_CheckIsAnyWidgetActive, %function
 1070              	CapSense_CheckIsAnyWidgetActive:
 1071              	.LFB58:
1208:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1209:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1210:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
1211:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_CheckIsAnyWidgetActive
1212:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
1213:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1214:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
1215:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Compares all the sensors of the CapSense_Signal[] array to their finger 
1216:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  threshold. Calls CapSense_CheckIsWidgetActive() for each widget so 
1217:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  the CapSense_sensorOnMask[] array is up to date after calling this 
1218:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  function.
1219:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1220:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
1221:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
1222:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1223:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
1224:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Returns 1 if any widget is active, 0 none of widgets are active.
1225:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1226:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
1227:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1228:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
1229:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
1230:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1231:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1232:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
1233:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint32 CapSense_CheckIsAnyWidgetActive(void)
1234:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1072              		.loc 1 1234 0
 1073              		.cfi_startproc
 1074 0000 38B5     		push	{r3, r4, r5, lr}
 1075              		.cfi_def_cfa_offset 16
 1076              		.cfi_offset 3, -16
 1077              		.cfi_offset 4, -12
 1078              		.cfi_offset 5, -8
 1079              		.cfi_offset 14, -4
 1080              	.LVL109:
1235:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1236:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	    uint32 i;
1237:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 state = 0u;
 1081              		.loc 1 1237 0
 1082 0002 0025     		mov	r5, #0
1238:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1239:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     for(i = 0u; i < CapSense_TOTAL_WIDGET_COUNT; i++)
 1083              		.loc 1 1239 0
 1084 0004 0024     		mov	r4, #0
 1085 0006 06E0     		b	.L93
 1086              	.LVL110:
 1087              	.L95:
1240:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1241:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (CapSense_CheckIsWidgetActive(i) != 0u)
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 42


 1088              		.loc 1 1241 0
 1089 0008 201C     		mov	r0, r4
 1090 000a FFF7FEFF 		bl	CapSense_CheckIsWidgetActive
 1091              	.LVL111:
 1092 000e 0028     		cmp	r0, #0
 1093 0010 00D0     		beq	.L94
1242:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1243:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             state = CapSense_WIDGET_IS_ACTIVE;
 1094              		.loc 1 1243 0
 1095 0012 0125     		mov	r5, #1
 1096              	.LVL112:
 1097              	.L94:
1239:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 1098              		.loc 1 1239 0 discriminator 2
 1099 0014 0134     		add	r4, r4, #1
 1100              	.LVL113:
 1101              	.L93:
1239:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
 1102              		.loc 1 1239 0 is_stmt 0 discriminator 1
 1103 0016 002C     		cmp	r4, #0
 1104 0018 F6D0     		beq	.L95
1244:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1245:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1246:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1247:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1248:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1249:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     return state;
1250:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1105              		.loc 1 1250 0 is_stmt 1
 1106 001a 281C     		mov	r0, r5
 1107              		@ sp needed
 1108              	.LVL114:
 1109              	.LVL115:
 1110 001c 38BD     		pop	{r3, r4, r5, pc}
 1111              		.cfi_endproc
 1112              	.LFE58:
 1113              		.size	CapSense_CheckIsAnyWidgetActive, .-CapSense_CheckIsAnyWidgetActive
 1114 001e C046     		.section	.text.CapSense_EnableWidget,"ax",%progbits
 1115              		.align	2
 1116              		.global	CapSense_EnableWidget
 1117              		.code	16
 1118              		.thumb_func
 1119              		.type	CapSense_EnableWidget, %function
 1120              	CapSense_EnableWidget:
 1121              	.LFB59:
1251:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1252:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1253:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
1254:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_EnableWidget
1255:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
1256:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1257:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
1258:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Enables all the widget elements (sensors) to the scanning process.
1259:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1260:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
1261:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
1262:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 43


1263:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
1264:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1265:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1266:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
1267:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
1268:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  state.
1269:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
1270:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1271:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
1272:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1273:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 - sensor doesn't scan by CapSense_ScanEnabledWidgets().
1274:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  1 - sensor scans by CapSense_ScanEnabledWidgets().
1275:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
1276:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
1277:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1278:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1279:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
1280:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_EnableWidget(uint32 widget)
1281:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1122              		.loc 1 1281 0
 1123              		.cfi_startproc
 1124              	.LVL116:
 1125 0000 08B5     		push	{r3, lr}
 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 3, -8
 1128              		.cfi_offset 14, -4
 1129              	.LVL117:
1282:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1283:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
1284:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 numOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
1285:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1286:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Enable all sensors of widget */
1287:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     do
1288:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1289:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_SetBitValue(CapSense_sensorEnableMask, (uint32)rawIndex, 1u);
 1130              		.loc 1 1289 0
 1131 0002 0348     		ldr	r0, .L98
 1132              	.LVL118:
 1133 0004 0021     		mov	r1, #0
 1134 0006 0122     		mov	r2, #1
 1135 0008 FFF7FEFF 		bl	CapSense_SetBitValue
 1136              	.LVL119:
1290:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         rawIndex++;
1291:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1292:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     while(rawIndex < numOfSensors);
1293:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1137              		.loc 1 1293 0
 1138              		@ sp needed
 1139 000c 08BD     		pop	{r3, pc}
 1140              	.L99:
 1141 000e C046     		.align	2
 1142              	.L98:
 1143 0010 00000000 		.word	CapSense_sensorEnableMask
 1144              		.cfi_endproc
 1145              	.LFE59:
 1146              		.size	CapSense_EnableWidget, .-CapSense_EnableWidget
 1147              		.section	.text.CapSense_DisableWidget,"ax",%progbits
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 44


 1148              		.align	2
 1149              		.global	CapSense_DisableWidget
 1150              		.code	16
 1151              		.thumb_func
 1152              		.type	CapSense_DisableWidget, %function
 1153              	CapSense_DisableWidget:
 1154              	.LFB60:
1294:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1295:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1296:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
1297:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_DisableWidget
1298:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
1299:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1300:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
1301:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Disables all the widget elements (sensors) from the scanning process.
1302:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1303:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
1304:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  widget:  widget number.
1305:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1306:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
1307:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1308:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1309:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
1310:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[] - used to store the sensor scanning 
1311:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  state.
1312:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[0] contains the masked bits for sensors 
1313:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1314:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_sensorEnableMask[1] contains the masked bits for 
1315:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1316:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  0 - sensor isn't scanned by CapSense_ScanEnabledWidgets().
1317:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  1 - sensor is scanned by CapSense_ScanEnabledWidgets().
1318:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
1319:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
1320:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
1321:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
1322:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
1323:.\Generated_Source\PSoC4/CapSense_CSHL.c **** void CapSense_DisableWidget(uint32 widget)
1324:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1155              		.loc 1 1324 0
 1156              		.cfi_startproc
 1157              	.LVL120:
 1158 0000 08B5     		push	{r3, lr}
 1159              		.cfi_def_cfa_offset 8
 1160              		.cfi_offset 3, -8
 1161              		.cfi_offset 14, -4
 1162              	.LVL121:
1325:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 rawIndex = CapSense_rawDataIndex[widget];
1326:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 numOfSensors = CapSense_numberOfSensors[widget] + rawIndex;
1327:.\Generated_Source\PSoC4/CapSense_CSHL.c ****    
1328:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /* Disable all sensors of widget */
1329:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     do
1330:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1331:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1332:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_SetBitValue(CapSense_sensorEnableMask, (uint32)rawIndex, 0u);
 1163              		.loc 1 1332 0
 1164 0002 0348     		ldr	r0, .L101
 1165              	.LVL122:
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 45


 1166 0004 0021     		mov	r1, #0
 1167 0006 0022     		mov	r2, #0
 1168 0008 FFF7FEFF 		bl	CapSense_SetBitValue
 1169              	.LVL123:
1333:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         rawIndex++;
1334:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1335:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     while(rawIndex < numOfSensors);
1336:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1170              		.loc 1 1336 0
 1171              		@ sp needed
 1172 000c 08BD     		pop	{r3, pc}
 1173              	.L102:
 1174 000e C046     		.align	2
 1175              	.L101:
 1176 0010 00000000 		.word	CapSense_sensorEnableMask
 1177              		.cfi_endproc
 1178              	.LFE60:
 1179              		.size	CapSense_DisableWidget, .-CapSense_DisableWidget
 1180              		.section	.text.CapSense_GetWidgetNumber,"ax",%progbits
 1181              		.align	2
 1182              		.global	CapSense_GetWidgetNumber
 1183              		.code	16
 1184              		.thumb_func
 1185              		.type	CapSense_GetWidgetNumber, %function
 1186              	CapSense_GetWidgetNumber:
 1187              	.LFB61:
1337:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1338:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1339:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if(CapSense_TOTAL_CENTROIDS_BASIC_COUNT)
1340:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
1341:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_FindMaximum
1342:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
1343:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1344:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
1345:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Finds the index of the maximum element within a defined centroid. Checks 
1346:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  CapSense_sensorSignal[] within a defined centroid and 
1347:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  returns the index of the maximum element. The values below the finger threshold are 
1348:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  ignored.
1349:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The centroid is defined by offset of the first element and a number of elements - count.
1350:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The diplexed centroid requires at least two consecutive elements above
1351:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  FingerThreshold to find the index of the maximum element.
1352:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * 
1353:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
1354:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  offset:  Start index of centroid in CapSense_sensorSignal[] array.
1355:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  count:   number of elements within centroid.
1356:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  fingerThreshold:  Finger threshold.
1357:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  diplex:   pointer to diplex table.
1358:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * 
1359:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
1360:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns the index of the maximum element within a defined centroid.
1361:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  If the index of the maximum element isn't found it returns 0xFF.
1362:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1363:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
1364:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_startOfSlider[] - contains the index of the first slider element
1365:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
1366:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects: 
1367:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 46


1368:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
1369:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
1370:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#if (CapSense_IS_DIPLEX_SLIDER)
1371:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold, const uint8 *diplex
1372:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#else 
1373:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		uint8 CapSense_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold)
1374:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	#endif /* (CapSense_IS_DIPLEX_SLIDER) */
1375:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1376:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 i;
1377:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
1378:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 curPos = 0u;
1379:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* No centroid at Start */
1380:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 curCntrdSize = 0u;
1381:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 curCtrdStartPos = CapSense_MAXIMUM_CENTROID;
1382:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Biggest centroid is zero */
1383:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 biggestCtrdSize = 0u;
1384:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 biggestCtrdStartPos = 0u;
1385:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1386:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 maximum = CapSense_MAXIMUM_CENTROID;
1387:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		
1388:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint16 temp = 0u;
1389:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint16 *startOfSlider = &CapSense_sensorSignal[offset];
1390:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1391:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)        
1392:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if(diplex != 0u)
1393:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1394:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Initialize */
1395:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 i = 0u;
1396:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 
1397:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Make slider x2 as Diplexed */
1398:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 count <<= 1u;
1399:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 while(1u)
1400:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 { 
1401:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
1402:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1403:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         if (curCtrdStartPos == CapSense_MAXIMUM_CENTROID)
1404:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         {
1405:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             /* Start of centroid */
1406:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             curCtrdStartPos = i;
1407:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             curCntrdSize++;
1408:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         }
1409:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         else
1410:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         {
1411:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             curCntrdSize++;
1412:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         }
1413:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1414:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     else   /* Select biggest and indicate zero start */
1415:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {          
1416:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         if(curCntrdSize > 0u)
1417:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         {
1418:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             /* We are at the end of current */
1419:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if(curCntrdSize > biggestCtrdSize)
1420:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1421:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 biggestCtrdSize = curCntrdSize;
1422:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 biggestCtrdStartPos = curCtrdStartPos;
1423:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1424:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 47


1425:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             curCntrdSize = 0u;
1426:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             curCtrdStartPos = CapSense_MAXIMUM_CENTROID;
1427:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         }
1428:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1429:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     
1430:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     i++; 
1431:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     curPos = diplex[i];
1432:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if(i == count)
1433:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1434:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         break;
1435:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }            
1436:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1437:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     
1438:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Find biggest centroid if two are same size, last one wins
1439:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                        We are at the end of current */
1440:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (curCntrdSize >= biggestCtrdSize) 
1441:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1442:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     biggestCtrdSize = curCntrdSize;
1443:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     biggestCtrdStartPos = curCtrdStartPos;
1444:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1445:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1446:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             else
1447:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1448:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Without diplexing */ 
1449:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 biggestCtrdSize = count;
1450:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1451:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         
1452:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1453:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Check centroid size */
1454:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if (CapSense_IS_NON_DIPLEX_SLIDER)
1455:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
1456:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #else                    
1457:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if(biggestCtrdSize >= 2u)
1458:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (CapSense_IS_NON_DIPLEX_SLIDER) */
1459:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1460:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
1461:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1462:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)
1463:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (diplex == 0u)
1464:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1465:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 curPos = i;
1466:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1467:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             else
1468:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1469:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 curPos = diplex[i];
1470:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }                    
1471:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #elif (CapSense_IS_DIPLEX_SLIDER)                    
1472:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             curPos = diplex[i];                    
1473:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
1474:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         /* Looking for greater element within centroid */
1475:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         if(startOfSlider[curPos] > fingerThreshold)
1476:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         {
1477:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if(startOfSlider[curPos] > temp)
1478:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1479:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 maximum = i;
1480:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 temp = startOfSlider[curPos];
1481:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 48


1482:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         }
1483:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1484:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 } 
1485:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #else
1486:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             for (i = 0u; i < count; i++)
1487:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {                      
1488:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Looking for greater element within centroid */
1489:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if(startOfSlider[i] > fingerThreshold)
1490:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1491:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if(startOfSlider[i] > temp)
1492:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1493:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         maximum = i;
1494:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         temp = startOfSlider[i];
1495:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1496:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1497:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }    
1498:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1499:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return (maximum);
1500:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1501:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1502:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
1503:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
1504:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_CalcCentroid
1505:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
1506:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1507:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
1508:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns a position value calculated according to the index of the maximum element and API
1509:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  resolution.
1510:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1511:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
1512:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  type:  widget type.
1513:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  diplex:  pointer to diplex table.
1514:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  maximum:  Index of maximum element within centroid.
1515:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  offset:   Start index of centroid in CapSense_sensorSignal[] array.
1516:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  count:    Number of elements within centroid.
1517:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  resolution:  multiplicator calculated according to centroid type and
1518:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  API resolution.
1519:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  noiseThreshold:  Noise threshold.
1520:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * 
1521:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
1522:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns a position value of the slider.
1523:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1524:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects: 
1525:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1526:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
1527:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
1528:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (CapSense_TOTAL_TRACKPAD_GESTURES_COUNT > 0u)
1529:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 CapSense_CalcCentroid(uint8 maximum, uint8 offset, 
1530:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         uint8 count, uint32 resolution, uint16 noiseThreshold)
1531:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #else								
1532:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint8 CapSense_CalcCentroid(uint8 maximum, uint8 offset, 
1533:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         uint8 count, uint16 resolution, uint16 noiseThreshold)					
1534:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_TRACKPAD_GESTURES_COUNT > 0u) */
1535:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1536:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_BASIC_COUNT >
1537:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posPrev;
1538:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posNext;
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 49


1539:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_TOTAL_TOUCH_PADS_BASIC_COU
1540:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1541:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Helps during centroid calculation */
1542:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_TOTAL_CENTROIDS_BASIC_COUNT)
1543:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		    static uint16 CapSense_centroid[3u];
1544:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif  /* (CapSense_TOTAL_CENTROIDS_BASIC_COUNT) */
1545:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                
1546:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)                
1547:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 pos;
1548:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1549:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1550:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 position;
1551:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 numerator;
1552:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         int32 denominator;
1553:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		
1554:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		uint16  *startOfSlider = &CapSense_sensorSignal[offset];
1555:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		
1556:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_BASIC_COUNT >
1557:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             posPrev = 0u;
1558:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_TOTAL_TOUCH_PADS_BASIC_COU
1559:.\Generated_Source\PSoC4/CapSense_CSHL.c ****      
1560:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1561:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if(type == CapSense_TYPE_RADIAL_SLIDER)
1562:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1563:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1564:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1565:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)                
1566:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Copy Signal to the centroid array */
1567:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1568:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                  
1569:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Check borders for ROTARY Slider */
1570:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1571:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 { 
1572:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[count - 1u];
1573:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[1u];
1574:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1575:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 else if (maximum == (count - 1u))    /* End of centroid */
1576:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1577:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1578:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[0u];
1579:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1580:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1581:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1582:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[maximum - 1u];
1583:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[maximum + 1u];
1584:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1585:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1586:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1587:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1588:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1589:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             else
1590:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1591:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1592:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1593:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_TOUCH_PADS_BASIC_COU
1594:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER)                   
1595:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 50


1596:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if(diplex == 0u)
1597:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1598:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         pos     = maximum;
1599:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1600:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posNext = maximum + 1u; 
1601:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1602:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     else
1603:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1604:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         pos     = diplex[maximum];
1605:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posPrev = diplex[maximum - 1u];
1606:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posNext = diplex[maximum + 1u];
1607:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         count <<= 1u;
1608:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }                    
1609:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #elif (CapSense_IS_DIPLEX_SLIDER)
1610:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1611:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     pos     = diplex[maximum];
1612:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     posPrev = diplex[maximum - 1u];
1613:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     posNext = diplex[maximum + 1u];
1614:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     count <<= 1u;                    
1615:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #else                    
1616:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Calculate next and previous near to maximum */
1617:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if (maximum >= 1u)
1618:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1619:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posPrev = maximum - 1u;
1620:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1621:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     posNext = maximum + 1u;
1622:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER && CapSense_IS_NON_DIPLEX_SLIDER) */
1623:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         
1624:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Copy Signal to the centroid array */
1625:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #if (CapSense_IS_DIPLEX_SLIDER)
1626:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[pos];
1627:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #else
1628:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS] = startOfSlider[maximum];
1629:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1630:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     
1631:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Check borders for LINEAR Slider */
1632:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1633:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 { 
1634:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = 0u;
1635:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1636:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1637:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 else if (maximum == ((count) - 1u)) /* End of centroid */
1638:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1639:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1640:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = 0u;
1641:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1642:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 else                                /* Not first Not last */
1643:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1644:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_PREV] = startOfSlider[posPrev];
1645:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_centroid[CapSense_POS_NEXT] = startOfSlider[posNext];
1646:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1647:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* ((CapSense_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_TOTAL_TOUCH_PADS_BASIC_C
1648:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1649:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_ADD_SLIDER_TYPE)
1650:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1651:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_ADD_SLIDER_TYPE) */
1652:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 51


1653:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
1654:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_PREV] > noiseThreshold)
1655:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1656:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] -= noiseThreshold;
1657:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1658:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
1659:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1660:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_PREV] = 0u;
1661:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1662:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1663:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Maximum always greater than fingerThreshold, so greater than noiseThreshold */
1664:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         CapSense_centroid[CapSense_POS] -= noiseThreshold;
1665:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1666:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Subtract noiseThreshold */
1667:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if(CapSense_centroid[CapSense_POS_NEXT] > noiseThreshold)
1668:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1669:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] -= noiseThreshold;
1670:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1671:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
1672:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1673:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             CapSense_centroid[CapSense_POS_NEXT] = 0u;
1674:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1675:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1676:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1677:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Si+1 - Si-1 */
1678:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         numerator = (uint32) CapSense_centroid[CapSense_POS_NEXT] -
1679:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     (uint32) CapSense_centroid[CapSense_POS_PREV];
1680:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1681:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Si+1 + Si + Si-1 */
1682:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         denominator = (int32) CapSense_centroid[CapSense_POS_PREV] + 
1683:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS] + 
1684:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                       (int32) CapSense_centroid[CapSense_POS_NEXT];
1685:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1686:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* (numerator/denominator) + maximum */
1687:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((ui
1688:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1689:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if(CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1690:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Only required for RADIAL Slider */
1691:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if(denominator < 0)
1692:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1693:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 denominator += (int32)((uint16)((uint16) count << 8u));
1694:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1695:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1696:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1697:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         denominator *= (int16)resolution;
1698:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1699:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Round result and put it to uint8 */
1700:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         position = ((uint8) HI16((uint32)denominator + CapSense_CENTROID_ROUND_VALUE));
1701:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1702:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return (position);
1703:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }    
1704:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_CENTROIDS_BASIC_COUNT) */
1705:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1706:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1707:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if((CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u))
1708:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
1709:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_GetCentroidPos
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 52


1710:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
1711:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1712:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
1713:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1714:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  a slider specified range. The centroid position is calculated according to the resolution
1715:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1716:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  result if enabled.
1717:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1718:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
1719:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  widget:  Widget number.
1720:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  For every linear slider widget there are defines in this format:
1721:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  #define CapSense_"widget_name"__LS           5
1722:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * 
1723:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
1724:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns a position value of the linear slider.
1725:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1726:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
1727:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
1728:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1729:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Side Effects:
1730:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1731:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1732:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF. If an error occurs during
1733:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1734:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  There are no checks of the widget type argument provided to this function.
1735:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1736:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1737:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Note:
1738:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1739:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1740:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1741:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1742:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
1743:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_GetCentroidPos(uint32 widget)
1744:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1745:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1746:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             const uint8 *diplex;
1747:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1748:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 
1749:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1750:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posIndex;
1751:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1752:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];  
1753:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1754:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1755:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1756:.\Generated_Source\PSoC4/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1757:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 tempPos;
1758:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1759:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1760:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                */
1761:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1762:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 maximum;
1763:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint16 position;
1764:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1765:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1766:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 53


1767:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
1768:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if(widget < CapSense_TOTAL_DIPLEXED_SLIDERS_COUNT)
1769:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1770:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 maximum = CapSense_diplexTable[widget];
1771:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 diplex = &CapSense_diplexTable[maximum];
1772:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1773:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             else
1774:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
1775:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 diplex = 0u;
1776:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
1777:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
1778:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1779:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		/* Find Maximum within centroid */      
1780:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#if (CapSense_IS_DIPLEX_SLIDER)        
1781:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			maximum = CapSense_FindMaximum(offset, count, (uint16)CapSense_fingerThreshold[widget], diplex);
1782:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#else
1783:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			maximum = CapSense_FindMaximum(offset, count, (uint16)CapSense_fingerThreshold[widget]);
1784:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#endif /* (CapSense_IS_DIPLEX_SLIDER) */
1785:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1786:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (maximum != 0xFFu)
1787:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1788:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Calculate centroid */
1789:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1790:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1791:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1792:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1793:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Check if this linear slider has enabled filters */
1794:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1795:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1796:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Calculate position to store filters data */
1797:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1798:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     
1799:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1800:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1801:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         /* Init filters */
1802:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1803:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1804:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1805:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
1806:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                      CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1807:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1808:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
1809:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1810:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1811:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1812:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1813:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
1814:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1815:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
1816:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1817:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
1818:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         
1819:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
1820:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1821:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     else
1822:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1823:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         /* Do filtering */
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 54


1824:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1825:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
1826:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1827:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1828:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
1829:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1830:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1831:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] =
1832:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
1833:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1834:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1835:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /*(0u != (CapSense_MEDIAN_FILTER &
1836:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *         CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1837:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
1838:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1839:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if(0u!=(CapSense_AVERAGING_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1840:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) 
1841:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1842:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
1843:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position,
1844:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1845:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                 (uint16)CapSense_posFiltersData[pos
1846:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]=CapSense_posFiltersData[posInd
1847:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
1848:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1849:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
1850:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1851:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
1852:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1853:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1854:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER)) 
1855:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1856:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
1857:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1858:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1859:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1860:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & \
1861:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1862:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
1863:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1864:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK
1865:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
1866:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1867:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
1868:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1869:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
1870:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }                                
1871:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & \
1872:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *          CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1873:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
1874:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1875:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_LINEAR_SLIDERS_POS_FILTERS_MA
1876:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
1877:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1878:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position,
1879:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
1880:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 55


1881:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
1882:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER & \
1883:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK))
1884:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
1885:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
1886:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1887:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1888:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1889:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1890:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
1891:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1892:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Maximum wasn't found */
1893:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             position = 0xFFFFu;
1894:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1895:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if(0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK)
1896:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Reset filters */
1897:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if(0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1898:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1899:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
1900:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
1901:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (0u != CapSense_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1902:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
1903:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1904:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1905:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return (position);
1906:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
1907:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ((CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1908:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1909:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1910:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if((CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u))
1911:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
1912:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_GetRadialCentroidPos
1913:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
1914:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1915:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
1916:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Checks the CapSense_Signal[ ] array for a centroid within
1917:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  a slider specified range. The centroid position is calculated according to the resolution
1918:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1919:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  result if enabled.
1920:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1921:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
1922:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  widget:  Widget number.
1923:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  For every radial slider widget there are defines in this format:
1924:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  #define CapSense_"widget_name"__RS           5
1925:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * 
1926:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
1927:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns a position value of the radial slider.
1928:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1929:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
1930:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
1931:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
1932:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Side Effects:
1933:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1934:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1935:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  sensors are active, the function returns 0xFFFF.
1936:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  There are no checks of the widget type argument provided to this function.
1937:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 56


1938:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1939:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Note:
1940:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1941:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1942:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so 
1943:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  that noise will not generate a false centroid.
1944:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
1945:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
1946:.\Generated_Source\PSoC4/CapSense_CSHL.c ****      uint16 CapSense_GetRadialCentroidPos(uint32 widget)
1947:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
1948:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1949:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posIndex;
1950:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
1951:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget]; 
1952:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1953:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1954:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1955:.\Generated_Source\PSoC4/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1956:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 tempPos;
1957:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1958:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1959:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                */
1960:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1961:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 maximum;
1962:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint16 position;
1963:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
1964:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
1965:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1966:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		/* Find Maximum within centroid */      
1967:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#if (CapSense_IS_DIPLEX_SLIDER)        
1968:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			maximum = CapSense_FindMaximum(offset, count, (uint16)CapSense_fingerThreshold[widget], 0u);
1969:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#else
1970:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 			maximum = CapSense_FindMaximum(offset, count, (uint16)CapSense_fingerThreshold[widget]);
1971:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 		#endif /* (CapSense_IS_DIPLEX_SLIDER) */
1972:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
1973:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (maximum != CapSense_MAXIMUM_CENTROID)
1974:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
1975:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Calculate centroid */
1976:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             position = (uint16) CapSense_CalcCentroid(maximum, 
1977:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                          offset, count, CapSense_centroidMult[widget], CapSense_noiseThreshold[widg
1978:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
1979:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
1980:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Check if this Radial slider has enabled filters */
1981:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
1982:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
1983:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Calculate position to store filters data */
1984:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1985:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     
1986:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if (0u == CapSense_posFiltersData[firstTimeIndex])
1987:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
1988:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         /* Init filters */
1989:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         CapSense_posFiltersData[posIndex] = (uint8) position;
1990:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if ((0u != (CapSense_MEDIAN_FILTER & \
1991:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1992:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                              (0u != (CapSense_AVERAGING_FILTER & \
1993:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                      CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1994:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 57


1995:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))  || 
1996:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
1997:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
1998:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = (uint8) position;
1999:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
2000:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
2001:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
2002:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *   (0u != (CapSense_AVERAGING_FILTER & \
2003:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)))
2004:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
2005:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         
2006:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         CapSense_posFiltersData[firstTimeIndex] = 1u;
2007:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
2008:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     else
2009:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
2010:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         /* Do filtering */
2011:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_MEDIAN_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
2012:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
2013:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
2014:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
2015:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_MedianFilter(position,
2016:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
2017:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                         CapSense_posFiltersData[pos
2018:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex + 1u] = 
2019:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                               CapSense_posFiltersDa
2020:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
2021:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
2022:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_MEDIAN_FILTER & 
2023:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2024:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
2025:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2026:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_AVERAGING_FILTER & \
2027:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2028:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
2029:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
2030:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 tempPos = (uint8) position;
2031:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_AveragingFilter(position, 
2032:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
2033:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posI
2034:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex+1u]= CapSense_posFiltersData[posIn
2035:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = tempPos;
2036:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
2037:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_AVERAGING_FILTER & \
2038:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2039:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
2040:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2041:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR2_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
2042:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
2043:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
2044:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_IIR2Filter(position,
2045:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
2046:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
2047:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
2048:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR2_FILTER & 
2049:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2050:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
2051:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 58


2052:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_IIR4_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK
2053:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
2054:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
2055:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_IIR4Filter(position,
2056:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
2057:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
2058:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
2059:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_IIR4_FILTER & 
2060:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *          CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2061:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
2062:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2063:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #if (0u != (CapSense_JITTER_FILTER & CapSense_RADIAL_SLIDERS_POS_FILTERS_MA
2064:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
2065:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             {
2066:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 position = CapSense_JitterFilter(position, 
2067:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                          CapSense_posFiltersData[po
2068:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 CapSense_posFiltersData[posIndex] = (uint8) position;
2069:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             }
2070:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         #endif /* (0u != (CapSense_JITTER_FILTER &
2071:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                *           CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK))
2072:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                */
2073:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
2074:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
2075:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
2076:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2077:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2078:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
2079:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2080:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Maximum was not found */
2081:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             position = 0xFFFFu;
2082:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2083:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK)
2084:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Reset filters */
2085:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
2086:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
2087:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
2088:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
2089:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (0u != CapSense_RADIAL_SLIDERS_POS_FILTERS_MASK) */
2090:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2091:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2092:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return (position);
2093:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2094:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ((CapSense_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
2095:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2096:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2097:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if(CapSense_TOTAL_TOUCH_PADS_BASIC_COUNT > 0u)
2098:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2099:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_GetTouchCentroidPos
2100:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2101:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2102:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2103:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  If a finger is present on a touchpad, this function calculates the X and Y
2104:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  position of the finger by calculating the centroids within touchpad specified
2105:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  range. The X and Y positions are calculated according to the API resolutions set in the
2106:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  CapSense customizer. Returns 1 if a finger is on the touchpad.
2107:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The position filter is applied to the result if enabled.
2108:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This function is available only if a touch pad is defined by the CapSense
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 59


2109:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  customizer.
2110:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2111:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2112:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  widget:  Widget number. 
2113:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  For every touchpad widget there are defines in this format:
2114:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  #define CapSense_"widget_name"__TP            5
2115:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2116:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  pos:     Pointer to the array of two uint16 elements, where result
2117:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  result of calculation of X and Y position are stored.
2118:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  pos[0u]  - position of X
2119:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  pos[1u]  - position of Y
2120:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2121:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2122:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns a 1 if a finger is on the touch pad, 0 - if not.
2123:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2124:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2125:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2126:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2127:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Side Effects:
2128:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *   There are no checks of the widget type argument provided to this function.
2129:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *   The unproper widget type provided will cause unexpected position
2130:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *   calculations.
2131:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2132:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2133:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 CapSense_GetTouchCentroidPos(uint32 widget, uint16* pos)
2134:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2135:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
2136:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posXIndex;
2137:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posYIndex;
2138:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 firstTimeIndex = CapSense_posFiltersData[widget];
2139:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint8 posFiltersMask = CapSense_posFiltersMask[widget];
2140:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
2141:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2142:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
2143:.\Generated_Source\PSoC4/CapSense_CSHL.c ****              (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
2144:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             uint16 tempPos;
2145:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* ((0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
2146:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                *   (0u != (CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
2147:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                */
2148:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2149:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 MaxX;
2150:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 MaxY;
2151:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 posX;
2152:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 posY;
2153:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 touch = 0u;
2154:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 offset = CapSense_rawDataIndex[widget];
2155:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 count = CapSense_numberOfSensors[widget];
2156:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2157:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* Find Maximum within X centroid */
2158:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (CapSense_IS_DIPLEX_SLIDER)
2159:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             MaxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget], 0u);
2160:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #else
2161:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             MaxX = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget]);
2162:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (CapSense_IS_DIPLEX_SLIDER) */
2163:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2164:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (MaxX != CapSense_MAXIMUM_CENTROID)
2165:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 60


2166:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             offset = CapSense_rawDataIndex[widget + 1u];
2167:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             count = CapSense_numberOfSensors[widget + 1u];
2168:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2169:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Find Maximum within Y centroid */
2170:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #if (CapSense_IS_DIPLEX_SLIDER)
2171:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 MaxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u], 0
2172:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #else
2173:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 MaxY = CapSense_FindMaximum(offset, count, CapSense_fingerThreshold[widget + 1u]);
2174:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             #endif /* (CapSense_IS_DIPLEX_SLIDER) */
2175:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2176:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if (MaxY != CapSense_MAXIMUM_CENTROID)
2177:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
2178:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* X and Y maximums are found = true touch */
2179:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 touch = 1u;
2180:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 
2181:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Calculate Y centroid */
2182:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 posY = CapSense_CalcCentroid(MaxY, offset, count, 
2183:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             CapSense_centroidMult[widget + 1u], CapSense_noiseThreshold[widget + 1u
2184:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 
2185:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Calculate X centroid */
2186:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 offset = CapSense_rawDataIndex[widget];
2187:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 count = CapSense_numberOfSensors[widget];
2188:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 
2189:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 posX = CapSense_CalcCentroid(MaxX, offset, count, 
2190:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             CapSense_centroidMult[widget],CapSense_noiseThreshold[widget]);
2191:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
2192:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
2193:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     /* Check if this TP has enabled filters */
2194:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     if (0u != (posFiltersMask & CapSense_ANY_POS_FILTER))
2195:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     {
2196:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         /* Calculate position to store filters data */
2197:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posXIndex  = firstTimeIndex + 1u;
2198:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         posYIndex  = CapSense_posFiltersData[widget + 1u];
2199:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         
2200:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         if (0u == CapSense_posFiltersData[firstTimeIndex])
2201:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         {
2202:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             /* Init filters */
2203:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             CapSense_posFiltersData[posXIndex] = posX;
2204:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             CapSense_posFiltersData[posYIndex] = posY;
2205:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2206:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #if((0u != (CapSense_MEDIAN_FILTER & \
2207:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK))|| \
2208:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 (0u != (CapSense_AVERAGING_FILTER & \
2209:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
2210:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2211:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 if ( (0u != (posFiltersMask & CapSense_MEDIAN_FILTER)) || 
2212:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                      (0u != (posFiltersMask & CapSense_AVERAGING_FILTER)) )
2213:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 {
2214:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = posX;
2215:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = posY;
2216:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 }
2217:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #endif /* ((0u != (CapSense_MEDIAN_FILTER & \
2218:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK)) || \
2219:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *    (0u != (CapSense_AVERAGING_FILTER & \
2220:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *            CapSense_TOUCH_PADS_POS_FILTERS_MASK)))
2221:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    */
2222:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 61


2223:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             CapSense_posFiltersData[firstTimeIndex] = 1u;
2224:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         }
2225:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         else
2226:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         {
2227:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             /* Do filtering */
2228:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #if (0u != (CapSense_MEDIAN_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
2229:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_MEDIAN_FILTER))
2230:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 {
2231:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     tempPos = posX;
2232:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_MedianFilter(posX,
2233:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
2234:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posXI
2235:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
2236:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
2237:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
2238:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     
2239:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     tempPos = posY;
2240:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_MedianFilter(posY,
2241:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
2242:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posY
2243:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
2244:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
2245:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
2246:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 }
2247:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 
2248:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_MEDIAN_FILTER & \
2249:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
2250:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    */
2251:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2252:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #if(0u !=(CapSense_AVERAGING_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_M
2253:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_AVERAGING_FILTER))
2254:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 {
2255:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     tempPos = posX;
2256:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_AveragingFilter(posX,
2257:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
2258:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                        CapSense_posFiltersData[posX
2259:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex + 1u] = 
2260:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                              CapSense_posFiltersDat
2261:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = tempPos;
2262:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     
2263:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     tempPos = posY;
2264:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_AveragingFilter(posY, 
2265:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
2266:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                       CapSense_posFiltersData[posYI
2267:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex + 1u] = 
2268:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
2269:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = tempPos;
2270:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 }
2271:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2272:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_AVERAGING_FILTER & \
2273:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
2274:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    */
2275:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2276:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR2_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
2277:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR2_FILTER))
2278:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 {
2279:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR2Filter(posX, 
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 62


2280:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                            CapSense_posFiltersData[
2281:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
2282:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     
2283:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR2Filter(posY, 
2284:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
2285:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
2286:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 }
2287:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 
2288:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR2_FILTER & \
2289:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *          CapSense_TOUCH_PADS_POS_FILTERS_MASK))
2290:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    */
2291:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2292:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #if (0u != (CapSense_IIR4_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MASK
2293:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_IIR4_FILTER))
2294:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 {
2295:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posX = (uint8) CapSense_IIR4Filter((uint16)posX,
2296:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
2297:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posXIndex] = posX;
2298:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2299:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     posY = (uint8) CapSense_IIR4Filter((uint16)posY,
2300:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                     (uint16)CapSense_posFiltersData
2301:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     CapSense_posFiltersData[posYIndex] = posY;
2302:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 }
2303:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 
2304:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_IIR4_FILTER & \
2305:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
2306:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    */
2307:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2308:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #if (0u != (CapSense_JITTER_FILTER & CapSense_TOUCH_PADS_POS_FILTERS_MA
2309:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_JITTER_FILTER))
2310:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     {
2311:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         posX = (uint8) CapSense_JitterFilter(posX, 
2312:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
2313:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posXIndex] = posX;
2314:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         
2315:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         posY = (uint8) CapSense_JitterFilter(posY, 
2316:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                                                             CapSense_posFiltersData
2317:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                         CapSense_posFiltersData[posYIndex] = posY;
2318:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                     }
2319:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                             #endif /* (0u != (CapSense_JITTER_FILTER & \
2320:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    *           CapSense_TOUCH_PADS_POS_FILTERS_MASK))
2321:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                                    */
2322:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                         }
2323:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     }
2324:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
2325:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2326:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Save positions */
2327:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 pos[0u] = posX;
2328:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 pos[1u] = posY;
2329:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
2330:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2331:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2332:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #if (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK)
2333:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if(touch == 0u)
2334:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
2335:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 /* Reset filters */
2336:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if ((posFiltersMask & CapSense_ANY_POS_FILTER) != 0u)
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 63


2337:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
2338:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     CapSense_posFiltersData[firstTimeIndex] = 0u;
2339:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
2340:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
2341:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         #endif /* (0u != CapSense_TOUCH_PADS_POS_FILTERS_MASK) */
2342:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2343:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return (touch);
2344:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2345:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_TOTAL_TOUCH_PADS_BASIC_COUNT > 0u) */
2346:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2347:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2348:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)) || \
2349:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER)) || \
2350:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       ((CapSense_TUNING_METHOD == CapSense__TUNING_AUTO)) )
2351:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2352:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_MedianFilter
2353:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2354:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2355:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2356:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the Median filter function. 
2357:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The median filter looks at the three most recent samples and reports the 
2358:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  median value.
2359:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2360:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2361:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2362:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2363:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x3:  Before previous value.
2364:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2365:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2366:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns filtered value.
2367:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2368:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2369:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2370:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2371:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2372:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2373:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2374:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2375:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
2376:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2377:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint16 tmp;
2378:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2379:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (x1 > x2)
2380:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2381:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             tmp = x2;
2382:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             x2 = x1;
2383:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             x1 = tmp;
2384:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2385:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2386:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (x2 > x3)
2387:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2388:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             x2 = x3;
2389:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2390:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2391:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return ((x1 > x2) ? x1 : x2);
2392:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2393:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_MEDIAN_FILTER)) || \
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 64


2394:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_MEDIAN_FILTER)) || \
2395:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       ((CapSense_TUNING_METHOD == CapSense__TUNING_AUTO)) ) */
2396:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2397:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2398:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER)) || \
2399:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER)) )
2400:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2401:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_AveragingFilter
2402:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2403:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2404:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2405:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the Averaging filter function.
2406:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  The averaging filter looks at the three most recent samples of a position and
2407:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  reports the averaging value.
2408:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2409:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2410:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2411:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2412:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x3:  Before previous value.
2413:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2414:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2415:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns filtered value.
2416:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2417:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2418:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2419:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2420:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2421:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2422:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2423:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2424:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
2425:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2426:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
2427:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2428:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return ((uint16) tmp);
2429:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2430:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_AVERAGING_FILTER) || \
2431:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_AVERAGING_FILTER) ) */
2432:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2433:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2434:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)) || \
2435:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER)) )
2436:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2437:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_IIR2Filter
2438:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2439:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2440:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2441:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
2442:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2443:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2444:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2445:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2446:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2447:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2448:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns filtered value.
2449:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2450:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 65


2451:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2452:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2453:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2454:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2455:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2456:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2457:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_IIR2Filter(uint16 x1, uint16 x2)
2458:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2459:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 tmp;
2460:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2461:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* IIR = 1/2 Current Value+ 1/2 Previous Value */
2462:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
2463:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp >>= 1u;
2464:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
2465:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return ((uint16) tmp);
2466:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2467:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR2_FILTER)) || \
2468:.\Generated_Source\PSoC4/CapSense_CSHL.c ****        *    (0u != (CapSense_POS_FILTERS_MASK & CapSense_IIR2_FILTER)) )
2469:.\Generated_Source\PSoC4/CapSense_CSHL.c ****        */
2470:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2471:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2472:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)) || \
2473:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER)) )
2474:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2475:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_IIR4Filter
2476:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2477:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2478:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2479:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
2480:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2481:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2482:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2483:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2484:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2485:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2486:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns a filtered value.
2487:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2488:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2489:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2490:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2491:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2492:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2493:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2494:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2495:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_IIR4Filter(uint16 x1, uint16 x2)
2496:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2497:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 tmp;
2498:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2499:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* IIR = 1/4 Current Value + 3/4 Previous Value */
2500:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
2501:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp += ((uint32)x2 << 1u);
2502:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp >>= 2u;
2503:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2504:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return ((uint16) tmp);
2505:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2506:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR4_FILTER)) || \
2507:.\Generated_Source\PSoC4/CapSense_CSHL.c ****        *    (0u != (CapSense_POS_FILTERS_MASK & CapSense_IIR4_FILTER)) )
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 66


2508:.\Generated_Source\PSoC4/CapSense_CSHL.c ****        */
2509:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2510:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2511:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)) || \
2512:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_POS_FILTERS_MASK & CapSense_JITTER_FILTER)) || \
2513:.\Generated_Source\PSoC4/CapSense_CSHL.c ****       (0u != (CapSense_TRACKPAD_GEST_POS_FILTERS_MASK & CapSense_JITTER_FILTER)))  
2514:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2515:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: uint16 CapSense_JitterFilter
2516:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2517:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2518:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2519:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the Jitter filter function.
2520:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2521:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2522:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2523:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2524:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2525:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2526:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns filtered value.
2527:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2528:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2529:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2530:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2531:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2532:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2533:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2534:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2535:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_JitterFilter(uint16 x1, uint16 x2)
2536:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2537:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (x1 > x2)
2538:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2539:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             x1--;
2540:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2541:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         else
2542:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2543:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if (x1 < x2)
2544:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
2545:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 x1++;
2546:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
2547:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2548:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
2549:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return x1;
2550:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2551:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* ( (0u != (CapSense_RAW_FILTER_MASK & CapSense_JITTER_FILTER)) || \
2552:.\Generated_Source\PSoC4/CapSense_CSHL.c ****        *    (0u != (CapSense_POS_FILTERS_MASK & CapSense_JITTER_FILTER)) )
2553:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	   *    (0u != (CapSense_TRACKPAD_GEST_POS_FILTERS_MASK & CapSense_JITTER_FILTER)) )
2554:.\Generated_Source\PSoC4/CapSense_CSHL.c ****        */
2555:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2556:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2557:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER))
2558:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2559:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_IIR8Filter
2560:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2561:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2562:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2563:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the IIR1/8 filter function. IIR1/8 = 1/8current + 7/8previous.
2564:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Only applies for raw data.
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 67


2565:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2566:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2567:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2568:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2569:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2570:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2571:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns filtered value.
2572:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2573:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2574:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2575:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2576:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2577:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2578:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2579:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2580:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_IIR8Filter(uint16 x1, uint16 x2)
2581:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2582:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 tmp;
2583:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2584:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* IIR = 1/8 Current Value + 7/8 Previous Value */
2585:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp = (uint32)x1;
2586:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp += (((uint32)x2 << 3u) - ((uint32)x2));
2587:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp >>= 3u;
2588:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     
2589:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return ((uint16) tmp);
2590:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2591:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR8_FILTER)) */
2592:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2593:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2594:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (0u != (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER))
2595:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2596:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_IIR16Filter
2597:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2598:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2599:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2600:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  This is the IIR1/16 filter function. IIR1/16 = 1/16current + 15/16previous.
2601:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Only applies for raw data.
2602:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2603:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2604:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x1:  Current value.
2605:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  x2:  Previous value.
2606:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2607:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2608:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns filtered value.
2609:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2610:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2611:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None.
2612:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2613:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2614:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2615:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2616:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2617:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint16 CapSense_IIR16Filter(uint16 x1, uint16 x2)
2618:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2619:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 tmp;
2620:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2621:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         /* IIR = 1/16 Current Value + 15/16 Previous Value */
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 68


2622:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp = (uint32)x1;
2623:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp += (((uint32)x2 << 4u) - ((uint32)x2));
2624:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         tmp >>= 4u;
2625:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         
2626:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return ((uint16) tmp);
2627:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2628:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (CapSense_RAW_FILTER_MASK & CapSense_IIR16_FILTER) */
2629:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2630:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2631:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #if (0u != (CapSense_TOTAL_MATRIX_BUTTONS_COUNT))
2632:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2633:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     /*******************************************************************************
2634:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Function Name: CapSense_GetMatrixButtonPos
2635:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     ********************************************************************************
2636:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2637:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Summary:
2638:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Function calculates and returns a touch position (column and row) for the matrix
2639:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  button widget.
2640:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2641:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Parameters:
2642:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  widget:  widget number;
2643:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  pos:     pointer to an array of two uint8, where touch position will be 
2644:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *           stored:
2645:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *           pos[0] - column position;
2646:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *           pos[1] - raw position.
2647:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *
2648:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     * Return:
2649:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  Returns 1 if row and column sensors of matrix button are active, 0 - in other
2650:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *  cases.
2651:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2652:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Global Variables:
2653:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_fingerThreshold[ ] - used to store the finger threshold for all widgets.
2654:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  CapSense_sensorSignal[ ] - used to store a difference between the current value of 
2655:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  raw data and a previous value of the baseline.
2656:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*
2657:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* Side Effects:
2658:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	*  None
2659:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	* 
2660:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     *******************************************************************************/
2661:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     uint32 CapSense_GetMatrixButtonPos(uint32 widget, uint8* pos)
2662:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     {
2663:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 i;
2664:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint32 retVal = 0u;
2665:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint16 row_sig_max = 0u;
2666:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint16 col_sig_max = 0u;
2667:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 row_ind = 0u;
2668:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         uint8 col_ind = 0u;
2669:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2670:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         if (CapSense_CheckIsWidgetActive(widget) == 1u)
2671:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         {
2672:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Find row number with maximal signal value */
2673:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             for(i = CapSense_rawDataIndex[widget]; i < (CapSense_rawDataIndex[widget] + \
2674:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                  CapSense_numberOfSensors[widget]); i++)
2675:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
2676:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (CapSense_sensorSignal[i] > col_sig_max)
2677:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
2678:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     col_ind = i;
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 69


2679:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     col_sig_max = CapSense_sensorSignal[i];
2680:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
2681:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
2682:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2683:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             /* Find row number with maximal signal value */
2684:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             for(i = CapSense_rawDataIndex[widget+1u]; i < (CapSense_rawDataIndex[widget+1u] + \
2685:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                  CapSense_numberOfSensors[widget+1u]); i++)
2686:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
2687:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 if (CapSense_sensorSignal[i] > row_sig_max)
2688:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 {
2689:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     row_ind = i;
2690:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                     row_sig_max = CapSense_sensorSignal[i];
2691:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 }
2692:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
2693:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2694:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             if((col_sig_max >= CapSense_fingerThreshold[widget]) && \
2695:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                (row_sig_max >= CapSense_fingerThreshold[widget+1u]))
2696:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             {
2697:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 pos[0u] = col_ind - CapSense_rawDataIndex[widget];
2698:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 pos[1u] = row_ind - CapSense_rawDataIndex[widget+1u];
2699:.\Generated_Source\PSoC4/CapSense_CSHL.c ****                 retVal = 1u;
2700:.\Generated_Source\PSoC4/CapSense_CSHL.c ****             }
2701:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         }
2702:.\Generated_Source\PSoC4/CapSense_CSHL.c ****         return (retVal);
2703:.\Generated_Source\PSoC4/CapSense_CSHL.c ****     }
2704:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2705:.\Generated_Source\PSoC4/CapSense_CSHL.c **** #endif /* (0u != (CapSense_TOTAL_MATRIX_BUTTONS_COUNT)) */
2706:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2707:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
2708:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetWidgetNumber
2709:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
2710:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2711:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
2712:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the widget number for the sensor.
2713:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2714:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
2715:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor: sensor index. The value of index can be 
2716:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  from 0 to (CapSense_TOTAL_SENSOR_COUNT-1).
2717:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2718:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
2719:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the widget number for the sensor. 
2720:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2721:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
2722:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_widgetNumber[]  - stores widget numbers.
2723:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
2724:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
2725:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
2726:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2727:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
2728:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint32 CapSense_GetWidgetNumber(uint32 sensor)
2729:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1188              		.loc 1 2729 0
 1189              		.cfi_startproc
 1190              	.LVL124:
2730:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return((uint32)CapSense_widgetNumber[sensor]);
 1191              		.loc 1 2730 0
 1192 0000 014B     		ldr	r3, .L104
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 70


 1193 0002 185C     		ldrb	r0, [r3, r0]
 1194              	.LVL125:
2731:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1195              		.loc 1 2731 0
 1196              		@ sp needed
 1197 0004 7047     		bx	lr
 1198              	.L105:
 1199 0006 C046     		.align	2
 1200              	.L104:
 1201 0008 00000000 		.word	CapSense_widgetNumber
 1202              		.cfi_endproc
 1203              	.LFE61:
 1204              		.size	CapSense_GetWidgetNumber, .-CapSense_GetWidgetNumber
 1205              		.section	.text.CapSense_GetLowBaselineReset,"ax",%progbits
 1206              		.align	2
 1207              		.global	CapSense_GetLowBaselineReset
 1208              		.code	16
 1209              		.thumb_func
 1210              		.type	CapSense_GetLowBaselineReset, %function
 1211              	CapSense_GetLowBaselineReset:
 1212              	.LFB62:
2732:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2733:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
2734:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetLowBaselineReset
2735:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
2736:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2737:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
2738:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns the low baseline reset threshold value for the  sensor.
2739:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2740:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
2741:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor: sensor index. The value of index can be 
2742:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  from 0 to (CapSense_TOTAL_SENSOR_COUNT-1).
2743:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2744:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
2745:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  low baseline reset threshold value a sensor.
2746:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2747:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
2748:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_lowBaselineReset[]  - stores low baseline reset values.
2749:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
2750:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
2751:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
2752:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2753:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
2754:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_GetLowBaselineReset(uint32 sensor)
2755:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1213              		.loc 1 2755 0
 1214              		.cfi_startproc
 1215              	.LVL126:
2756:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return(CapSense_lowBaselineReset[sensor]);
 1216              		.loc 1 2756 0
 1217 0000 014B     		ldr	r3, .L107
 1218 0002 1818     		add	r0, r3, r0
 1219              	.LVL127:
 1220 0004 007B     		ldrb	r0, [r0, #12]
2757:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1221              		.loc 1 2757 0
 1222              		@ sp needed
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 71


 1223 0006 7047     		bx	lr
 1224              	.L108:
 1225              		.align	2
 1226              	.L107:
 1227 0008 00000000 		.word	.LANCHOR1
 1228              		.cfi_endproc
 1229              	.LFE62:
 1230              		.size	CapSense_GetLowBaselineReset, .-CapSense_GetLowBaselineReset
 1231              		.section	.text.CapSense_GetDebounce,"ax",%progbits
 1232              		.align	2
 1233              		.global	CapSense_GetDebounce
 1234              		.code	16
 1235              		.thumb_func
 1236              		.type	CapSense_GetDebounce, %function
 1237              	CapSense_GetDebounce:
 1238              	.LFB63:
2758:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 
2759:.\Generated_Source\PSoC4/CapSense_CSHL.c **** /*******************************************************************************
2760:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Function Name: CapSense_GetDebounce
2761:.\Generated_Source\PSoC4/CapSense_CSHL.c **** ********************************************************************************
2762:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2763:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Summary:
2764:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  This API returns a debounce value.
2765:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2766:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Parameters:
2767:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  sensor: sensor index. The value of index can be 
2768:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  from 0 to (CapSense_TOTAL_SENSOR_COUNT-1).
2769:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2770:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Return:
2771:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  Debounce value 
2772:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2773:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Global Variables:
2774:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  CapSense_debounce[]  - stores the debounce value.
2775:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * 
2776:.\Generated_Source\PSoC4/CapSense_CSHL.c **** * Side Effects:
2777:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *  None
2778:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *
2779:.\Generated_Source\PSoC4/CapSense_CSHL.c **** *******************************************************************************/
2780:.\Generated_Source\PSoC4/CapSense_CSHL.c **** uint8 CapSense_GetDebounce(uint32 widget)
2781:.\Generated_Source\PSoC4/CapSense_CSHL.c **** {
 1239              		.loc 1 2781 0
 1240              		.cfi_startproc
 1241              	.LVL128:
2782:.\Generated_Source\PSoC4/CapSense_CSHL.c **** 	return(CapSense_debounce[widget]);
 1242              		.loc 1 2782 0
 1243 0000 014B     		ldr	r3, .L110
 1244 0002 185C     		ldrb	r0, [r3, r0]
 1245              	.LVL129:
2783:.\Generated_Source\PSoC4/CapSense_CSHL.c **** }
 1246              		.loc 1 2783 0
 1247              		@ sp needed
 1248 0004 7047     		bx	lr
 1249              	.L111:
 1250 0006 C046     		.align	2
 1251              	.L110:
 1252 0008 00000000 		.word	.LANCHOR1
 1253              		.cfi_endproc
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 72


 1254              	.LFE63:
 1255              		.size	CapSense_GetDebounce, .-CapSense_GetDebounce
 1256              		.global	CapSense_numberOfSensors
 1257              		.global	CapSense_rawDataIndex
 1258              		.global	CapSense_debounce
 1259              		.global	CapSense_hysteresis
 1260              		.global	CapSense_negativeNoiseThreshold
 1261              		.global	CapSense_noiseThreshold
 1262              		.global	CapSense_fingerThreshold
 1263              		.global	CapSense_lowBaselineReset
 1264              		.comm	CapSense_lowBaselineResetCnt,1,4
 1265              		.global	CapSense_sensorOnMask
 1266              		.global	CapSense_sensorSignal
 1267              		.global	CapSense_sensorBaselineLow
 1268              		.global	CapSense_sensorBaseline
 1269              		.section	.rodata
 1270              		.align	2
 1271              		.type	CapSense_numberOfSensors, %object
 1272              		.size	CapSense_numberOfSensors, 1
 1273              	CapSense_numberOfSensors:
 1274 0000 01       		.byte	1
 1275 0001 000000   		.space	3
 1276              		.type	CapSense_rawDataIndex, %object
 1277              		.size	CapSense_rawDataIndex, 1
 1278              	CapSense_rawDataIndex:
 1279 0004 00       		.space	1
 1280 0005 000000   		.data
 1281              		.align	2
 1282              		.set	.LANCHOR1,. + 0
 1283              		.type	CapSense_debounce, %object
 1284              		.size	CapSense_debounce, 1
 1285              	CapSense_debounce:
 1286 0000 02       		.byte	2
 1287 0001 000000   		.space	3
 1288              		.type	CapSense_noiseThreshold, %object
 1289              		.size	CapSense_noiseThreshold, 2
 1290              	CapSense_noiseThreshold:
 1291 0004 6400     		.short	100
 1292 0006 0000     		.space	2
 1293              		.type	CapSense_negativeNoiseThreshold, %object
 1294              		.size	CapSense_negativeNoiseThreshold, 2
 1295              	CapSense_negativeNoiseThreshold:
 1296 0008 1400     		.short	20
 1297 000a 0000     		.space	2
 1298              		.type	CapSense_lowBaselineReset, %object
 1299              		.size	CapSense_lowBaselineReset, 1
 1300              	CapSense_lowBaselineReset:
 1301 000c 05       		.byte	5
 1302 000d 000000   		.space	3
 1303              		.type	CapSense_fingerThreshold, %object
 1304              		.size	CapSense_fingerThreshold, 2
 1305              	CapSense_fingerThreshold:
 1306 0010 C800     		.short	200
 1307 0012 0000     		.space	2
 1308              		.type	CapSense_hysteresis, %object
 1309              		.size	CapSense_hysteresis, 2
 1310              	CapSense_hysteresis:
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 73


 1311 0014 1900     		.short	25
 1312 0016 0000     		.bss
 1313              		.align	2
 1314              		.set	.LANCHOR0,. + 0
 1315              		.type	CapSense_sensorBaseline, %object
 1316              		.size	CapSense_sensorBaseline, 2
 1317              	CapSense_sensorBaseline:
 1318 0000 0000     		.space	2
 1319 0002 0000     		.space	2
 1320              		.type	CapSense_sensorBaselineLow, %object
 1321              		.size	CapSense_sensorBaselineLow, 1
 1322              	CapSense_sensorBaselineLow:
 1323 0004 00       		.space	1
 1324 0005 000000   		.space	3
 1325              		.type	CapSense_sensorSignal, %object
 1326              		.size	CapSense_sensorSignal, 2
 1327              	CapSense_sensorSignal:
 1328 0008 0000     		.space	2
 1329 000a 0000     		.space	2
 1330              		.type	CapSense_debounceCounter, %object
 1331              		.size	CapSense_debounceCounter, 2
 1332              	CapSense_debounceCounter:
 1333 000c 0000     		.space	2
 1334 000e 0000     		.space	2
 1335              		.type	CapSense_sensorOnMask, %object
 1336              		.size	CapSense_sensorOnMask, 1
 1337              	CapSense_sensorOnMask:
 1338 0010 00       		.space	1
 1339 0011 000000   		.text
 1340              	.Letext0:
 1341              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1342              		.file 3 ".\\Generated_Source\\PSoC4\\CapSense.h"
 1343              		.file 4 ".\\Generated_Source\\PSoC4\\CapSense_PVT.h"
 1344              		.section	.debug_info,"",%progbits
 1345              	.Ldebug_info0:
 1346 0000 A40A0000 		.4byte	0xaa4
 1347 0004 0400     		.2byte	0x4
 1348 0006 00000000 		.4byte	.Ldebug_abbrev0
 1349 000a 04       		.byte	0x4
 1350 000b 01       		.uleb128 0x1
 1351 000c 8F040000 		.4byte	.LASF83
 1352 0010 01       		.byte	0x1
 1353 0011 94030000 		.4byte	.LASF84
 1354 0015 B1060000 		.4byte	.LASF85
 1355 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1356 001d 00000000 		.4byte	0
 1357 0021 00000000 		.4byte	.Ldebug_line0
 1358 0025 02       		.uleb128 0x2
 1359 0026 01       		.byte	0x1
 1360 0027 06       		.byte	0x6
 1361 0028 7A010000 		.4byte	.LASF0
 1362 002c 02       		.uleb128 0x2
 1363 002d 01       		.byte	0x1
 1364 002e 08       		.byte	0x8
 1365 002f 8B050000 		.4byte	.LASF1
 1366 0033 02       		.uleb128 0x2
 1367 0034 02       		.byte	0x2
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 74


 1368 0035 05       		.byte	0x5
 1369 0036 E1050000 		.4byte	.LASF2
 1370 003a 02       		.uleb128 0x2
 1371 003b 02       		.byte	0x2
 1372 003c 07       		.byte	0x7
 1373 003d 24030000 		.4byte	.LASF3
 1374 0041 02       		.uleb128 0x2
 1375 0042 04       		.byte	0x4
 1376 0043 05       		.byte	0x5
 1377 0044 C5010000 		.4byte	.LASF4
 1378 0048 02       		.uleb128 0x2
 1379 0049 04       		.byte	0x4
 1380 004a 07       		.byte	0x7
 1381 004b BD020000 		.4byte	.LASF5
 1382 004f 02       		.uleb128 0x2
 1383 0050 08       		.byte	0x8
 1384 0051 05       		.byte	0x5
 1385 0052 6C010000 		.4byte	.LASF6
 1386 0056 02       		.uleb128 0x2
 1387 0057 08       		.byte	0x8
 1388 0058 07       		.byte	0x7
 1389 0059 E0000000 		.4byte	.LASF7
 1390 005d 03       		.uleb128 0x3
 1391 005e 04       		.byte	0x4
 1392 005f 05       		.byte	0x5
 1393 0060 696E7400 		.ascii	"int\000"
 1394 0064 02       		.uleb128 0x2
 1395 0065 04       		.byte	0x4
 1396 0066 07       		.byte	0x7
 1397 0067 B0020000 		.4byte	.LASF8
 1398 006b 04       		.uleb128 0x4
 1399 006c EE010000 		.4byte	.LASF9
 1400 0070 02       		.byte	0x2
 1401 0071 B3       		.byte	0xb3
 1402 0072 2C000000 		.4byte	0x2c
 1403 0076 04       		.uleb128 0x4
 1404 0077 00000000 		.4byte	.LASF10
 1405 007b 02       		.byte	0x2
 1406 007c B4       		.byte	0xb4
 1407 007d 3A000000 		.4byte	0x3a
 1408 0081 04       		.uleb128 0x4
 1409 0082 2B020000 		.4byte	.LASF11
 1410 0086 02       		.byte	0x2
 1411 0087 B5       		.byte	0xb5
 1412 0088 48000000 		.4byte	0x48
 1413 008c 02       		.uleb128 0x2
 1414 008d 04       		.byte	0x4
 1415 008e 04       		.byte	0x4
 1416 008f 4B050000 		.4byte	.LASF12
 1417 0093 02       		.uleb128 0x2
 1418 0094 08       		.byte	0x8
 1419 0095 04       		.byte	0x4
 1420 0096 0E020000 		.4byte	.LASF13
 1421 009a 02       		.uleb128 0x2
 1422 009b 01       		.byte	0x1
 1423 009c 08       		.byte	0x8
 1424 009d 75060000 		.4byte	.LASF14
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 75


 1425 00a1 02       		.uleb128 0x2
 1426 00a2 04       		.byte	0x4
 1427 00a3 07       		.byte	0x7
 1428 00a4 E0030000 		.4byte	.LASF15
 1429 00a8 05       		.uleb128 0x5
 1430 00a9 04       		.byte	0x4
 1431 00aa 6B000000 		.4byte	0x6b
 1432 00ae 05       		.uleb128 0x5
 1433 00af 04       		.byte	0x4
 1434 00b0 B4000000 		.4byte	0xb4
 1435 00b4 06       		.uleb128 0x6
 1436 00b5 6B000000 		.4byte	0x6b
 1437 00b9 07       		.uleb128 0x7
 1438 00ba 02060000 		.4byte	.LASF16
 1439 00be 01       		.byte	0x1
 1440 00bf 8E       		.byte	0x8e
 1441 00c0 00000000 		.4byte	.LFB34
 1442 00c4 34000000 		.4byte	.LFE34-.LFB34
 1443 00c8 01       		.uleb128 0x1
 1444 00c9 9C       		.byte	0x9c
 1445 00ca ED000000 		.4byte	0xed
 1446 00ce 08       		.uleb128 0x8
 1447 00cf 37030000 		.4byte	.LASF18
 1448 00d3 01       		.byte	0x1
 1449 00d4 8E       		.byte	0x8e
 1450 00d5 81000000 		.4byte	0x81
 1451 00d9 00000000 		.4byte	.LLST0
 1452 00dd 09       		.uleb128 0x9
 1453 00de EB050000 		.4byte	.LASF20
 1454 00e2 01       		.byte	0x1
 1455 00e3 92       		.byte	0x92
 1456 00e4 6B000000 		.4byte	0x6b
 1457 00e8 21000000 		.4byte	.LLST1
 1458 00ec 00       		.byte	0
 1459 00ed 07       		.uleb128 0x7
 1460 00ee FF030000 		.4byte	.LASF17
 1461 00f2 01       		.byte	0x1
 1462 00f3 DA       		.byte	0xda
 1463 00f4 00000000 		.4byte	.LFB35
 1464 00f8 18000000 		.4byte	.LFE35-.LFB35
 1465 00fc 01       		.uleb128 0x1
 1466 00fd 9C       		.byte	0x9c
 1467 00fe 3F010000 		.4byte	0x13f
 1468 0102 08       		.uleb128 0x8
 1469 0103 37030000 		.4byte	.LASF18
 1470 0107 01       		.byte	0x1
 1471 0108 DA       		.byte	0xda
 1472 0109 81000000 		.4byte	0x81
 1473 010d 34000000 		.4byte	.LLST2
 1474 0111 0A       		.uleb128 0xa
 1475 0112 08000000 		.4byte	.LVL5
 1476 0116 530A0000 		.4byte	0xa53
 1477 011a 25010000 		.4byte	0x125
 1478 011e 0B       		.uleb128 0xb
 1479 011f 01       		.uleb128 0x1
 1480 0120 50       		.byte	0x50
 1481 0121 02       		.uleb128 0x2
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 76


 1482 0122 74       		.byte	0x74
 1483 0123 00       		.sleb128 0
 1484 0124 00       		.byte	0
 1485 0125 0C       		.uleb128 0xc
 1486 0126 0C000000 		.4byte	.LVL6
 1487 012a 640A0000 		.4byte	0xa64
 1488 012e 0D       		.uleb128 0xd
 1489 012f 16000000 		.4byte	.LVL7
 1490 0133 B9000000 		.4byte	0xb9
 1491 0137 0B       		.uleb128 0xb
 1492 0138 01       		.uleb128 0x1
 1493 0139 50       		.byte	0x50
 1494 013a 02       		.uleb128 0x2
 1495 013b 74       		.byte	0x74
 1496 013c 00       		.sleb128 0
 1497 013d 00       		.byte	0
 1498 013e 00       		.byte	0
 1499 013f 07       		.uleb128 0x7
 1500 0140 99050000 		.4byte	.LASF19
 1501 0144 01       		.byte	0x1
 1502 0145 FF       		.byte	0xff
 1503 0146 00000000 		.4byte	.LFB36
 1504 014a 14000000 		.4byte	.LFE36-.LFB36
 1505 014e 01       		.uleb128 0x1
 1506 014f 9C       		.byte	0x9c
 1507 0150 73010000 		.4byte	0x173
 1508 0154 0E       		.uleb128 0xe
 1509 0155 6900     		.ascii	"i\000"
 1510 0157 01       		.byte	0x1
 1511 0158 0101     		.2byte	0x101
 1512 015a 81000000 		.4byte	0x81
 1513 015e 60000000 		.4byte	.LLST3
 1514 0162 0D       		.uleb128 0xd
 1515 0163 0C000000 		.4byte	.LVL11
 1516 0167 ED000000 		.4byte	0xed
 1517 016b 0B       		.uleb128 0xb
 1518 016c 01       		.uleb128 0x1
 1519 016d 50       		.byte	0x50
 1520 016e 02       		.uleb128 0x2
 1521 016f 74       		.byte	0x74
 1522 0170 00       		.sleb128 0
 1523 0171 00       		.byte	0
 1524 0172 00       		.byte	0
 1525 0173 0F       		.uleb128 0xf
 1526 0174 28010000 		.4byte	.LASF21
 1527 0178 01       		.byte	0x1
 1528 0179 2201     		.2byte	0x122
 1529 017b 00000000 		.4byte	.LFB37
 1530 017f 30000000 		.4byte	.LFE37-.LFB37
 1531 0183 01       		.uleb128 0x1
 1532 0184 9C       		.byte	0x9c
 1533 0185 DE010000 		.4byte	0x1de
 1534 0189 0E       		.uleb128 0xe
 1535 018a 6900     		.ascii	"i\000"
 1536 018c 01       		.byte	0x1
 1537 018d 2401     		.2byte	0x124
 1538 018f 81000000 		.4byte	0x81
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 77


 1539 0193 7F000000 		.4byte	.LLST4
 1540 0197 10       		.uleb128 0x10
 1541 0198 F2050000 		.4byte	.LASF22
 1542 019c 01       		.byte	0x1
 1543 019d 2501     		.2byte	0x125
 1544 019f 81000000 		.4byte	0x81
 1545 01a3 92000000 		.4byte	.LLST5
 1546 01a7 0C       		.uleb128 0xc
 1547 01a8 06000000 		.4byte	.LVL14
 1548 01ac 6F0A0000 		.4byte	0xa6f
 1549 01b0 0C       		.uleb128 0xc
 1550 01b1 0A000000 		.4byte	.LVL15
 1551 01b5 640A0000 		.4byte	0xa64
 1552 01b9 0A       		.uleb128 0xa
 1553 01ba 1A000000 		.4byte	.LVL17
 1554 01be 760A0000 		.4byte	0xa76
 1555 01c2 CD010000 		.4byte	0x1cd
 1556 01c6 0B       		.uleb128 0xb
 1557 01c7 01       		.uleb128 0x1
 1558 01c8 51       		.byte	0x51
 1559 01c9 02       		.uleb128 0x2
 1560 01ca 74       		.byte	0x74
 1561 01cb 00       		.sleb128 0
 1562 01cc 00       		.byte	0
 1563 01cd 0D       		.uleb128 0xd
 1564 01ce 24000000 		.4byte	.LVL19
 1565 01d2 B9000000 		.4byte	0xb9
 1566 01d6 0B       		.uleb128 0xb
 1567 01d7 01       		.uleb128 0x1
 1568 01d8 50       		.byte	0x50
 1569 01d9 02       		.uleb128 0x2
 1570 01da 74       		.byte	0x74
 1571 01db 00       		.sleb128 0
 1572 01dc 00       		.byte	0
 1573 01dd 00       		.byte	0
 1574 01de 0F       		.uleb128 0xf
 1575 01df EA020000 		.4byte	.LASF23
 1576 01e3 01       		.byte	0x1
 1577 01e4 6301     		.2byte	0x163
 1578 01e6 00000000 		.4byte	.LFB38
 1579 01ea E4000000 		.4byte	.LFE38-.LFB38
 1580 01ee 01       		.uleb128 0x1
 1581 01ef 9C       		.byte	0x9c
 1582 01f0 71020000 		.4byte	0x271
 1583 01f4 11       		.uleb128 0x11
 1584 01f5 37030000 		.4byte	.LASF18
 1585 01f9 01       		.byte	0x1
 1586 01fa 6301     		.2byte	0x163
 1587 01fc 81000000 		.4byte	0x81
 1588 0200 A5000000 		.4byte	.LLST6
 1589 0204 10       		.uleb128 0x10
 1590 0205 8F030000 		.4byte	.LASF24
 1591 0209 01       		.byte	0x1
 1592 020a 6501     		.2byte	0x165
 1593 020c 81000000 		.4byte	0x81
 1594 0210 EA000000 		.4byte	.LLST7
 1595 0214 10       		.uleb128 0x10
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 78


 1596 0215 F0060000 		.4byte	.LASF25
 1597 0219 01       		.byte	0x1
 1598 021a 6601     		.2byte	0x166
 1599 021c 81000000 		.4byte	0x81
 1600 0220 08010000 		.4byte	.LLST8
 1601 0224 10       		.uleb128 0x10
 1602 0225 92070000 		.4byte	.LASF26
 1603 0229 01       		.byte	0x1
 1604 022a 6701     		.2byte	0x167
 1605 022c 76000000 		.4byte	0x76
 1606 0230 33010000 		.4byte	.LLST9
 1607 0234 10       		.uleb128 0x10
 1608 0235 07000000 		.4byte	.LASF27
 1609 0239 01       		.byte	0x1
 1610 023a 6801     		.2byte	0x168
 1611 023c 76000000 		.4byte	0x76
 1612 0240 51010000 		.4byte	.LLST10
 1613 0244 12       		.uleb128 0x12
 1614 0245 EB050000 		.4byte	.LASF20
 1615 0249 01       		.byte	0x1
 1616 024a 6901     		.2byte	0x169
 1617 024c 6B000000 		.4byte	0x6b
 1618 0250 10       		.uleb128 0x10
 1619 0251 D2050000 		.4byte	.LASF28
 1620 0255 01       		.byte	0x1
 1621 0256 6A01     		.2byte	0x16a
 1622 0258 76000000 		.4byte	0x76
 1623 025c 6F010000 		.4byte	.LLST11
 1624 0260 0D       		.uleb128 0xd
 1625 0261 62000000 		.4byte	.LVL30
 1626 0265 B9000000 		.4byte	0xb9
 1627 0269 0B       		.uleb128 0xb
 1628 026a 01       		.uleb128 0x1
 1629 026b 50       		.byte	0x50
 1630 026c 02       		.uleb128 0x2
 1631 026d 74       		.byte	0x74
 1632 026e 00       		.sleb128 0
 1633 026f 00       		.byte	0
 1634 0270 00       		.byte	0
 1635 0271 0F       		.uleb128 0xf
 1636 0272 71030000 		.4byte	.LASF29
 1637 0276 01       		.byte	0x1
 1638 0277 2202     		.2byte	0x222
 1639 0279 00000000 		.4byte	.LFB39
 1640 027d 08000000 		.4byte	.LFE39-.LFB39
 1641 0281 01       		.uleb128 0x1
 1642 0282 9C       		.byte	0x9c
 1643 0283 A9020000 		.4byte	0x2a9
 1644 0287 11       		.uleb128 0x11
 1645 0288 37030000 		.4byte	.LASF18
 1646 028c 01       		.byte	0x1
 1647 028d 2202     		.2byte	0x222
 1648 028f 81000000 		.4byte	0x81
 1649 0293 82010000 		.4byte	.LLST12
 1650 0297 0D       		.uleb128 0xd
 1651 0298 06000000 		.4byte	.LVL46
 1652 029c DE010000 		.4byte	0x1de
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 79


 1653 02a0 0B       		.uleb128 0xb
 1654 02a1 01       		.uleb128 0x1
 1655 02a2 50       		.byte	0x50
 1656 02a3 03       		.uleb128 0x3
 1657 02a4 F3       		.byte	0xf3
 1658 02a5 01       		.uleb128 0x1
 1659 02a6 50       		.byte	0x50
 1660 02a7 00       		.byte	0
 1661 02a8 00       		.byte	0
 1662 02a9 0F       		.uleb128 0xf
 1663 02aa 4C010000 		.4byte	.LASF30
 1664 02ae 01       		.byte	0x1
 1665 02af 5802     		.2byte	0x258
 1666 02b1 00000000 		.4byte	.LFB40
 1667 02b5 24000000 		.4byte	.LFE40-.LFB40
 1668 02b9 01       		.uleb128 0x1
 1669 02ba 9C       		.byte	0x9c
 1670 02bb 02030000 		.4byte	0x302
 1671 02bf 0E       		.uleb128 0xe
 1672 02c0 6900     		.ascii	"i\000"
 1673 02c2 01       		.byte	0x1
 1674 02c3 5A02     		.2byte	0x25a
 1675 02c5 81000000 		.4byte	0x81
 1676 02c9 A3010000 		.4byte	.LLST13
 1677 02cd 10       		.uleb128 0x10
 1678 02ce F2050000 		.4byte	.LASF22
 1679 02d2 01       		.byte	0x1
 1680 02d3 5B02     		.2byte	0x25b
 1681 02d5 81000000 		.4byte	0x81
 1682 02d9 C2010000 		.4byte	.LLST14
 1683 02dd 0A       		.uleb128 0xa
 1684 02de 0E000000 		.4byte	.LVL49
 1685 02e2 760A0000 		.4byte	0xa76
 1686 02e6 F1020000 		.4byte	0x2f1
 1687 02ea 0B       		.uleb128 0xb
 1688 02eb 01       		.uleb128 0x1
 1689 02ec 51       		.byte	0x51
 1690 02ed 02       		.uleb128 0x2
 1691 02ee 74       		.byte	0x74
 1692 02ef 00       		.sleb128 0
 1693 02f0 00       		.byte	0
 1694 02f1 0D       		.uleb128 0xd
 1695 02f2 18000000 		.4byte	.LVL51
 1696 02f6 71020000 		.4byte	0x271
 1697 02fa 0B       		.uleb128 0xb
 1698 02fb 01       		.uleb128 0x1
 1699 02fc 50       		.byte	0x50
 1700 02fd 02       		.uleb128 0x2
 1701 02fe 74       		.byte	0x74
 1702 02ff 00       		.sleb128 0
 1703 0300 00       		.byte	0
 1704 0301 00       		.byte	0
 1705 0302 0F       		.uleb128 0xf
 1706 0303 AD000000 		.4byte	.LASF31
 1707 0307 01       		.byte	0x1
 1708 0308 8502     		.2byte	0x285
 1709 030a 00000000 		.4byte	.LFB41
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 80


 1710 030e 24000000 		.4byte	.LFE41-.LFB41
 1711 0312 01       		.uleb128 0x1
 1712 0313 9C       		.byte	0x9c
 1713 0314 92030000 		.4byte	0x392
 1714 0318 11       		.uleb128 0x11
 1715 0319 EB050000 		.4byte	.LASF20
 1716 031d 01       		.byte	0x1
 1717 031e 8502     		.2byte	0x285
 1718 0320 81000000 		.4byte	0x81
 1719 0324 D5010000 		.4byte	.LLST15
 1720 0328 13       		.uleb128 0x13
 1721 0329 14060000 		.4byte	.LASF32
 1722 032d 01       		.byte	0x1
 1723 032e 8702     		.2byte	0x287
 1724 0330 81000000 		.4byte	0x81
 1725 0334 01       		.byte	0x1
 1726 0335 13       		.uleb128 0x13
 1727 0336 97060000 		.4byte	.LASF33
 1728 033a 01       		.byte	0x1
 1729 033b 8802     		.2byte	0x288
 1730 033d 81000000 		.4byte	0x81
 1731 0341 00       		.byte	0
 1732 0342 13       		.uleb128 0x13
 1733 0343 91020000 		.4byte	.LASF34
 1734 0347 01       		.byte	0x1
 1735 0348 8902     		.2byte	0x289
 1736 034a 81000000 		.4byte	0x81
 1737 034e 01       		.byte	0x1
 1738 034f 0E       		.uleb128 0xe
 1739 0350 6900     		.ascii	"i\000"
 1740 0352 01       		.byte	0x1
 1741 0353 8A02     		.2byte	0x28a
 1742 0355 81000000 		.4byte	0x81
 1743 0359 F6010000 		.4byte	.LLST16
 1744 035d 10       		.uleb128 0x10
 1745 035e F2050000 		.4byte	.LASF22
 1746 0362 01       		.byte	0x1
 1747 0363 8B02     		.2byte	0x28b
 1748 0365 81000000 		.4byte	0x81
 1749 0369 15020000 		.4byte	.LLST17
 1750 036d 0A       		.uleb128 0xa
 1751 036e 0E000000 		.4byte	.LVL57
 1752 0372 760A0000 		.4byte	0xa76
 1753 0376 81030000 		.4byte	0x381
 1754 037a 0B       		.uleb128 0xb
 1755 037b 01       		.uleb128 0x1
 1756 037c 51       		.byte	0x51
 1757 037d 02       		.uleb128 0x2
 1758 037e 74       		.byte	0x74
 1759 037f 00       		.sleb128 0
 1760 0380 00       		.byte	0
 1761 0381 0D       		.uleb128 0xd
 1762 0382 18000000 		.4byte	.LVL59
 1763 0386 71020000 		.4byte	0x271
 1764 038a 0B       		.uleb128 0xb
 1765 038b 01       		.uleb128 0x1
 1766 038c 50       		.byte	0x50
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 81


 1767 038d 02       		.uleb128 0x2
 1768 038e 74       		.byte	0x74
 1769 038f 00       		.sleb128 0
 1770 0390 00       		.byte	0
 1771 0391 00       		.byte	0
 1772 0392 14       		.uleb128 0x14
 1773 0393 A6010000 		.4byte	.LASF37
 1774 0397 01       		.byte	0x1
 1775 0398 B602     		.2byte	0x2b6
 1776 039a 76000000 		.4byte	0x76
 1777 039e 00000000 		.4byte	.LFB42
 1778 03a2 0C000000 		.4byte	.LFE42-.LFB42
 1779 03a6 01       		.uleb128 0x1
 1780 03a7 9C       		.byte	0x9c
 1781 03a8 BD030000 		.4byte	0x3bd
 1782 03ac 11       		.uleb128 0x11
 1783 03ad 37030000 		.4byte	.LASF18
 1784 03b1 01       		.byte	0x1
 1785 03b2 B602     		.2byte	0x2b6
 1786 03b4 81000000 		.4byte	0x81
 1787 03b8 28020000 		.4byte	.LLST18
 1788 03bc 00       		.byte	0
 1789 03bd 0F       		.uleb128 0xf
 1790 03be B9050000 		.4byte	.LASF35
 1791 03c2 01       		.byte	0x1
 1792 03c3 D102     		.2byte	0x2d1
 1793 03c5 00000000 		.4byte	.LFB43
 1794 03c9 0C000000 		.4byte	.LFE43-.LFB43
 1795 03cd 01       		.uleb128 0x1
 1796 03ce 9C       		.byte	0x9c
 1797 03cf F2030000 		.4byte	0x3f2
 1798 03d3 11       		.uleb128 0x11
 1799 03d4 37030000 		.4byte	.LASF18
 1800 03d8 01       		.byte	0x1
 1801 03d9 D102     		.2byte	0x2d1
 1802 03db 81000000 		.4byte	0x81
 1803 03df 49020000 		.4byte	.LLST19
 1804 03e3 15       		.uleb128 0x15
 1805 03e4 1F030000 		.4byte	.LASF36
 1806 03e8 01       		.byte	0x1
 1807 03e9 D102     		.2byte	0x2d1
 1808 03eb 76000000 		.4byte	0x76
 1809 03ef 01       		.uleb128 0x1
 1810 03f0 51       		.byte	0x51
 1811 03f1 00       		.byte	0
 1812 03f2 14       		.uleb128 0x14
 1813 03f3 BD030000 		.4byte	.LASF38
 1814 03f7 01       		.byte	0x1
 1815 03f8 EC02     		.2byte	0x2ec
 1816 03fa 76000000 		.4byte	0x76
 1817 03fe 00000000 		.4byte	.LFB44
 1818 0402 10000000 		.4byte	.LFE44-.LFB44
 1819 0406 01       		.uleb128 0x1
 1820 0407 9C       		.byte	0x9c
 1821 0408 1D040000 		.4byte	0x41d
 1822 040c 11       		.uleb128 0x11
 1823 040d 37030000 		.4byte	.LASF18
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 82


 1824 0411 01       		.byte	0x1
 1825 0412 EC02     		.2byte	0x2ec
 1826 0414 81000000 		.4byte	0x81
 1827 0418 6A020000 		.4byte	.LLST20
 1828 041c 00       		.byte	0
 1829 041d 0F       		.uleb128 0xf
 1830 041e 15070000 		.4byte	.LASF39
 1831 0422 01       		.byte	0x1
 1832 0423 0703     		.2byte	0x307
 1833 0425 00000000 		.4byte	.LFB45
 1834 0429 10000000 		.4byte	.LFE45-.LFB45
 1835 042d 01       		.uleb128 0x1
 1836 042e 9C       		.byte	0x9c
 1837 042f 52040000 		.4byte	0x452
 1838 0433 11       		.uleb128 0x11
 1839 0434 37030000 		.4byte	.LASF18
 1840 0438 01       		.byte	0x1
 1841 0439 0703     		.2byte	0x307
 1842 043b 81000000 		.4byte	0x81
 1843 043f 8B020000 		.4byte	.LLST21
 1844 0443 15       		.uleb128 0x15
 1845 0444 6E020000 		.4byte	.LASF40
 1846 0448 01       		.byte	0x1
 1847 0449 0703     		.2byte	0x307
 1848 044b 76000000 		.4byte	0x76
 1849 044f 01       		.uleb128 0x1
 1850 0450 51       		.byte	0x51
 1851 0451 00       		.byte	0
 1852 0452 14       		.uleb128 0x14
 1853 0453 5B040000 		.4byte	.LASF41
 1854 0457 01       		.byte	0x1
 1855 0458 2203     		.2byte	0x322
 1856 045a 76000000 		.4byte	0x76
 1857 045e 00000000 		.4byte	.LFB46
 1858 0462 10000000 		.4byte	.LFE46-.LFB46
 1859 0466 01       		.uleb128 0x1
 1860 0467 9C       		.byte	0x9c
 1861 0468 7D040000 		.4byte	0x47d
 1862 046c 11       		.uleb128 0x11
 1863 046d EB050000 		.4byte	.LASF20
 1864 0471 01       		.byte	0x1
 1865 0472 2203     		.2byte	0x322
 1866 0474 81000000 		.4byte	0x81
 1867 0478 AC020000 		.4byte	.LLST22
 1868 047c 00       		.byte	0
 1869 047d 14       		.uleb128 0x14
 1870 047e 0D010000 		.4byte	.LASF42
 1871 0482 01       		.byte	0x1
 1872 0483 3D03     		.2byte	0x33d
 1873 0485 76000000 		.4byte	0x76
 1874 0489 00000000 		.4byte	.LFB47
 1875 048d 10000000 		.4byte	.LFE47-.LFB47
 1876 0491 01       		.uleb128 0x1
 1877 0492 9C       		.byte	0x9c
 1878 0493 A8040000 		.4byte	0x4a8
 1879 0497 11       		.uleb128 0x11
 1880 0498 EB050000 		.4byte	.LASF20
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 83


 1881 049c 01       		.byte	0x1
 1882 049d 3D03     		.2byte	0x33d
 1883 049f 81000000 		.4byte	0x81
 1884 04a3 CD020000 		.4byte	.LLST23
 1885 04a7 00       		.byte	0
 1886 04a8 14       		.uleb128 0x14
 1887 04a9 7A060000 		.4byte	.LASF43
 1888 04ad 01       		.byte	0x1
 1889 04ae 5903     		.2byte	0x359
 1890 04b0 76000000 		.4byte	0x76
 1891 04b4 00000000 		.4byte	.LFB48
 1892 04b8 10000000 		.4byte	.LFE48-.LFB48
 1893 04bc 01       		.uleb128 0x1
 1894 04bd 9C       		.byte	0x9c
 1895 04be D3040000 		.4byte	0x4d3
 1896 04c2 11       		.uleb128 0x11
 1897 04c3 EB050000 		.4byte	.LASF20
 1898 04c7 01       		.byte	0x1
 1899 04c8 5903     		.2byte	0x359
 1900 04ca 81000000 		.4byte	0x81
 1901 04ce EE020000 		.4byte	.LLST24
 1902 04d2 00       		.byte	0
 1903 04d3 14       		.uleb128 0x14
 1904 04d4 57000000 		.4byte	.LASF44
 1905 04d8 01       		.byte	0x1
 1906 04d9 7503     		.2byte	0x375
 1907 04db 76000000 		.4byte	0x76
 1908 04df 00000000 		.4byte	.LFB49
 1909 04e3 10000000 		.4byte	.LFE49-.LFB49
 1910 04e7 01       		.uleb128 0x1
 1911 04e8 9C       		.byte	0x9c
 1912 04e9 FE040000 		.4byte	0x4fe
 1913 04ed 11       		.uleb128 0x11
 1914 04ee EB050000 		.4byte	.LASF20
 1915 04f2 01       		.byte	0x1
 1916 04f3 7503     		.2byte	0x375
 1917 04f5 81000000 		.4byte	0x81
 1918 04f9 0F030000 		.4byte	.LLST25
 1919 04fd 00       		.byte	0
 1920 04fe 0F       		.uleb128 0xf
 1921 04ff 3D020000 		.4byte	.LASF45
 1922 0503 01       		.byte	0x1
 1923 0504 9603     		.2byte	0x396
 1924 0506 00000000 		.4byte	.LFB50
 1925 050a 10000000 		.4byte	.LFE50-.LFB50
 1926 050e 01       		.uleb128 0x1
 1927 050f 9C       		.byte	0x9c
 1928 0510 33050000 		.4byte	0x533
 1929 0514 11       		.uleb128 0x11
 1930 0515 EB050000 		.4byte	.LASF20
 1931 0519 01       		.byte	0x1
 1932 051a 9603     		.2byte	0x396
 1933 051c 81000000 		.4byte	0x81
 1934 0520 30030000 		.4byte	.LLST26
 1935 0524 15       		.uleb128 0x15
 1936 0525 6E020000 		.4byte	.LASF40
 1937 0529 01       		.byte	0x1
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 84


 1938 052a 9603     		.2byte	0x396
 1939 052c 76000000 		.4byte	0x76
 1940 0530 01       		.uleb128 0x1
 1941 0531 51       		.byte	0x51
 1942 0532 00       		.byte	0
 1943 0533 0F       		.uleb128 0xf
 1944 0534 42060000 		.4byte	.LASF46
 1945 0538 01       		.byte	0x1
 1946 0539 B203     		.2byte	0x3b2
 1947 053b 00000000 		.4byte	.LFB51
 1948 053f 10000000 		.4byte	.LFE51-.LFB51
 1949 0543 01       		.uleb128 0x1
 1950 0544 9C       		.byte	0x9c
 1951 0545 68050000 		.4byte	0x568
 1952 0549 11       		.uleb128 0x11
 1953 054a EB050000 		.4byte	.LASF20
 1954 054e 01       		.byte	0x1
 1955 054f B203     		.2byte	0x3b2
 1956 0551 81000000 		.4byte	0x81
 1957 0555 51030000 		.4byte	.LLST27
 1958 0559 15       		.uleb128 0x15
 1959 055a 6E020000 		.4byte	.LASF40
 1960 055e 01       		.byte	0x1
 1961 055f B203     		.2byte	0x3b2
 1962 0561 76000000 		.4byte	0x76
 1963 0565 01       		.uleb128 0x1
 1964 0566 51       		.byte	0x51
 1965 0567 00       		.byte	0
 1966 0568 0F       		.uleb128 0xf
 1967 0569 21040000 		.4byte	.LASF47
 1968 056d 01       		.byte	0x1
 1969 056e CE03     		.2byte	0x3ce
 1970 0570 00000000 		.4byte	.LFB52
 1971 0574 10000000 		.4byte	.LFE52-.LFB52
 1972 0578 01       		.uleb128 0x1
 1973 0579 9C       		.byte	0x9c
 1974 057a 9D050000 		.4byte	0x59d
 1975 057e 11       		.uleb128 0x11
 1976 057f EB050000 		.4byte	.LASF20
 1977 0583 01       		.byte	0x1
 1978 0584 CE03     		.2byte	0x3ce
 1979 0586 81000000 		.4byte	0x81
 1980 058a 72030000 		.4byte	.LLST28
 1981 058e 15       		.uleb128 0x15
 1982 058f 6E020000 		.4byte	.LASF40
 1983 0593 01       		.byte	0x1
 1984 0594 CE03     		.2byte	0x3ce
 1985 0596 76000000 		.4byte	0x76
 1986 059a 01       		.uleb128 0x1
 1987 059b 51       		.byte	0x51
 1988 059c 00       		.byte	0
 1989 059d 0F       		.uleb128 0xf
 1990 059e 8A000000 		.4byte	.LASF48
 1991 05a2 01       		.byte	0x1
 1992 05a3 EB03     		.2byte	0x3eb
 1993 05a5 00000000 		.4byte	.LFB53
 1994 05a9 10000000 		.4byte	.LFE53-.LFB53
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 85


 1995 05ad 01       		.uleb128 0x1
 1996 05ae 9C       		.byte	0x9c
 1997 05af D2050000 		.4byte	0x5d2
 1998 05b3 11       		.uleb128 0x11
 1999 05b4 EB050000 		.4byte	.LASF20
 2000 05b8 01       		.byte	0x1
 2001 05b9 EB03     		.2byte	0x3eb
 2002 05bb 81000000 		.4byte	0x81
 2003 05bf 93030000 		.4byte	.LLST29
 2004 05c3 15       		.uleb128 0x15
 2005 05c4 6E020000 		.4byte	.LASF40
 2006 05c8 01       		.byte	0x1
 2007 05c9 EB03     		.2byte	0x3eb
 2008 05cb 76000000 		.4byte	0x76
 2009 05cf 01       		.uleb128 0x1
 2010 05d0 51       		.byte	0x51
 2011 05d1 00       		.byte	0
 2012 05d2 0F       		.uleb128 0xf
 2013 05d3 59020000 		.4byte	.LASF49
 2014 05d7 01       		.byte	0x1
 2015 05d8 0704     		.2byte	0x407
 2016 05da 00000000 		.4byte	.LFB54
 2017 05de 0C000000 		.4byte	.LFE54-.LFB54
 2018 05e2 01       		.uleb128 0x1
 2019 05e3 9C       		.byte	0x9c
 2020 05e4 05060000 		.4byte	0x605
 2021 05e8 15       		.uleb128 0x15
 2022 05e9 EB050000 		.4byte	.LASF20
 2023 05ed 01       		.byte	0x1
 2024 05ee 0704     		.2byte	0x407
 2025 05f0 81000000 		.4byte	0x81
 2026 05f4 01       		.uleb128 0x1
 2027 05f5 50       		.byte	0x50
 2028 05f6 15       		.uleb128 0x15
 2029 05f7 6E020000 		.4byte	.LASF40
 2030 05fb 01       		.byte	0x1
 2031 05fc 0704     		.2byte	0x407
 2032 05fe 6B000000 		.4byte	0x6b
 2033 0602 01       		.uleb128 0x1
 2034 0603 51       		.byte	0x51
 2035 0604 00       		.byte	0
 2036 0605 0F       		.uleb128 0xf
 2037 0606 74020000 		.4byte	.LASF50
 2038 060a 01       		.byte	0x1
 2039 060b 2304     		.2byte	0x423
 2040 060d 00000000 		.4byte	.LFB55
 2041 0611 0C000000 		.4byte	.LFE55-.LFB55
 2042 0615 01       		.uleb128 0x1
 2043 0616 9C       		.byte	0x9c
 2044 0617 3A060000 		.4byte	0x63a
 2045 061b 11       		.uleb128 0x11
 2046 061c 37030000 		.4byte	.LASF18
 2047 0620 01       		.byte	0x1
 2048 0621 2304     		.2byte	0x423
 2049 0623 81000000 		.4byte	0x81
 2050 0627 B4030000 		.4byte	.LLST30
 2051 062b 15       		.uleb128 0x15
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 86


 2052 062c 6E020000 		.4byte	.LASF40
 2053 0630 01       		.byte	0x1
 2054 0631 2304     		.2byte	0x423
 2055 0633 6B000000 		.4byte	0x6b
 2056 0637 01       		.uleb128 0x1
 2057 0638 51       		.byte	0x51
 2058 0639 00       		.byte	0
 2059 063a 14       		.uleb128 0x14
 2060 063b 3E040000 		.4byte	.LASF51
 2061 063f 01       		.byte	0x1
 2062 0640 5104     		.2byte	0x451
 2063 0642 81000000 		.4byte	0x81
 2064 0646 00000000 		.4byte	.LFB56
 2065 064a A0000000 		.4byte	.LFE56-.LFB56
 2066 064e 01       		.uleb128 0x1
 2067 064f 9C       		.byte	0x9c
 2068 0650 24070000 		.4byte	0x724
 2069 0654 11       		.uleb128 0x11
 2070 0655 37030000 		.4byte	.LASF18
 2071 0659 01       		.byte	0x1
 2072 065a 5104     		.2byte	0x451
 2073 065c 81000000 		.4byte	0x81
 2074 0660 D5030000 		.4byte	.LLST31
 2075 0664 12       		.uleb128 0x12
 2076 0665 EB050000 		.4byte	.LASF20
 2077 0669 01       		.byte	0x1
 2078 066a 5304     		.2byte	0x453
 2079 066c 6B000000 		.4byte	0x6b
 2080 0670 10       		.uleb128 0x10
 2081 0671 D7030000 		.4byte	.LASF52
 2082 0675 01       		.byte	0x1
 2083 0676 5404     		.2byte	0x454
 2084 0678 6B000000 		.4byte	0x6b
 2085 067c 01040000 		.4byte	.LLST32
 2086 0680 12       		.uleb128 0x12
 2087 0681 A3060000 		.4byte	.LASF53
 2088 0685 01       		.byte	0x1
 2089 0686 5504     		.2byte	0x455
 2090 0688 6B000000 		.4byte	0x6b
 2091 068c 10       		.uleb128 0x10
 2092 068d 7A000000 		.4byte	.LASF54
 2093 0691 01       		.byte	0x1
 2094 0692 5704     		.2byte	0x457
 2095 0694 76000000 		.4byte	0x76
 2096 0698 14040000 		.4byte	.LLST33
 2097 069c 10       		.uleb128 0x10
 2098 069d 32020000 		.4byte	.LASF55
 2099 06a1 01       		.byte	0x1
 2100 06a2 5804     		.2byte	0x458
 2101 06a4 76000000 		.4byte	0x76
 2102 06a8 27040000 		.4byte	.LLST34
 2103 06ac 0A       		.uleb128 0xa
 2104 06ad 24000000 		.4byte	.LVL94
 2105 06b1 760A0000 		.4byte	0xa76
 2106 06b5 C9060000 		.4byte	0x6c9
 2107 06b9 0B       		.uleb128 0xb
 2108 06ba 01       		.uleb128 0x1
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 87


 2109 06bb 51       		.byte	0x51
 2110 06bc 02       		.uleb128 0x2
 2111 06bd 74       		.byte	0x74
 2112 06be 00       		.sleb128 0
 2113 06bf 0B       		.uleb128 0xb
 2114 06c0 01       		.uleb128 0x1
 2115 06c1 50       		.byte	0x50
 2116 06c2 05       		.uleb128 0x5
 2117 06c3 03       		.byte	0x3
 2118 06c4 10000000 		.4byte	.LANCHOR0+16
 2119 06c8 00       		.byte	0
 2120 06c9 0A       		.uleb128 0xa
 2121 06ca 46000000 		.4byte	.LVL96
 2122 06ce 900A0000 		.4byte	0xa90
 2123 06d2 E8060000 		.4byte	0x6e8
 2124 06d6 0B       		.uleb128 0xb
 2125 06d7 01       		.uleb128 0x1
 2126 06d8 52       		.byte	0x52
 2127 06d9 01       		.uleb128 0x1
 2128 06da 30       		.byte	0x30
 2129 06db 0B       		.uleb128 0xb
 2130 06dc 01       		.uleb128 0x1
 2131 06dd 51       		.byte	0x51
 2132 06de 02       		.uleb128 0x2
 2133 06df 74       		.byte	0x74
 2134 06e0 00       		.sleb128 0
 2135 06e1 0B       		.uleb128 0xb
 2136 06e2 01       		.uleb128 0x1
 2137 06e3 50       		.byte	0x50
 2138 06e4 02       		.uleb128 0x2
 2139 06e5 76       		.byte	0x76
 2140 06e6 10       		.sleb128 16
 2141 06e7 00       		.byte	0
 2142 06e8 0A       		.uleb128 0xa
 2143 06e9 74000000 		.4byte	.LVL99
 2144 06ed 900A0000 		.4byte	0xa90
 2145 06f1 0A070000 		.4byte	0x70a
 2146 06f5 0B       		.uleb128 0xb
 2147 06f6 01       		.uleb128 0x1
 2148 06f7 52       		.byte	0x52
 2149 06f8 01       		.uleb128 0x1
 2150 06f9 31       		.byte	0x31
 2151 06fa 0B       		.uleb128 0xb
 2152 06fb 01       		.uleb128 0x1
 2153 06fc 51       		.byte	0x51
 2154 06fd 02       		.uleb128 0x2
 2155 06fe 74       		.byte	0x74
 2156 06ff 00       		.sleb128 0
 2157 0700 0B       		.uleb128 0xb
 2158 0701 01       		.uleb128 0x1
 2159 0702 50       		.byte	0x50
 2160 0703 05       		.uleb128 0x5
 2161 0704 03       		.byte	0x3
 2162 0705 10000000 		.4byte	.LANCHOR0+16
 2163 0709 00       		.byte	0
 2164 070a 0D       		.uleb128 0xd
 2165 070b 86000000 		.4byte	.LVL100
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 88


 2166 070f 760A0000 		.4byte	0xa76
 2167 0713 0B       		.uleb128 0xb
 2168 0714 01       		.uleb128 0x1
 2169 0715 51       		.byte	0x51
 2170 0716 02       		.uleb128 0x2
 2171 0717 74       		.byte	0x74
 2172 0718 00       		.sleb128 0
 2173 0719 0B       		.uleb128 0xb
 2174 071a 01       		.uleb128 0x1
 2175 071b 50       		.byte	0x50
 2176 071c 05       		.uleb128 0x5
 2177 071d 03       		.byte	0x3
 2178 071e 10000000 		.4byte	.LANCHOR0+16
 2179 0722 00       		.byte	0
 2180 0723 00       		.byte	0
 2181 0724 14       		.uleb128 0x14
 2182 0725 6E050000 		.4byte	.LASF56
 2183 0729 01       		.byte	0x1
 2184 072a A304     		.2byte	0x4a3
 2185 072c 81000000 		.4byte	0x81
 2186 0730 00000000 		.4byte	.LFB57
 2187 0734 10000000 		.4byte	.LFE57-.LFB57
 2188 0738 01       		.uleb128 0x1
 2189 0739 9C       		.byte	0x9c
 2190 073a 8B070000 		.4byte	0x78b
 2191 073e 11       		.uleb128 0x11
 2192 073f EB050000 		.4byte	.LASF20
 2193 0743 01       		.byte	0x1
 2194 0744 A304     		.2byte	0x4a3
 2195 0746 81000000 		.4byte	0x81
 2196 074a 45040000 		.4byte	.LLST35
 2197 074e 10       		.uleb128 0x10
 2198 074f 9D010000 		.4byte	.LASF57
 2199 0753 01       		.byte	0x1
 2200 0754 A504     		.2byte	0x4a5
 2201 0756 81000000 		.4byte	0x81
 2202 075a 66040000 		.4byte	.LLST36
 2203 075e 13       		.uleb128 0x13
 2204 075f F5060000 		.4byte	.LASF58
 2205 0763 01       		.byte	0x1
 2206 0764 A604     		.2byte	0x4a6
 2207 0766 81000000 		.4byte	0x81
 2208 076a 01       		.byte	0x1
 2209 076b 10       		.uleb128 0x10
 2210 076c BF010000 		.4byte	.LASF59
 2211 0770 01       		.byte	0x1
 2212 0771 A704     		.2byte	0x4a7
 2213 0773 81000000 		.4byte	0x81
 2214 0777 86040000 		.4byte	.LLST37
 2215 077b 0D       		.uleb128 0xd
 2216 077c 08000000 		.4byte	.LVL107
 2217 0780 3A060000 		.4byte	0x63a
 2218 0784 0B       		.uleb128 0xb
 2219 0785 01       		.uleb128 0x1
 2220 0786 50       		.byte	0x50
 2221 0787 01       		.uleb128 0x1
 2222 0788 30       		.byte	0x30
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 89


 2223 0789 00       		.byte	0
 2224 078a 00       		.byte	0
 2225 078b 14       		.uleb128 0x14
 2226 078c CE010000 		.4byte	.LASF60
 2227 0790 01       		.byte	0x1
 2228 0791 D104     		.2byte	0x4d1
 2229 0793 81000000 		.4byte	0x81
 2230 0797 00000000 		.4byte	.LFB58
 2231 079b 1E000000 		.4byte	.LFE58-.LFB58
 2232 079f 01       		.uleb128 0x1
 2233 07a0 9C       		.byte	0x9c
 2234 07a1 D4070000 		.4byte	0x7d4
 2235 07a5 0E       		.uleb128 0xe
 2236 07a6 6900     		.ascii	"i\000"
 2237 07a8 01       		.byte	0x1
 2238 07a9 D404     		.2byte	0x4d4
 2239 07ab 81000000 		.4byte	0x81
 2240 07af A5040000 		.4byte	.LLST38
 2241 07b3 10       		.uleb128 0x10
 2242 07b4 BF010000 		.4byte	.LASF59
 2243 07b8 01       		.byte	0x1
 2244 07b9 D504     		.2byte	0x4d5
 2245 07bb 81000000 		.4byte	0x81
 2246 07bf C4040000 		.4byte	.LLST39
 2247 07c3 0D       		.uleb128 0xd
 2248 07c4 0E000000 		.4byte	.LVL111
 2249 07c8 24070000 		.4byte	0x724
 2250 07cc 0B       		.uleb128 0xb
 2251 07cd 01       		.uleb128 0x1
 2252 07ce 50       		.byte	0x50
 2253 07cf 02       		.uleb128 0x2
 2254 07d0 74       		.byte	0x74
 2255 07d1 00       		.sleb128 0
 2256 07d2 00       		.byte	0
 2257 07d3 00       		.byte	0
 2258 07d4 0F       		.uleb128 0xf
 2259 07d5 E9030000 		.4byte	.LASF61
 2260 07d9 01       		.byte	0x1
 2261 07da 0005     		.2byte	0x500
 2262 07dc 00000000 		.4byte	.LFB59
 2263 07e0 14000000 		.4byte	.LFE59-.LFB59
 2264 07e4 01       		.uleb128 0x1
 2265 07e5 9C       		.byte	0x9c
 2266 07e6 2C080000 		.4byte	0x82c
 2267 07ea 11       		.uleb128 0x11
 2268 07eb EB050000 		.4byte	.LASF20
 2269 07ef 01       		.byte	0x1
 2270 07f0 0005     		.2byte	0x500
 2271 07f2 81000000 		.4byte	0x81
 2272 07f6 EE040000 		.4byte	.LLST40
 2273 07fa 10       		.uleb128 0x10
 2274 07fb 9D010000 		.4byte	.LASF57
 2275 07ff 01       		.byte	0x1
 2276 0800 0305     		.2byte	0x503
 2277 0802 6B000000 		.4byte	0x6b
 2278 0806 0F050000 		.4byte	.LLST41
 2279 080a 13       		.uleb128 0x13
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 90


 2280 080b F5060000 		.4byte	.LASF58
 2281 080f 01       		.byte	0x1
 2282 0810 0405     		.2byte	0x504
 2283 0812 6B000000 		.4byte	0x6b
 2284 0816 01       		.byte	0x1
 2285 0817 0D       		.uleb128 0xd
 2286 0818 0C000000 		.4byte	.LVL119
 2287 081c 900A0000 		.4byte	0xa90
 2288 0820 0B       		.uleb128 0xb
 2289 0821 01       		.uleb128 0x1
 2290 0822 52       		.byte	0x52
 2291 0823 01       		.uleb128 0x1
 2292 0824 31       		.byte	0x31
 2293 0825 0B       		.uleb128 0xb
 2294 0826 01       		.uleb128 0x1
 2295 0827 51       		.byte	0x51
 2296 0828 01       		.uleb128 0x1
 2297 0829 30       		.byte	0x30
 2298 082a 00       		.byte	0
 2299 082b 00       		.byte	0
 2300 082c 0F       		.uleb128 0xf
 2301 082d 86010000 		.4byte	.LASF62
 2302 0831 01       		.byte	0x1
 2303 0832 2B05     		.2byte	0x52b
 2304 0834 00000000 		.4byte	.LFB60
 2305 0838 14000000 		.4byte	.LFE60-.LFB60
 2306 083c 01       		.uleb128 0x1
 2307 083d 9C       		.byte	0x9c
 2308 083e 84080000 		.4byte	0x884
 2309 0842 11       		.uleb128 0x11
 2310 0843 EB050000 		.4byte	.LASF20
 2311 0847 01       		.byte	0x1
 2312 0848 2B05     		.2byte	0x52b
 2313 084a 81000000 		.4byte	0x81
 2314 084e 2F050000 		.4byte	.LLST42
 2315 0852 10       		.uleb128 0x10
 2316 0853 9D010000 		.4byte	.LASF57
 2317 0857 01       		.byte	0x1
 2318 0858 2D05     		.2byte	0x52d
 2319 085a 6B000000 		.4byte	0x6b
 2320 085e 50050000 		.4byte	.LLST43
 2321 0862 13       		.uleb128 0x13
 2322 0863 F5060000 		.4byte	.LASF58
 2323 0867 01       		.byte	0x1
 2324 0868 2E05     		.2byte	0x52e
 2325 086a 6B000000 		.4byte	0x6b
 2326 086e 01       		.byte	0x1
 2327 086f 0D       		.uleb128 0xd
 2328 0870 0C000000 		.4byte	.LVL123
 2329 0874 900A0000 		.4byte	0xa90
 2330 0878 0B       		.uleb128 0xb
 2331 0879 01       		.uleb128 0x1
 2332 087a 52       		.byte	0x52
 2333 087b 01       		.uleb128 0x1
 2334 087c 30       		.byte	0x30
 2335 087d 0B       		.uleb128 0xb
 2336 087e 01       		.uleb128 0x1
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 91


 2337 087f 51       		.byte	0x51
 2338 0880 01       		.uleb128 0x1
 2339 0881 30       		.byte	0x30
 2340 0882 00       		.byte	0
 2341 0883 00       		.byte	0
 2342 0884 14       		.uleb128 0x14
 2343 0885 44070000 		.4byte	.LASF63
 2344 0889 01       		.byte	0x1
 2345 088a A80A     		.2byte	0xaa8
 2346 088c 81000000 		.4byte	0x81
 2347 0890 00000000 		.4byte	.LFB61
 2348 0894 0C000000 		.4byte	.LFE61-.LFB61
 2349 0898 01       		.uleb128 0x1
 2350 0899 9C       		.byte	0x9c
 2351 089a AF080000 		.4byte	0x8af
 2352 089e 11       		.uleb128 0x11
 2353 089f 37030000 		.4byte	.LASF18
 2354 08a3 01       		.byte	0x1
 2355 08a4 A80A     		.2byte	0xaa8
 2356 08a6 81000000 		.4byte	0x81
 2357 08aa 70050000 		.4byte	.LLST44
 2358 08ae 00       		.byte	0
 2359 08af 14       		.uleb128 0x14
 2360 08b0 51050000 		.4byte	.LASF64
 2361 08b4 01       		.byte	0x1
 2362 08b5 C20A     		.2byte	0xac2
 2363 08b7 6B000000 		.4byte	0x6b
 2364 08bb 00000000 		.4byte	.LFB62
 2365 08bf 0C000000 		.4byte	.LFE62-.LFB62
 2366 08c3 01       		.uleb128 0x1
 2367 08c4 9C       		.byte	0x9c
 2368 08c5 DA080000 		.4byte	0x8da
 2369 08c9 11       		.uleb128 0x11
 2370 08ca 37030000 		.4byte	.LASF18
 2371 08ce 01       		.byte	0x1
 2372 08cf C20A     		.2byte	0xac2
 2373 08d1 81000000 		.4byte	0x81
 2374 08d5 91050000 		.4byte	.LLST45
 2375 08d9 00       		.byte	0
 2376 08da 14       		.uleb128 0x14
 2377 08db CB000000 		.4byte	.LASF65
 2378 08df 01       		.byte	0x1
 2379 08e0 DC0A     		.2byte	0xadc
 2380 08e2 6B000000 		.4byte	0x6b
 2381 08e6 00000000 		.4byte	.LFB63
 2382 08ea 0C000000 		.4byte	.LFE63-.LFB63
 2383 08ee 01       		.uleb128 0x1
 2384 08ef 9C       		.byte	0x9c
 2385 08f0 05090000 		.4byte	0x905
 2386 08f4 11       		.uleb128 0x11
 2387 08f5 EB050000 		.4byte	.LASF20
 2388 08f9 01       		.byte	0x1
 2389 08fa DC0A     		.2byte	0xadc
 2390 08fc 81000000 		.4byte	0x81
 2391 0900 B2050000 		.4byte	.LLST46
 2392 0904 00       		.byte	0
 2393 0905 16       		.uleb128 0x16
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 92


 2394 0906 6B000000 		.4byte	0x6b
 2395 090a 15090000 		.4byte	0x915
 2396 090e 17       		.uleb128 0x17
 2397 090f A1000000 		.4byte	0xa1
 2398 0913 01       		.byte	0x1
 2399 0914 00       		.byte	0
 2400 0915 18       		.uleb128 0x18
 2401 0916 79070000 		.4byte	.LASF66
 2402 091a 01       		.byte	0x1
 2403 091b 5D       		.byte	0x5d
 2404 091c 05090000 		.4byte	0x905
 2405 0920 05       		.uleb128 0x5
 2406 0921 03       		.byte	0x3
 2407 0922 0C000000 		.4byte	CapSense_debounceCounter
 2408 0926 16       		.uleb128 0x16
 2409 0927 76000000 		.4byte	0x76
 2410 092b 36090000 		.4byte	0x936
 2411 092f 17       		.uleb128 0x17
 2412 0930 A1000000 		.4byte	0xa1
 2413 0934 00       		.byte	0
 2414 0935 00       		.byte	0
 2415 0936 19       		.uleb128 0x19
 2416 0937 02070000 		.4byte	.LASF67
 2417 093b 01       		.byte	0x1
 2418 093c 2C       		.byte	0x2c
 2419 093d 26090000 		.4byte	0x926
 2420 0941 16       		.uleb128 0x16
 2421 0942 6B000000 		.4byte	0x6b
 2422 0946 51090000 		.4byte	0x951
 2423 094a 17       		.uleb128 0x17
 2424 094b A1000000 		.4byte	0xa1
 2425 094f 00       		.byte	0
 2426 0950 00       		.byte	0
 2427 0951 19       		.uleb128 0x19
 2428 0952 3E030000 		.4byte	.LASF68
 2429 0956 01       		.byte	0x1
 2430 0957 2D       		.byte	0x2d
 2431 0958 41090000 		.4byte	0x941
 2432 095c 19       		.uleb128 0x19
 2433 095d 15020000 		.4byte	.LASF69
 2434 0961 01       		.byte	0x1
 2435 0962 2E       		.byte	0x2e
 2436 0963 67090000 		.4byte	0x967
 2437 0967 06       		.uleb128 0x6
 2438 0968 41090000 		.4byte	0x941
 2439 096c 1A       		.uleb128 0x1a
 2440 096d 5D060000 		.4byte	.LASF70
 2441 0971 01       		.byte	0x1
 2442 0972 34       		.byte	0x34
 2443 0973 26090000 		.4byte	0x926
 2444 0977 05       		.uleb128 0x5
 2445 0978 03       		.byte	0x3
 2446 0979 00000000 		.4byte	CapSense_sensorBaseline
 2447 097d 1A       		.uleb128 0x1a
 2448 097e CF020000 		.4byte	.LASF71
 2449 0982 01       		.byte	0x1
 2450 0983 35       		.byte	0x35
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 93


 2451 0984 41090000 		.4byte	0x941
 2452 0988 05       		.uleb128 0x5
 2453 0989 03       		.byte	0x3
 2454 098a 00000000 		.4byte	CapSense_sensorBaselineLow
 2455 098e 1A       		.uleb128 0x1a
 2456 098f F7000000 		.4byte	.LASF72
 2457 0993 01       		.byte	0x1
 2458 0994 36       		.byte	0x36
 2459 0995 26090000 		.4byte	0x926
 2460 0999 05       		.uleb128 0x5
 2461 099a 03       		.byte	0x3
 2462 099b 00000000 		.4byte	CapSense_sensorSignal
 2463 099f 1A       		.uleb128 0x1a
 2464 09a0 41000000 		.4byte	.LASF73
 2465 09a4 01       		.byte	0x1
 2466 09a5 37       		.byte	0x37
 2467 09a6 41090000 		.4byte	0x941
 2468 09aa 05       		.uleb128 0x5
 2469 09ab 03       		.byte	0x3
 2470 09ac 00000000 		.4byte	CapSense_sensorOnMask
 2471 09b0 1A       		.uleb128 0x1a
 2472 09b1 25060000 		.4byte	.LASF74
 2473 09b5 01       		.byte	0x1
 2474 09b6 39       		.byte	0x39
 2475 09b7 41090000 		.4byte	0x941
 2476 09bb 05       		.uleb128 0x5
 2477 09bc 03       		.byte	0x3
 2478 09bd 00000000 		.4byte	CapSense_lowBaselineResetCnt
 2479 09c1 1A       		.uleb128 0x1a
 2480 09c2 F4010000 		.4byte	.LASF75
 2481 09c6 01       		.byte	0x1
 2482 09c7 3A       		.byte	0x3a
 2483 09c8 41090000 		.4byte	0x941
 2484 09cc 05       		.uleb128 0x5
 2485 09cd 03       		.byte	0x3
 2486 09ce 00000000 		.4byte	CapSense_lowBaselineReset
 2487 09d2 1A       		.uleb128 0x1a
 2488 09d3 1D050000 		.4byte	.LASF76
 2489 09d7 01       		.byte	0x1
 2490 09d8 49       		.byte	0x49
 2491 09d9 26090000 		.4byte	0x926
 2492 09dd 05       		.uleb128 0x5
 2493 09de 03       		.byte	0x3
 2494 09df 00000000 		.4byte	CapSense_fingerThreshold
 2495 09e3 1A       		.uleb128 0x1a
 2496 09e4 77040000 		.4byte	.LASF77
 2497 09e8 01       		.byte	0x1
 2498 09e9 4D       		.byte	0x4d
 2499 09ea 26090000 		.4byte	0x926
 2500 09ee 05       		.uleb128 0x5
 2501 09ef 03       		.byte	0x3
 2502 09f0 00000000 		.4byte	CapSense_noiseThreshold
 2503 09f4 1A       		.uleb128 0x1a
 2504 09f5 AA070000 		.4byte	.LASF78
 2505 09f9 01       		.byte	0x1
 2506 09fa 51       		.byte	0x51
 2507 09fb 26090000 		.4byte	0x926
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 94


 2508 09ff 05       		.uleb128 0x5
 2509 0a00 03       		.byte	0x3
 2510 0a01 00000000 		.4byte	CapSense_negativeNoiseThreshold
 2511 0a05 1A       		.uleb128 0x1a
 2512 0a06 17000000 		.4byte	.LASF79
 2513 0a0a 01       		.byte	0x1
 2514 0a0b 55       		.byte	0x55
 2515 0a0c 26090000 		.4byte	0x926
 2516 0a10 05       		.uleb128 0x5
 2517 0a11 03       		.byte	0x3
 2518 0a12 00000000 		.4byte	CapSense_hysteresis
 2519 0a16 1A       		.uleb128 0x1a
 2520 0a17 0D030000 		.4byte	.LASF80
 2521 0a1b 01       		.byte	0x1
 2522 0a1c 59       		.byte	0x59
 2523 0a1d 41090000 		.4byte	0x941
 2524 0a21 05       		.uleb128 0x5
 2525 0a22 03       		.byte	0x3
 2526 0a23 00000000 		.4byte	CapSense_debounce
 2527 0a27 1A       		.uleb128 0x1a
 2528 0a28 2B000000 		.4byte	.LASF81
 2529 0a2c 01       		.byte	0x1
 2530 0a2d 61       		.byte	0x61
 2531 0a2e 380A0000 		.4byte	0xa38
 2532 0a32 05       		.uleb128 0x5
 2533 0a33 03       		.byte	0x3
 2534 0a34 00000000 		.4byte	CapSense_rawDataIndex
 2535 0a38 06       		.uleb128 0x6
 2536 0a39 41090000 		.4byte	0x941
 2537 0a3d 1A       		.uleb128 0x1a
 2538 0a3e 58030000 		.4byte	.LASF82
 2539 0a42 01       		.byte	0x1
 2540 0a43 65       		.byte	0x65
 2541 0a44 4E0A0000 		.4byte	0xa4e
 2542 0a48 05       		.uleb128 0x5
 2543 0a49 03       		.byte	0x3
 2544 0a4a 00000000 		.4byte	CapSense_numberOfSensors
 2545 0a4e 06       		.uleb128 0x6
 2546 0a4f 41090000 		.4byte	0x941
 2547 0a53 1B       		.uleb128 0x1b
 2548 0a54 9C020000 		.4byte	.LASF86
 2549 0a58 03       		.byte	0x3
 2550 0a59 9C       		.byte	0x9c
 2551 0a5a 640A0000 		.4byte	0xa64
 2552 0a5e 1C       		.uleb128 0x1c
 2553 0a5f 81000000 		.4byte	0x81
 2554 0a63 00       		.byte	0
 2555 0a64 1D       		.uleb128 0x1d
 2556 0a65 9A070000 		.4byte	.LASF87
 2557 0a69 03       		.byte	0x3
 2558 0a6a 9B       		.byte	0x9b
 2559 0a6b 81000000 		.4byte	0x81
 2560 0a6f 1E       		.uleb128 0x1e
 2561 0a70 5D070000 		.4byte	.LASF88
 2562 0a74 03       		.byte	0x3
 2563 0a75 9E       		.byte	0x9e
 2564 0a76 1F       		.uleb128 0x1f
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 95


 2565 0a77 2F070000 		.4byte	.LASF89
 2566 0a7b 04       		.byte	0x4
 2567 0a7c 61       		.byte	0x61
 2568 0a7d 81000000 		.4byte	0x81
 2569 0a81 900A0000 		.4byte	0xa90
 2570 0a85 1C       		.uleb128 0x1c
 2571 0a86 AE000000 		.4byte	0xae
 2572 0a8a 1C       		.uleb128 0x1c
 2573 0a8b 81000000 		.4byte	0x81
 2574 0a8f 00       		.byte	0
 2575 0a90 20       		.uleb128 0x20
 2576 0a91 36050000 		.4byte	.LASF90
 2577 0a95 04       		.byte	0x4
 2578 0a96 62       		.byte	0x62
 2579 0a97 1C       		.uleb128 0x1c
 2580 0a98 A8000000 		.4byte	0xa8
 2581 0a9c 1C       		.uleb128 0x1c
 2582 0a9d 81000000 		.4byte	0x81
 2583 0aa1 1C       		.uleb128 0x1c
 2584 0aa2 81000000 		.4byte	0x81
 2585 0aa6 00       		.byte	0
 2586 0aa7 00       		.byte	0
 2587              		.section	.debug_abbrev,"",%progbits
 2588              	.Ldebug_abbrev0:
 2589 0000 01       		.uleb128 0x1
 2590 0001 11       		.uleb128 0x11
 2591 0002 01       		.byte	0x1
 2592 0003 25       		.uleb128 0x25
 2593 0004 0E       		.uleb128 0xe
 2594 0005 13       		.uleb128 0x13
 2595 0006 0B       		.uleb128 0xb
 2596 0007 03       		.uleb128 0x3
 2597 0008 0E       		.uleb128 0xe
 2598 0009 1B       		.uleb128 0x1b
 2599 000a 0E       		.uleb128 0xe
 2600 000b 55       		.uleb128 0x55
 2601 000c 17       		.uleb128 0x17
 2602 000d 11       		.uleb128 0x11
 2603 000e 01       		.uleb128 0x1
 2604 000f 10       		.uleb128 0x10
 2605 0010 17       		.uleb128 0x17
 2606 0011 00       		.byte	0
 2607 0012 00       		.byte	0
 2608 0013 02       		.uleb128 0x2
 2609 0014 24       		.uleb128 0x24
 2610 0015 00       		.byte	0
 2611 0016 0B       		.uleb128 0xb
 2612 0017 0B       		.uleb128 0xb
 2613 0018 3E       		.uleb128 0x3e
 2614 0019 0B       		.uleb128 0xb
 2615 001a 03       		.uleb128 0x3
 2616 001b 0E       		.uleb128 0xe
 2617 001c 00       		.byte	0
 2618 001d 00       		.byte	0
 2619 001e 03       		.uleb128 0x3
 2620 001f 24       		.uleb128 0x24
 2621 0020 00       		.byte	0
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 96


 2622 0021 0B       		.uleb128 0xb
 2623 0022 0B       		.uleb128 0xb
 2624 0023 3E       		.uleb128 0x3e
 2625 0024 0B       		.uleb128 0xb
 2626 0025 03       		.uleb128 0x3
 2627 0026 08       		.uleb128 0x8
 2628 0027 00       		.byte	0
 2629 0028 00       		.byte	0
 2630 0029 04       		.uleb128 0x4
 2631 002a 16       		.uleb128 0x16
 2632 002b 00       		.byte	0
 2633 002c 03       		.uleb128 0x3
 2634 002d 0E       		.uleb128 0xe
 2635 002e 3A       		.uleb128 0x3a
 2636 002f 0B       		.uleb128 0xb
 2637 0030 3B       		.uleb128 0x3b
 2638 0031 0B       		.uleb128 0xb
 2639 0032 49       		.uleb128 0x49
 2640 0033 13       		.uleb128 0x13
 2641 0034 00       		.byte	0
 2642 0035 00       		.byte	0
 2643 0036 05       		.uleb128 0x5
 2644 0037 0F       		.uleb128 0xf
 2645 0038 00       		.byte	0
 2646 0039 0B       		.uleb128 0xb
 2647 003a 0B       		.uleb128 0xb
 2648 003b 49       		.uleb128 0x49
 2649 003c 13       		.uleb128 0x13
 2650 003d 00       		.byte	0
 2651 003e 00       		.byte	0
 2652 003f 06       		.uleb128 0x6
 2653 0040 26       		.uleb128 0x26
 2654 0041 00       		.byte	0
 2655 0042 49       		.uleb128 0x49
 2656 0043 13       		.uleb128 0x13
 2657 0044 00       		.byte	0
 2658 0045 00       		.byte	0
 2659 0046 07       		.uleb128 0x7
 2660 0047 2E       		.uleb128 0x2e
 2661 0048 01       		.byte	0x1
 2662 0049 3F       		.uleb128 0x3f
 2663 004a 19       		.uleb128 0x19
 2664 004b 03       		.uleb128 0x3
 2665 004c 0E       		.uleb128 0xe
 2666 004d 3A       		.uleb128 0x3a
 2667 004e 0B       		.uleb128 0xb
 2668 004f 3B       		.uleb128 0x3b
 2669 0050 0B       		.uleb128 0xb
 2670 0051 27       		.uleb128 0x27
 2671 0052 19       		.uleb128 0x19
 2672 0053 11       		.uleb128 0x11
 2673 0054 01       		.uleb128 0x1
 2674 0055 12       		.uleb128 0x12
 2675 0056 06       		.uleb128 0x6
 2676 0057 40       		.uleb128 0x40
 2677 0058 18       		.uleb128 0x18
 2678 0059 9742     		.uleb128 0x2117
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 97


 2679 005b 19       		.uleb128 0x19
 2680 005c 01       		.uleb128 0x1
 2681 005d 13       		.uleb128 0x13
 2682 005e 00       		.byte	0
 2683 005f 00       		.byte	0
 2684 0060 08       		.uleb128 0x8
 2685 0061 05       		.uleb128 0x5
 2686 0062 00       		.byte	0
 2687 0063 03       		.uleb128 0x3
 2688 0064 0E       		.uleb128 0xe
 2689 0065 3A       		.uleb128 0x3a
 2690 0066 0B       		.uleb128 0xb
 2691 0067 3B       		.uleb128 0x3b
 2692 0068 0B       		.uleb128 0xb
 2693 0069 49       		.uleb128 0x49
 2694 006a 13       		.uleb128 0x13
 2695 006b 02       		.uleb128 0x2
 2696 006c 17       		.uleb128 0x17
 2697 006d 00       		.byte	0
 2698 006e 00       		.byte	0
 2699 006f 09       		.uleb128 0x9
 2700 0070 34       		.uleb128 0x34
 2701 0071 00       		.byte	0
 2702 0072 03       		.uleb128 0x3
 2703 0073 0E       		.uleb128 0xe
 2704 0074 3A       		.uleb128 0x3a
 2705 0075 0B       		.uleb128 0xb
 2706 0076 3B       		.uleb128 0x3b
 2707 0077 0B       		.uleb128 0xb
 2708 0078 49       		.uleb128 0x49
 2709 0079 13       		.uleb128 0x13
 2710 007a 02       		.uleb128 0x2
 2711 007b 17       		.uleb128 0x17
 2712 007c 00       		.byte	0
 2713 007d 00       		.byte	0
 2714 007e 0A       		.uleb128 0xa
 2715 007f 898201   		.uleb128 0x4109
 2716 0082 01       		.byte	0x1
 2717 0083 11       		.uleb128 0x11
 2718 0084 01       		.uleb128 0x1
 2719 0085 31       		.uleb128 0x31
 2720 0086 13       		.uleb128 0x13
 2721 0087 01       		.uleb128 0x1
 2722 0088 13       		.uleb128 0x13
 2723 0089 00       		.byte	0
 2724 008a 00       		.byte	0
 2725 008b 0B       		.uleb128 0xb
 2726 008c 8A8201   		.uleb128 0x410a
 2727 008f 00       		.byte	0
 2728 0090 02       		.uleb128 0x2
 2729 0091 18       		.uleb128 0x18
 2730 0092 9142     		.uleb128 0x2111
 2731 0094 18       		.uleb128 0x18
 2732 0095 00       		.byte	0
 2733 0096 00       		.byte	0
 2734 0097 0C       		.uleb128 0xc
 2735 0098 898201   		.uleb128 0x4109
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 98


 2736 009b 00       		.byte	0
 2737 009c 11       		.uleb128 0x11
 2738 009d 01       		.uleb128 0x1
 2739 009e 31       		.uleb128 0x31
 2740 009f 13       		.uleb128 0x13
 2741 00a0 00       		.byte	0
 2742 00a1 00       		.byte	0
 2743 00a2 0D       		.uleb128 0xd
 2744 00a3 898201   		.uleb128 0x4109
 2745 00a6 01       		.byte	0x1
 2746 00a7 11       		.uleb128 0x11
 2747 00a8 01       		.uleb128 0x1
 2748 00a9 31       		.uleb128 0x31
 2749 00aa 13       		.uleb128 0x13
 2750 00ab 00       		.byte	0
 2751 00ac 00       		.byte	0
 2752 00ad 0E       		.uleb128 0xe
 2753 00ae 34       		.uleb128 0x34
 2754 00af 00       		.byte	0
 2755 00b0 03       		.uleb128 0x3
 2756 00b1 08       		.uleb128 0x8
 2757 00b2 3A       		.uleb128 0x3a
 2758 00b3 0B       		.uleb128 0xb
 2759 00b4 3B       		.uleb128 0x3b
 2760 00b5 05       		.uleb128 0x5
 2761 00b6 49       		.uleb128 0x49
 2762 00b7 13       		.uleb128 0x13
 2763 00b8 02       		.uleb128 0x2
 2764 00b9 17       		.uleb128 0x17
 2765 00ba 00       		.byte	0
 2766 00bb 00       		.byte	0
 2767 00bc 0F       		.uleb128 0xf
 2768 00bd 2E       		.uleb128 0x2e
 2769 00be 01       		.byte	0x1
 2770 00bf 3F       		.uleb128 0x3f
 2771 00c0 19       		.uleb128 0x19
 2772 00c1 03       		.uleb128 0x3
 2773 00c2 0E       		.uleb128 0xe
 2774 00c3 3A       		.uleb128 0x3a
 2775 00c4 0B       		.uleb128 0xb
 2776 00c5 3B       		.uleb128 0x3b
 2777 00c6 05       		.uleb128 0x5
 2778 00c7 27       		.uleb128 0x27
 2779 00c8 19       		.uleb128 0x19
 2780 00c9 11       		.uleb128 0x11
 2781 00ca 01       		.uleb128 0x1
 2782 00cb 12       		.uleb128 0x12
 2783 00cc 06       		.uleb128 0x6
 2784 00cd 40       		.uleb128 0x40
 2785 00ce 18       		.uleb128 0x18
 2786 00cf 9742     		.uleb128 0x2117
 2787 00d1 19       		.uleb128 0x19
 2788 00d2 01       		.uleb128 0x1
 2789 00d3 13       		.uleb128 0x13
 2790 00d4 00       		.byte	0
 2791 00d5 00       		.byte	0
 2792 00d6 10       		.uleb128 0x10
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 99


 2793 00d7 34       		.uleb128 0x34
 2794 00d8 00       		.byte	0
 2795 00d9 03       		.uleb128 0x3
 2796 00da 0E       		.uleb128 0xe
 2797 00db 3A       		.uleb128 0x3a
 2798 00dc 0B       		.uleb128 0xb
 2799 00dd 3B       		.uleb128 0x3b
 2800 00de 05       		.uleb128 0x5
 2801 00df 49       		.uleb128 0x49
 2802 00e0 13       		.uleb128 0x13
 2803 00e1 02       		.uleb128 0x2
 2804 00e2 17       		.uleb128 0x17
 2805 00e3 00       		.byte	0
 2806 00e4 00       		.byte	0
 2807 00e5 11       		.uleb128 0x11
 2808 00e6 05       		.uleb128 0x5
 2809 00e7 00       		.byte	0
 2810 00e8 03       		.uleb128 0x3
 2811 00e9 0E       		.uleb128 0xe
 2812 00ea 3A       		.uleb128 0x3a
 2813 00eb 0B       		.uleb128 0xb
 2814 00ec 3B       		.uleb128 0x3b
 2815 00ed 05       		.uleb128 0x5
 2816 00ee 49       		.uleb128 0x49
 2817 00ef 13       		.uleb128 0x13
 2818 00f0 02       		.uleb128 0x2
 2819 00f1 17       		.uleb128 0x17
 2820 00f2 00       		.byte	0
 2821 00f3 00       		.byte	0
 2822 00f4 12       		.uleb128 0x12
 2823 00f5 34       		.uleb128 0x34
 2824 00f6 00       		.byte	0
 2825 00f7 03       		.uleb128 0x3
 2826 00f8 0E       		.uleb128 0xe
 2827 00f9 3A       		.uleb128 0x3a
 2828 00fa 0B       		.uleb128 0xb
 2829 00fb 3B       		.uleb128 0x3b
 2830 00fc 05       		.uleb128 0x5
 2831 00fd 49       		.uleb128 0x49
 2832 00fe 13       		.uleb128 0x13
 2833 00ff 00       		.byte	0
 2834 0100 00       		.byte	0
 2835 0101 13       		.uleb128 0x13
 2836 0102 34       		.uleb128 0x34
 2837 0103 00       		.byte	0
 2838 0104 03       		.uleb128 0x3
 2839 0105 0E       		.uleb128 0xe
 2840 0106 3A       		.uleb128 0x3a
 2841 0107 0B       		.uleb128 0xb
 2842 0108 3B       		.uleb128 0x3b
 2843 0109 05       		.uleb128 0x5
 2844 010a 49       		.uleb128 0x49
 2845 010b 13       		.uleb128 0x13
 2846 010c 1C       		.uleb128 0x1c
 2847 010d 0B       		.uleb128 0xb
 2848 010e 00       		.byte	0
 2849 010f 00       		.byte	0
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 100


 2850 0110 14       		.uleb128 0x14
 2851 0111 2E       		.uleb128 0x2e
 2852 0112 01       		.byte	0x1
 2853 0113 3F       		.uleb128 0x3f
 2854 0114 19       		.uleb128 0x19
 2855 0115 03       		.uleb128 0x3
 2856 0116 0E       		.uleb128 0xe
 2857 0117 3A       		.uleb128 0x3a
 2858 0118 0B       		.uleb128 0xb
 2859 0119 3B       		.uleb128 0x3b
 2860 011a 05       		.uleb128 0x5
 2861 011b 27       		.uleb128 0x27
 2862 011c 19       		.uleb128 0x19
 2863 011d 49       		.uleb128 0x49
 2864 011e 13       		.uleb128 0x13
 2865 011f 11       		.uleb128 0x11
 2866 0120 01       		.uleb128 0x1
 2867 0121 12       		.uleb128 0x12
 2868 0122 06       		.uleb128 0x6
 2869 0123 40       		.uleb128 0x40
 2870 0124 18       		.uleb128 0x18
 2871 0125 9742     		.uleb128 0x2117
 2872 0127 19       		.uleb128 0x19
 2873 0128 01       		.uleb128 0x1
 2874 0129 13       		.uleb128 0x13
 2875 012a 00       		.byte	0
 2876 012b 00       		.byte	0
 2877 012c 15       		.uleb128 0x15
 2878 012d 05       		.uleb128 0x5
 2879 012e 00       		.byte	0
 2880 012f 03       		.uleb128 0x3
 2881 0130 0E       		.uleb128 0xe
 2882 0131 3A       		.uleb128 0x3a
 2883 0132 0B       		.uleb128 0xb
 2884 0133 3B       		.uleb128 0x3b
 2885 0134 05       		.uleb128 0x5
 2886 0135 49       		.uleb128 0x49
 2887 0136 13       		.uleb128 0x13
 2888 0137 02       		.uleb128 0x2
 2889 0138 18       		.uleb128 0x18
 2890 0139 00       		.byte	0
 2891 013a 00       		.byte	0
 2892 013b 16       		.uleb128 0x16
 2893 013c 01       		.uleb128 0x1
 2894 013d 01       		.byte	0x1
 2895 013e 49       		.uleb128 0x49
 2896 013f 13       		.uleb128 0x13
 2897 0140 01       		.uleb128 0x1
 2898 0141 13       		.uleb128 0x13
 2899 0142 00       		.byte	0
 2900 0143 00       		.byte	0
 2901 0144 17       		.uleb128 0x17
 2902 0145 21       		.uleb128 0x21
 2903 0146 00       		.byte	0
 2904 0147 49       		.uleb128 0x49
 2905 0148 13       		.uleb128 0x13
 2906 0149 2F       		.uleb128 0x2f
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 101


 2907 014a 0B       		.uleb128 0xb
 2908 014b 00       		.byte	0
 2909 014c 00       		.byte	0
 2910 014d 18       		.uleb128 0x18
 2911 014e 34       		.uleb128 0x34
 2912 014f 00       		.byte	0
 2913 0150 03       		.uleb128 0x3
 2914 0151 0E       		.uleb128 0xe
 2915 0152 3A       		.uleb128 0x3a
 2916 0153 0B       		.uleb128 0xb
 2917 0154 3B       		.uleb128 0x3b
 2918 0155 0B       		.uleb128 0xb
 2919 0156 49       		.uleb128 0x49
 2920 0157 13       		.uleb128 0x13
 2921 0158 02       		.uleb128 0x2
 2922 0159 18       		.uleb128 0x18
 2923 015a 00       		.byte	0
 2924 015b 00       		.byte	0
 2925 015c 19       		.uleb128 0x19
 2926 015d 34       		.uleb128 0x34
 2927 015e 00       		.byte	0
 2928 015f 03       		.uleb128 0x3
 2929 0160 0E       		.uleb128 0xe
 2930 0161 3A       		.uleb128 0x3a
 2931 0162 0B       		.uleb128 0xb
 2932 0163 3B       		.uleb128 0x3b
 2933 0164 0B       		.uleb128 0xb
 2934 0165 49       		.uleb128 0x49
 2935 0166 13       		.uleb128 0x13
 2936 0167 3F       		.uleb128 0x3f
 2937 0168 19       		.uleb128 0x19
 2938 0169 3C       		.uleb128 0x3c
 2939 016a 19       		.uleb128 0x19
 2940 016b 00       		.byte	0
 2941 016c 00       		.byte	0
 2942 016d 1A       		.uleb128 0x1a
 2943 016e 34       		.uleb128 0x34
 2944 016f 00       		.byte	0
 2945 0170 03       		.uleb128 0x3
 2946 0171 0E       		.uleb128 0xe
 2947 0172 3A       		.uleb128 0x3a
 2948 0173 0B       		.uleb128 0xb
 2949 0174 3B       		.uleb128 0x3b
 2950 0175 0B       		.uleb128 0xb
 2951 0176 49       		.uleb128 0x49
 2952 0177 13       		.uleb128 0x13
 2953 0178 3F       		.uleb128 0x3f
 2954 0179 19       		.uleb128 0x19
 2955 017a 02       		.uleb128 0x2
 2956 017b 18       		.uleb128 0x18
 2957 017c 00       		.byte	0
 2958 017d 00       		.byte	0
 2959 017e 1B       		.uleb128 0x1b
 2960 017f 2E       		.uleb128 0x2e
 2961 0180 01       		.byte	0x1
 2962 0181 3F       		.uleb128 0x3f
 2963 0182 19       		.uleb128 0x19
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 102


 2964 0183 03       		.uleb128 0x3
 2965 0184 0E       		.uleb128 0xe
 2966 0185 3A       		.uleb128 0x3a
 2967 0186 0B       		.uleb128 0xb
 2968 0187 3B       		.uleb128 0x3b
 2969 0188 0B       		.uleb128 0xb
 2970 0189 27       		.uleb128 0x27
 2971 018a 19       		.uleb128 0x19
 2972 018b 3C       		.uleb128 0x3c
 2973 018c 19       		.uleb128 0x19
 2974 018d 01       		.uleb128 0x1
 2975 018e 13       		.uleb128 0x13
 2976 018f 00       		.byte	0
 2977 0190 00       		.byte	0
 2978 0191 1C       		.uleb128 0x1c
 2979 0192 05       		.uleb128 0x5
 2980 0193 00       		.byte	0
 2981 0194 49       		.uleb128 0x49
 2982 0195 13       		.uleb128 0x13
 2983 0196 00       		.byte	0
 2984 0197 00       		.byte	0
 2985 0198 1D       		.uleb128 0x1d
 2986 0199 2E       		.uleb128 0x2e
 2987 019a 00       		.byte	0
 2988 019b 3F       		.uleb128 0x3f
 2989 019c 19       		.uleb128 0x19
 2990 019d 03       		.uleb128 0x3
 2991 019e 0E       		.uleb128 0xe
 2992 019f 3A       		.uleb128 0x3a
 2993 01a0 0B       		.uleb128 0xb
 2994 01a1 3B       		.uleb128 0x3b
 2995 01a2 0B       		.uleb128 0xb
 2996 01a3 27       		.uleb128 0x27
 2997 01a4 19       		.uleb128 0x19
 2998 01a5 49       		.uleb128 0x49
 2999 01a6 13       		.uleb128 0x13
 3000 01a7 3C       		.uleb128 0x3c
 3001 01a8 19       		.uleb128 0x19
 3002 01a9 00       		.byte	0
 3003 01aa 00       		.byte	0
 3004 01ab 1E       		.uleb128 0x1e
 3005 01ac 2E       		.uleb128 0x2e
 3006 01ad 00       		.byte	0
 3007 01ae 3F       		.uleb128 0x3f
 3008 01af 19       		.uleb128 0x19
 3009 01b0 03       		.uleb128 0x3
 3010 01b1 0E       		.uleb128 0xe
 3011 01b2 3A       		.uleb128 0x3a
 3012 01b3 0B       		.uleb128 0xb
 3013 01b4 3B       		.uleb128 0x3b
 3014 01b5 0B       		.uleb128 0xb
 3015 01b6 27       		.uleb128 0x27
 3016 01b7 19       		.uleb128 0x19
 3017 01b8 3C       		.uleb128 0x3c
 3018 01b9 19       		.uleb128 0x19
 3019 01ba 00       		.byte	0
 3020 01bb 00       		.byte	0
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 103


 3021 01bc 1F       		.uleb128 0x1f
 3022 01bd 2E       		.uleb128 0x2e
 3023 01be 01       		.byte	0x1
 3024 01bf 3F       		.uleb128 0x3f
 3025 01c0 19       		.uleb128 0x19
 3026 01c1 03       		.uleb128 0x3
 3027 01c2 0E       		.uleb128 0xe
 3028 01c3 3A       		.uleb128 0x3a
 3029 01c4 0B       		.uleb128 0xb
 3030 01c5 3B       		.uleb128 0x3b
 3031 01c6 0B       		.uleb128 0xb
 3032 01c7 27       		.uleb128 0x27
 3033 01c8 19       		.uleb128 0x19
 3034 01c9 49       		.uleb128 0x49
 3035 01ca 13       		.uleb128 0x13
 3036 01cb 3C       		.uleb128 0x3c
 3037 01cc 19       		.uleb128 0x19
 3038 01cd 01       		.uleb128 0x1
 3039 01ce 13       		.uleb128 0x13
 3040 01cf 00       		.byte	0
 3041 01d0 00       		.byte	0
 3042 01d1 20       		.uleb128 0x20
 3043 01d2 2E       		.uleb128 0x2e
 3044 01d3 01       		.byte	0x1
 3045 01d4 3F       		.uleb128 0x3f
 3046 01d5 19       		.uleb128 0x19
 3047 01d6 03       		.uleb128 0x3
 3048 01d7 0E       		.uleb128 0xe
 3049 01d8 3A       		.uleb128 0x3a
 3050 01d9 0B       		.uleb128 0xb
 3051 01da 3B       		.uleb128 0x3b
 3052 01db 0B       		.uleb128 0xb
 3053 01dc 27       		.uleb128 0x27
 3054 01dd 19       		.uleb128 0x19
 3055 01de 3C       		.uleb128 0x3c
 3056 01df 19       		.uleb128 0x19
 3057 01e0 00       		.byte	0
 3058 01e1 00       		.byte	0
 3059 01e2 00       		.byte	0
 3060              		.section	.debug_loc,"",%progbits
 3061              	.Ldebug_loc0:
 3062              	.LLST0:
 3063 0000 00000000 		.4byte	.LVL0
 3064 0004 12000000 		.4byte	.LVL2
 3065 0008 0100     		.2byte	0x1
 3066 000a 50       		.byte	0x50
 3067 000b 12000000 		.4byte	.LVL2
 3068 000f 34000000 		.4byte	.LFE34
 3069 0013 0400     		.2byte	0x4
 3070 0015 F3       		.byte	0xf3
 3071 0016 01       		.uleb128 0x1
 3072 0017 50       		.byte	0x50
 3073 0018 9F       		.byte	0x9f
 3074 0019 00000000 		.4byte	0
 3075 001d 00000000 		.4byte	0
 3076              	.LLST1:
 3077 0021 06000000 		.4byte	.LVL1
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 104


 3078 0025 20000000 		.4byte	.LVL3
 3079 0029 0100     		.2byte	0x1
 3080 002b 52       		.byte	0x52
 3081 002c 00000000 		.4byte	0
 3082 0030 00000000 		.4byte	0
 3083              	.LLST2:
 3084 0034 00000000 		.4byte	.LVL4
 3085 0038 07000000 		.4byte	.LVL5-1
 3086 003c 0100     		.2byte	0x1
 3087 003e 50       		.byte	0x50
 3088 003f 07000000 		.4byte	.LVL5-1
 3089 0043 16000000 		.4byte	.LVL8
 3090 0047 0100     		.2byte	0x1
 3091 0049 54       		.byte	0x54
 3092 004a 16000000 		.4byte	.LVL8
 3093 004e 18000000 		.4byte	.LFE35
 3094 0052 0400     		.2byte	0x4
 3095 0054 F3       		.byte	0xf3
 3096 0055 01       		.uleb128 0x1
 3097 0056 50       		.byte	0x50
 3098 0057 9F       		.byte	0x9f
 3099 0058 00000000 		.4byte	0
 3100 005c 00000000 		.4byte	0
 3101              	.LLST3:
 3102 0060 02000000 		.4byte	.LVL9
 3103 0064 06000000 		.4byte	.LVL10
 3104 0068 0200     		.2byte	0x2
 3105 006a 30       		.byte	0x30
 3106 006b 9F       		.byte	0x9f
 3107 006c 06000000 		.4byte	.LVL10
 3108 0070 12000000 		.4byte	.LVL13
 3109 0074 0100     		.2byte	0x1
 3110 0076 54       		.byte	0x54
 3111 0077 00000000 		.4byte	0
 3112 007b 00000000 		.4byte	0
 3113              	.LLST4:
 3114 007f 12000000 		.4byte	.LVL16
 3115 0083 2A000000 		.4byte	.LVL21
 3116 0087 0100     		.2byte	0x1
 3117 0089 54       		.byte	0x54
 3118 008a 00000000 		.4byte	0
 3119 008e 00000000 		.4byte	0
 3120              	.LLST5:
 3121 0092 1A000000 		.4byte	.LVL17
 3122 0096 20000000 		.4byte	.LVL18
 3123 009a 0100     		.2byte	0x1
 3124 009c 50       		.byte	0x50
 3125 009d 00000000 		.4byte	0
 3126 00a1 00000000 		.4byte	0
 3127              	.LLST6:
 3128 00a5 00000000 		.4byte	.LVL22
 3129 00a9 1C000000 		.4byte	.LVL24
 3130 00ad 0100     		.2byte	0x1
 3131 00af 50       		.byte	0x50
 3132 00b0 1C000000 		.4byte	.LVL24
 3133 00b4 B6000000 		.4byte	.LVL39
 3134 00b8 0100     		.2byte	0x1
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 105


 3135 00ba 54       		.byte	0x54
 3136 00bb B6000000 		.4byte	.LVL39
 3137 00bf BE000000 		.4byte	.LVL40
 3138 00c3 0400     		.2byte	0x4
 3139 00c5 F3       		.byte	0xf3
 3140 00c6 01       		.uleb128 0x1
 3141 00c7 50       		.byte	0x50
 3142 00c8 9F       		.byte	0x9f
 3143 00c9 BE000000 		.4byte	.LVL40
 3144 00cd C0000000 		.4byte	.LVL41
 3145 00d1 0100     		.2byte	0x1
 3146 00d3 54       		.byte	0x54
 3147 00d4 C0000000 		.4byte	.LVL41
 3148 00d8 E4000000 		.4byte	.LFE38
 3149 00dc 0400     		.2byte	0x4
 3150 00de F3       		.byte	0xf3
 3151 00df 01       		.uleb128 0x1
 3152 00e0 50       		.byte	0x50
 3153 00e1 9F       		.byte	0x9f
 3154 00e2 00000000 		.4byte	0
 3155 00e6 00000000 		.4byte	0
 3156              	.LLST7:
 3157 00ea 88000000 		.4byte	.LVL32
 3158 00ee 96000000 		.4byte	.LVL33
 3159 00f2 0100     		.2byte	0x1
 3160 00f4 52       		.byte	0x52
 3161 00f5 96000000 		.4byte	.LVL33
 3162 00f9 AA000000 		.4byte	.LVL37
 3163 00fd 0100     		.2byte	0x1
 3164 00ff 53       		.byte	0x53
 3165 0100 00000000 		.4byte	0
 3166 0104 00000000 		.4byte	0
 3167              	.LLST8:
 3168 0108 2E000000 		.4byte	.LVL25
 3169 010c 32000000 		.4byte	.LVL26
 3170 0110 0200     		.2byte	0x2
 3171 0112 31       		.byte	0x31
 3172 0113 9F       		.byte	0x9f
 3173 0114 36000000 		.4byte	.LVL27
 3174 0118 38000000 		.4byte	.LVL28
 3175 011c 0200     		.2byte	0x2
 3176 011e 30       		.byte	0x30
 3177 011f 9F       		.byte	0x9f
 3178 0120 38000000 		.4byte	.LVL28
 3179 0124 CA000000 		.4byte	.LVL44
 3180 0128 0100     		.2byte	0x1
 3181 012a 57       		.byte	0x57
 3182 012b 00000000 		.4byte	0
 3183 012f 00000000 		.4byte	0
 3184              	.LLST9:
 3185 0133 2E000000 		.4byte	.LVL25
 3186 0137 32000000 		.4byte	.LVL26
 3187 013b 0100     		.2byte	0x1
 3188 013d 55       		.byte	0x55
 3189 013e 36000000 		.4byte	.LVL27
 3190 0142 CA000000 		.4byte	.LVL42
 3191 0146 0100     		.2byte	0x1
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 106


 3192 0148 55       		.byte	0x55
 3193 0149 00000000 		.4byte	0
 3194 014d 00000000 		.4byte	0
 3195              	.LLST10:
 3196 0151 1C000000 		.4byte	.LVL24
 3197 0155 5E000000 		.4byte	.LVL29
 3198 0159 0100     		.2byte	0x1
 3199 015b 50       		.byte	0x50
 3200 015c 6A000000 		.4byte	.LVL31
 3201 0160 A0000000 		.4byte	.LVL36
 3202 0164 0100     		.2byte	0x1
 3203 0166 50       		.byte	0x50
 3204 0167 00000000 		.4byte	0
 3205 016b 00000000 		.4byte	0
 3206              	.LLST11:
 3207 016f 16000000 		.4byte	.LVL23
 3208 0173 CA000000 		.4byte	.LVL43
 3209 0177 0100     		.2byte	0x1
 3210 0179 56       		.byte	0x56
 3211 017a 00000000 		.4byte	0
 3212 017e 00000000 		.4byte	0
 3213              	.LLST12:
 3214 0182 00000000 		.4byte	.LVL45
 3215 0186 05000000 		.4byte	.LVL46-1
 3216 018a 0100     		.2byte	0x1
 3217 018c 50       		.byte	0x50
 3218 018d 05000000 		.4byte	.LVL46-1
 3219 0191 08000000 		.4byte	.LFE39
 3220 0195 0400     		.2byte	0x4
 3221 0197 F3       		.byte	0xf3
 3222 0198 01       		.uleb128 0x1
 3223 0199 50       		.byte	0x50
 3224 019a 9F       		.byte	0x9f
 3225 019b 00000000 		.4byte	0
 3226 019f 00000000 		.4byte	0
 3227              	.LLST13:
 3228 01a3 02000000 		.4byte	.LVL47
 3229 01a7 06000000 		.4byte	.LVL48
 3230 01ab 0200     		.2byte	0x2
 3231 01ad 30       		.byte	0x30
 3232 01ae 9F       		.byte	0x9f
 3233 01af 06000000 		.4byte	.LVL48
 3234 01b3 1E000000 		.4byte	.LVL53
 3235 01b7 0100     		.2byte	0x1
 3236 01b9 54       		.byte	0x54
 3237 01ba 00000000 		.4byte	0
 3238 01be 00000000 		.4byte	0
 3239              	.LLST14:
 3240 01c2 0E000000 		.4byte	.LVL49
 3241 01c6 14000000 		.4byte	.LVL50
 3242 01ca 0100     		.2byte	0x1
 3243 01cc 50       		.byte	0x50
 3244 01cd 00000000 		.4byte	0
 3245 01d1 00000000 		.4byte	0
 3246              	.LLST15:
 3247 01d5 00000000 		.4byte	.LVL54
 3248 01d9 06000000 		.4byte	.LVL56
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 107


 3249 01dd 0100     		.2byte	0x1
 3250 01df 50       		.byte	0x50
 3251 01e0 06000000 		.4byte	.LVL56
 3252 01e4 24000000 		.4byte	.LFE41
 3253 01e8 0400     		.2byte	0x4
 3254 01ea F3       		.byte	0xf3
 3255 01eb 01       		.uleb128 0x1
 3256 01ec 50       		.byte	0x50
 3257 01ed 9F       		.byte	0x9f
 3258 01ee 00000000 		.4byte	0
 3259 01f2 00000000 		.4byte	0
 3260              	.LLST16:
 3261 01f6 02000000 		.4byte	.LVL55
 3262 01fa 06000000 		.4byte	.LVL56
 3263 01fe 0200     		.2byte	0x2
 3264 0200 30       		.byte	0x30
 3265 0201 9F       		.byte	0x9f
 3266 0202 06000000 		.4byte	.LVL56
 3267 0206 1E000000 		.4byte	.LVL61
 3268 020a 0100     		.2byte	0x1
 3269 020c 54       		.byte	0x54
 3270 020d 00000000 		.4byte	0
 3271 0211 00000000 		.4byte	0
 3272              	.LLST17:
 3273 0215 0E000000 		.4byte	.LVL57
 3274 0219 14000000 		.4byte	.LVL58
 3275 021d 0100     		.2byte	0x1
 3276 021f 50       		.byte	0x50
 3277 0220 00000000 		.4byte	0
 3278 0224 00000000 		.4byte	0
 3279              	.LLST18:
 3280 0228 00000000 		.4byte	.LVL62
 3281 022c 02000000 		.4byte	.LVL63
 3282 0230 0100     		.2byte	0x1
 3283 0232 50       		.byte	0x50
 3284 0233 02000000 		.4byte	.LVL63
 3285 0237 0C000000 		.4byte	.LFE42
 3286 023b 0400     		.2byte	0x4
 3287 023d F3       		.byte	0xf3
 3288 023e 01       		.uleb128 0x1
 3289 023f 50       		.byte	0x50
 3290 0240 9F       		.byte	0x9f
 3291 0241 00000000 		.4byte	0
 3292 0245 00000000 		.4byte	0
 3293              	.LLST19:
 3294 0249 00000000 		.4byte	.LVL64
 3295 024d 02000000 		.4byte	.LVL65
 3296 0251 0100     		.2byte	0x1
 3297 0253 50       		.byte	0x50
 3298 0254 02000000 		.4byte	.LVL65
 3299 0258 0C000000 		.4byte	.LFE43
 3300 025c 0400     		.2byte	0x4
 3301 025e F3       		.byte	0xf3
 3302 025f 01       		.uleb128 0x1
 3303 0260 50       		.byte	0x50
 3304 0261 9F       		.byte	0x9f
 3305 0262 00000000 		.4byte	0
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 108


 3306 0266 00000000 		.4byte	0
 3307              	.LLST20:
 3308 026a 00000000 		.4byte	.LVL66
 3309 026e 02000000 		.4byte	.LVL67
 3310 0272 0100     		.2byte	0x1
 3311 0274 50       		.byte	0x50
 3312 0275 02000000 		.4byte	.LVL67
 3313 0279 10000000 		.4byte	.LFE44
 3314 027d 0400     		.2byte	0x4
 3315 027f F3       		.byte	0xf3
 3316 0280 01       		.uleb128 0x1
 3317 0281 50       		.byte	0x50
 3318 0282 9F       		.byte	0x9f
 3319 0283 00000000 		.4byte	0
 3320 0287 00000000 		.4byte	0
 3321              	.LLST21:
 3322 028b 00000000 		.4byte	.LVL68
 3323 028f 02000000 		.4byte	.LVL69
 3324 0293 0100     		.2byte	0x1
 3325 0295 50       		.byte	0x50
 3326 0296 02000000 		.4byte	.LVL69
 3327 029a 10000000 		.4byte	.LFE45
 3328 029e 0400     		.2byte	0x4
 3329 02a0 F3       		.byte	0xf3
 3330 02a1 01       		.uleb128 0x1
 3331 02a2 50       		.byte	0x50
 3332 02a3 9F       		.byte	0x9f
 3333 02a4 00000000 		.4byte	0
 3334 02a8 00000000 		.4byte	0
 3335              	.LLST22:
 3336 02ac 00000000 		.4byte	.LVL70
 3337 02b0 02000000 		.4byte	.LVL71
 3338 02b4 0100     		.2byte	0x1
 3339 02b6 50       		.byte	0x50
 3340 02b7 02000000 		.4byte	.LVL71
 3341 02bb 10000000 		.4byte	.LFE46
 3342 02bf 0400     		.2byte	0x4
 3343 02c1 F3       		.byte	0xf3
 3344 02c2 01       		.uleb128 0x1
 3345 02c3 50       		.byte	0x50
 3346 02c4 9F       		.byte	0x9f
 3347 02c5 00000000 		.4byte	0
 3348 02c9 00000000 		.4byte	0
 3349              	.LLST23:
 3350 02cd 00000000 		.4byte	.LVL72
 3351 02d1 02000000 		.4byte	.LVL73
 3352 02d5 0100     		.2byte	0x1
 3353 02d7 50       		.byte	0x50
 3354 02d8 02000000 		.4byte	.LVL73
 3355 02dc 10000000 		.4byte	.LFE47
 3356 02e0 0400     		.2byte	0x4
 3357 02e2 F3       		.byte	0xf3
 3358 02e3 01       		.uleb128 0x1
 3359 02e4 50       		.byte	0x50
 3360 02e5 9F       		.byte	0x9f
 3361 02e6 00000000 		.4byte	0
 3362 02ea 00000000 		.4byte	0
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 109


 3363              	.LLST24:
 3364 02ee 00000000 		.4byte	.LVL74
 3365 02f2 02000000 		.4byte	.LVL75
 3366 02f6 0100     		.2byte	0x1
 3367 02f8 50       		.byte	0x50
 3368 02f9 02000000 		.4byte	.LVL75
 3369 02fd 10000000 		.4byte	.LFE48
 3370 0301 0400     		.2byte	0x4
 3371 0303 F3       		.byte	0xf3
 3372 0304 01       		.uleb128 0x1
 3373 0305 50       		.byte	0x50
 3374 0306 9F       		.byte	0x9f
 3375 0307 00000000 		.4byte	0
 3376 030b 00000000 		.4byte	0
 3377              	.LLST25:
 3378 030f 00000000 		.4byte	.LVL76
 3379 0313 02000000 		.4byte	.LVL77
 3380 0317 0100     		.2byte	0x1
 3381 0319 50       		.byte	0x50
 3382 031a 02000000 		.4byte	.LVL77
 3383 031e 10000000 		.4byte	.LFE49
 3384 0322 0400     		.2byte	0x4
 3385 0324 F3       		.byte	0xf3
 3386 0325 01       		.uleb128 0x1
 3387 0326 50       		.byte	0x50
 3388 0327 9F       		.byte	0x9f
 3389 0328 00000000 		.4byte	0
 3390 032c 00000000 		.4byte	0
 3391              	.LLST26:
 3392 0330 00000000 		.4byte	.LVL78
 3393 0334 02000000 		.4byte	.LVL79
 3394 0338 0100     		.2byte	0x1
 3395 033a 50       		.byte	0x50
 3396 033b 02000000 		.4byte	.LVL79
 3397 033f 10000000 		.4byte	.LFE50
 3398 0343 0400     		.2byte	0x4
 3399 0345 F3       		.byte	0xf3
 3400 0346 01       		.uleb128 0x1
 3401 0347 50       		.byte	0x50
 3402 0348 9F       		.byte	0x9f
 3403 0349 00000000 		.4byte	0
 3404 034d 00000000 		.4byte	0
 3405              	.LLST27:
 3406 0351 00000000 		.4byte	.LVL80
 3407 0355 02000000 		.4byte	.LVL81
 3408 0359 0100     		.2byte	0x1
 3409 035b 50       		.byte	0x50
 3410 035c 02000000 		.4byte	.LVL81
 3411 0360 10000000 		.4byte	.LFE51
 3412 0364 0400     		.2byte	0x4
 3413 0366 F3       		.byte	0xf3
 3414 0367 01       		.uleb128 0x1
 3415 0368 50       		.byte	0x50
 3416 0369 9F       		.byte	0x9f
 3417 036a 00000000 		.4byte	0
 3418 036e 00000000 		.4byte	0
 3419              	.LLST28:
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 110


 3420 0372 00000000 		.4byte	.LVL82
 3421 0376 02000000 		.4byte	.LVL83
 3422 037a 0100     		.2byte	0x1
 3423 037c 50       		.byte	0x50
 3424 037d 02000000 		.4byte	.LVL83
 3425 0381 10000000 		.4byte	.LFE52
 3426 0385 0400     		.2byte	0x4
 3427 0387 F3       		.byte	0xf3
 3428 0388 01       		.uleb128 0x1
 3429 0389 50       		.byte	0x50
 3430 038a 9F       		.byte	0x9f
 3431 038b 00000000 		.4byte	0
 3432 038f 00000000 		.4byte	0
 3433              	.LLST29:
 3434 0393 00000000 		.4byte	.LVL84
 3435 0397 02000000 		.4byte	.LVL85
 3436 039b 0100     		.2byte	0x1
 3437 039d 50       		.byte	0x50
 3438 039e 02000000 		.4byte	.LVL85
 3439 03a2 10000000 		.4byte	.LFE53
 3440 03a6 0400     		.2byte	0x4
 3441 03a8 F3       		.byte	0xf3
 3442 03a9 01       		.uleb128 0x1
 3443 03aa 50       		.byte	0x50
 3444 03ab 9F       		.byte	0x9f
 3445 03ac 00000000 		.4byte	0
 3446 03b0 00000000 		.4byte	0
 3447              	.LLST30:
 3448 03b4 00000000 		.4byte	.LVL87
 3449 03b8 04000000 		.4byte	.LVL88
 3450 03bc 0100     		.2byte	0x1
 3451 03be 50       		.byte	0x50
 3452 03bf 04000000 		.4byte	.LVL88
 3453 03c3 0C000000 		.4byte	.LFE55
 3454 03c7 0400     		.2byte	0x4
 3455 03c9 F3       		.byte	0xf3
 3456 03ca 01       		.uleb128 0x1
 3457 03cb 50       		.byte	0x50
 3458 03cc 9F       		.byte	0x9f
 3459 03cd 00000000 		.4byte	0
 3460 03d1 00000000 		.4byte	0
 3461              	.LLST31:
 3462 03d5 00000000 		.4byte	.LVL89
 3463 03d9 1C000000 		.4byte	.LVL93
 3464 03dd 0100     		.2byte	0x1
 3465 03df 50       		.byte	0x50
 3466 03e0 1C000000 		.4byte	.LVL93
 3467 03e4 8C000000 		.4byte	.LVL101
 3468 03e8 0100     		.2byte	0x1
 3469 03ea 54       		.byte	0x54
 3470 03eb 8C000000 		.4byte	.LVL101
 3471 03ef A0000000 		.4byte	.LFE56
 3472 03f3 0400     		.2byte	0x4
 3473 03f5 F3       		.byte	0xf3
 3474 03f6 01       		.uleb128 0x1
 3475 03f7 50       		.byte	0x50
 3476 03f8 9F       		.byte	0x9f
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 111


 3477 03f9 00000000 		.4byte	0
 3478 03fd 00000000 		.4byte	0
 3479              	.LLST32:
 3480 0401 1A000000 		.4byte	.LVL92
 3481 0405 8C000000 		.4byte	.LVL102
 3482 0409 0100     		.2byte	0x1
 3483 040b 57       		.byte	0x57
 3484 040c 00000000 		.4byte	0
 3485 0410 00000000 		.4byte	0
 3486              	.LLST33:
 3487 0414 16000000 		.4byte	.LVL90
 3488 0418 8C000000 		.4byte	.LVL103
 3489 041c 0100     		.2byte	0x1
 3490 041e 58       		.byte	0x58
 3491 041f 00000000 		.4byte	0
 3492 0423 00000000 		.4byte	0
 3493              	.LLST34:
 3494 0427 18000000 		.4byte	.LVL91
 3495 042b 34000000 		.4byte	.LVL95
 3496 042f 0100     		.2byte	0x1
 3497 0431 56       		.byte	0x56
 3498 0432 4C000000 		.4byte	.LVL97
 3499 0436 56000000 		.4byte	.LVL98
 3500 043a 0100     		.2byte	0x1
 3501 043c 56       		.byte	0x56
 3502 043d 00000000 		.4byte	0
 3503 0441 00000000 		.4byte	0
 3504              	.LLST35:
 3505 0445 00000000 		.4byte	.LVL104
 3506 0449 04000000 		.4byte	.LVL106
 3507 044d 0100     		.2byte	0x1
 3508 044f 50       		.byte	0x50
 3509 0450 04000000 		.4byte	.LVL106
 3510 0454 10000000 		.4byte	.LFE57
 3511 0458 0400     		.2byte	0x4
 3512 045a F3       		.byte	0xf3
 3513 045b 01       		.uleb128 0x1
 3514 045c 50       		.byte	0x50
 3515 045d 9F       		.byte	0x9f
 3516 045e 00000000 		.4byte	0
 3517 0462 00000000 		.4byte	0
 3518              	.LLST36:
 3519 0466 02000000 		.4byte	.LVL105
 3520 046a 0E000000 		.4byte	.LVL108
 3521 046e 0200     		.2byte	0x2
 3522 0470 30       		.byte	0x30
 3523 0471 9F       		.byte	0x9f
 3524 0472 0E000000 		.4byte	.LVL108
 3525 0476 10000000 		.4byte	.LFE57
 3526 047a 0200     		.2byte	0x2
 3527 047c 31       		.byte	0x31
 3528 047d 9F       		.byte	0x9f
 3529 047e 00000000 		.4byte	0
 3530 0482 00000000 		.4byte	0
 3531              	.LLST37:
 3532 0486 02000000 		.4byte	.LVL105
 3533 048a 0E000000 		.4byte	.LVL108
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 112


 3534 048e 0200     		.2byte	0x2
 3535 0490 30       		.byte	0x30
 3536 0491 9F       		.byte	0x9f
 3537 0492 0E000000 		.4byte	.LVL108
 3538 0496 10000000 		.4byte	.LFE57
 3539 049a 0100     		.2byte	0x1
 3540 049c 50       		.byte	0x50
 3541 049d 00000000 		.4byte	0
 3542 04a1 00000000 		.4byte	0
 3543              	.LLST38:
 3544 04a5 02000000 		.4byte	.LVL109
 3545 04a9 08000000 		.4byte	.LVL110
 3546 04ad 0200     		.2byte	0x2
 3547 04af 30       		.byte	0x30
 3548 04b0 9F       		.byte	0x9f
 3549 04b1 08000000 		.4byte	.LVL110
 3550 04b5 1C000000 		.4byte	.LVL114
 3551 04b9 0100     		.2byte	0x1
 3552 04bb 54       		.byte	0x54
 3553 04bc 00000000 		.4byte	0
 3554 04c0 00000000 		.4byte	0
 3555              	.LLST39:
 3556 04c4 02000000 		.4byte	.LVL109
 3557 04c8 08000000 		.4byte	.LVL110
 3558 04cc 0200     		.2byte	0x2
 3559 04ce 30       		.byte	0x30
 3560 04cf 9F       		.byte	0x9f
 3561 04d0 08000000 		.4byte	.LVL110
 3562 04d4 1C000000 		.4byte	.LVL115
 3563 04d8 0100     		.2byte	0x1
 3564 04da 55       		.byte	0x55
 3565 04db 1C000000 		.4byte	.LVL115
 3566 04df 1E000000 		.4byte	.LFE58
 3567 04e3 0100     		.2byte	0x1
 3568 04e5 50       		.byte	0x50
 3569 04e6 00000000 		.4byte	0
 3570 04ea 00000000 		.4byte	0
 3571              	.LLST40:
 3572 04ee 00000000 		.4byte	.LVL116
 3573 04f2 04000000 		.4byte	.LVL118
 3574 04f6 0100     		.2byte	0x1
 3575 04f8 50       		.byte	0x50
 3576 04f9 04000000 		.4byte	.LVL118
 3577 04fd 14000000 		.4byte	.LFE59
 3578 0501 0400     		.2byte	0x4
 3579 0503 F3       		.byte	0xf3
 3580 0504 01       		.uleb128 0x1
 3581 0505 50       		.byte	0x50
 3582 0506 9F       		.byte	0x9f
 3583 0507 00000000 		.4byte	0
 3584 050b 00000000 		.4byte	0
 3585              	.LLST41:
 3586 050f 02000000 		.4byte	.LVL117
 3587 0513 0C000000 		.4byte	.LVL119
 3588 0517 0200     		.2byte	0x2
 3589 0519 30       		.byte	0x30
 3590 051a 9F       		.byte	0x9f
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 113


 3591 051b 0C000000 		.4byte	.LVL119
 3592 051f 14000000 		.4byte	.LFE59
 3593 0523 0200     		.2byte	0x2
 3594 0525 31       		.byte	0x31
 3595 0526 9F       		.byte	0x9f
 3596 0527 00000000 		.4byte	0
 3597 052b 00000000 		.4byte	0
 3598              	.LLST42:
 3599 052f 00000000 		.4byte	.LVL120
 3600 0533 04000000 		.4byte	.LVL122
 3601 0537 0100     		.2byte	0x1
 3602 0539 50       		.byte	0x50
 3603 053a 04000000 		.4byte	.LVL122
 3604 053e 14000000 		.4byte	.LFE60
 3605 0542 0400     		.2byte	0x4
 3606 0544 F3       		.byte	0xf3
 3607 0545 01       		.uleb128 0x1
 3608 0546 50       		.byte	0x50
 3609 0547 9F       		.byte	0x9f
 3610 0548 00000000 		.4byte	0
 3611 054c 00000000 		.4byte	0
 3612              	.LLST43:
 3613 0550 02000000 		.4byte	.LVL121
 3614 0554 0C000000 		.4byte	.LVL123
 3615 0558 0200     		.2byte	0x2
 3616 055a 30       		.byte	0x30
 3617 055b 9F       		.byte	0x9f
 3618 055c 0C000000 		.4byte	.LVL123
 3619 0560 14000000 		.4byte	.LFE60
 3620 0564 0200     		.2byte	0x2
 3621 0566 31       		.byte	0x31
 3622 0567 9F       		.byte	0x9f
 3623 0568 00000000 		.4byte	0
 3624 056c 00000000 		.4byte	0
 3625              	.LLST44:
 3626 0570 00000000 		.4byte	.LVL124
 3627 0574 04000000 		.4byte	.LVL125
 3628 0578 0100     		.2byte	0x1
 3629 057a 50       		.byte	0x50
 3630 057b 04000000 		.4byte	.LVL125
 3631 057f 0C000000 		.4byte	.LFE61
 3632 0583 0400     		.2byte	0x4
 3633 0585 F3       		.byte	0xf3
 3634 0586 01       		.uleb128 0x1
 3635 0587 50       		.byte	0x50
 3636 0588 9F       		.byte	0x9f
 3637 0589 00000000 		.4byte	0
 3638 058d 00000000 		.4byte	0
 3639              	.LLST45:
 3640 0591 00000000 		.4byte	.LVL126
 3641 0595 04000000 		.4byte	.LVL127
 3642 0599 0100     		.2byte	0x1
 3643 059b 50       		.byte	0x50
 3644 059c 04000000 		.4byte	.LVL127
 3645 05a0 0C000000 		.4byte	.LFE62
 3646 05a4 0400     		.2byte	0x4
 3647 05a6 F3       		.byte	0xf3
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 114


 3648 05a7 01       		.uleb128 0x1
 3649 05a8 50       		.byte	0x50
 3650 05a9 9F       		.byte	0x9f
 3651 05aa 00000000 		.4byte	0
 3652 05ae 00000000 		.4byte	0
 3653              	.LLST46:
 3654 05b2 00000000 		.4byte	.LVL128
 3655 05b6 04000000 		.4byte	.LVL129
 3656 05ba 0100     		.2byte	0x1
 3657 05bc 50       		.byte	0x50
 3658 05bd 04000000 		.4byte	.LVL129
 3659 05c1 0C000000 		.4byte	.LFE63
 3660 05c5 0400     		.2byte	0x4
 3661 05c7 F3       		.byte	0xf3
 3662 05c8 01       		.uleb128 0x1
 3663 05c9 50       		.byte	0x50
 3664 05ca 9F       		.byte	0x9f
 3665 05cb 00000000 		.4byte	0
 3666 05cf 00000000 		.4byte	0
 3667              		.section	.debug_aranges,"",%progbits
 3668 0000 04010000 		.4byte	0x104
 3669 0004 0200     		.2byte	0x2
 3670 0006 00000000 		.4byte	.Ldebug_info0
 3671 000a 04       		.byte	0x4
 3672 000b 00       		.byte	0
 3673 000c 0000     		.2byte	0
 3674 000e 0000     		.2byte	0
 3675 0010 00000000 		.4byte	.LFB34
 3676 0014 34000000 		.4byte	.LFE34-.LFB34
 3677 0018 00000000 		.4byte	.LFB35
 3678 001c 18000000 		.4byte	.LFE35-.LFB35
 3679 0020 00000000 		.4byte	.LFB36
 3680 0024 14000000 		.4byte	.LFE36-.LFB36
 3681 0028 00000000 		.4byte	.LFB37
 3682 002c 30000000 		.4byte	.LFE37-.LFB37
 3683 0030 00000000 		.4byte	.LFB38
 3684 0034 E4000000 		.4byte	.LFE38-.LFB38
 3685 0038 00000000 		.4byte	.LFB39
 3686 003c 08000000 		.4byte	.LFE39-.LFB39
 3687 0040 00000000 		.4byte	.LFB40
 3688 0044 24000000 		.4byte	.LFE40-.LFB40
 3689 0048 00000000 		.4byte	.LFB41
 3690 004c 24000000 		.4byte	.LFE41-.LFB41
 3691 0050 00000000 		.4byte	.LFB42
 3692 0054 0C000000 		.4byte	.LFE42-.LFB42
 3693 0058 00000000 		.4byte	.LFB43
 3694 005c 0C000000 		.4byte	.LFE43-.LFB43
 3695 0060 00000000 		.4byte	.LFB44
 3696 0064 10000000 		.4byte	.LFE44-.LFB44
 3697 0068 00000000 		.4byte	.LFB45
 3698 006c 10000000 		.4byte	.LFE45-.LFB45
 3699 0070 00000000 		.4byte	.LFB46
 3700 0074 10000000 		.4byte	.LFE46-.LFB46
 3701 0078 00000000 		.4byte	.LFB47
 3702 007c 10000000 		.4byte	.LFE47-.LFB47
 3703 0080 00000000 		.4byte	.LFB48
 3704 0084 10000000 		.4byte	.LFE48-.LFB48
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 115


 3705 0088 00000000 		.4byte	.LFB49
 3706 008c 10000000 		.4byte	.LFE49-.LFB49
 3707 0090 00000000 		.4byte	.LFB50
 3708 0094 10000000 		.4byte	.LFE50-.LFB50
 3709 0098 00000000 		.4byte	.LFB51
 3710 009c 10000000 		.4byte	.LFE51-.LFB51
 3711 00a0 00000000 		.4byte	.LFB52
 3712 00a4 10000000 		.4byte	.LFE52-.LFB52
 3713 00a8 00000000 		.4byte	.LFB53
 3714 00ac 10000000 		.4byte	.LFE53-.LFB53
 3715 00b0 00000000 		.4byte	.LFB54
 3716 00b4 0C000000 		.4byte	.LFE54-.LFB54
 3717 00b8 00000000 		.4byte	.LFB55
 3718 00bc 0C000000 		.4byte	.LFE55-.LFB55
 3719 00c0 00000000 		.4byte	.LFB56
 3720 00c4 A0000000 		.4byte	.LFE56-.LFB56
 3721 00c8 00000000 		.4byte	.LFB57
 3722 00cc 10000000 		.4byte	.LFE57-.LFB57
 3723 00d0 00000000 		.4byte	.LFB58
 3724 00d4 1E000000 		.4byte	.LFE58-.LFB58
 3725 00d8 00000000 		.4byte	.LFB59
 3726 00dc 14000000 		.4byte	.LFE59-.LFB59
 3727 00e0 00000000 		.4byte	.LFB60
 3728 00e4 14000000 		.4byte	.LFE60-.LFB60
 3729 00e8 00000000 		.4byte	.LFB61
 3730 00ec 0C000000 		.4byte	.LFE61-.LFB61
 3731 00f0 00000000 		.4byte	.LFB62
 3732 00f4 0C000000 		.4byte	.LFE62-.LFB62
 3733 00f8 00000000 		.4byte	.LFB63
 3734 00fc 0C000000 		.4byte	.LFE63-.LFB63
 3735 0100 00000000 		.4byte	0
 3736 0104 00000000 		.4byte	0
 3737              		.section	.debug_ranges,"",%progbits
 3738              	.Ldebug_ranges0:
 3739 0000 00000000 		.4byte	.LFB34
 3740 0004 34000000 		.4byte	.LFE34
 3741 0008 00000000 		.4byte	.LFB35
 3742 000c 18000000 		.4byte	.LFE35
 3743 0010 00000000 		.4byte	.LFB36
 3744 0014 14000000 		.4byte	.LFE36
 3745 0018 00000000 		.4byte	.LFB37
 3746 001c 30000000 		.4byte	.LFE37
 3747 0020 00000000 		.4byte	.LFB38
 3748 0024 E4000000 		.4byte	.LFE38
 3749 0028 00000000 		.4byte	.LFB39
 3750 002c 08000000 		.4byte	.LFE39
 3751 0030 00000000 		.4byte	.LFB40
 3752 0034 24000000 		.4byte	.LFE40
 3753 0038 00000000 		.4byte	.LFB41
 3754 003c 24000000 		.4byte	.LFE41
 3755 0040 00000000 		.4byte	.LFB42
 3756 0044 0C000000 		.4byte	.LFE42
 3757 0048 00000000 		.4byte	.LFB43
 3758 004c 0C000000 		.4byte	.LFE43
 3759 0050 00000000 		.4byte	.LFB44
 3760 0054 10000000 		.4byte	.LFE44
 3761 0058 00000000 		.4byte	.LFB45
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 116


 3762 005c 10000000 		.4byte	.LFE45
 3763 0060 00000000 		.4byte	.LFB46
 3764 0064 10000000 		.4byte	.LFE46
 3765 0068 00000000 		.4byte	.LFB47
 3766 006c 10000000 		.4byte	.LFE47
 3767 0070 00000000 		.4byte	.LFB48
 3768 0074 10000000 		.4byte	.LFE48
 3769 0078 00000000 		.4byte	.LFB49
 3770 007c 10000000 		.4byte	.LFE49
 3771 0080 00000000 		.4byte	.LFB50
 3772 0084 10000000 		.4byte	.LFE50
 3773 0088 00000000 		.4byte	.LFB51
 3774 008c 10000000 		.4byte	.LFE51
 3775 0090 00000000 		.4byte	.LFB52
 3776 0094 10000000 		.4byte	.LFE52
 3777 0098 00000000 		.4byte	.LFB53
 3778 009c 10000000 		.4byte	.LFE53
 3779 00a0 00000000 		.4byte	.LFB54
 3780 00a4 0C000000 		.4byte	.LFE54
 3781 00a8 00000000 		.4byte	.LFB55
 3782 00ac 0C000000 		.4byte	.LFE55
 3783 00b0 00000000 		.4byte	.LFB56
 3784 00b4 A0000000 		.4byte	.LFE56
 3785 00b8 00000000 		.4byte	.LFB57
 3786 00bc 10000000 		.4byte	.LFE57
 3787 00c0 00000000 		.4byte	.LFB58
 3788 00c4 1E000000 		.4byte	.LFE58
 3789 00c8 00000000 		.4byte	.LFB59
 3790 00cc 14000000 		.4byte	.LFE59
 3791 00d0 00000000 		.4byte	.LFB60
 3792 00d4 14000000 		.4byte	.LFE60
 3793 00d8 00000000 		.4byte	.LFB61
 3794 00dc 0C000000 		.4byte	.LFE61
 3795 00e0 00000000 		.4byte	.LFB62
 3796 00e4 0C000000 		.4byte	.LFE62
 3797 00e8 00000000 		.4byte	.LFB63
 3798 00ec 0C000000 		.4byte	.LFE63
 3799 00f0 00000000 		.4byte	0
 3800 00f4 00000000 		.4byte	0
 3801              		.section	.debug_line,"",%progbits
 3802              	.Ldebug_line0:
 3803 0000 4D030000 		.section	.debug_str,"MS",%progbits,1
 3803      02006C00 
 3803      00000201 
 3803      FB0E0D00 
 3803      01010101 
 3804              	.LASF10:
 3805 0000 75696E74 		.ascii	"uint16\000"
 3805      313600
 3806              	.LASF27:
 3807 0007 66696C74 		.ascii	"filteredRawData\000"
 3807      65726564 
 3807      52617744 
 3807      61746100 
 3808              	.LASF79:
 3809 0017 43617053 		.ascii	"CapSense_hysteresis\000"
 3809      656E7365 
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 117


 3809      5F687973 
 3809      74657265 
 3809      73697300 
 3810              	.LASF81:
 3811 002b 43617053 		.ascii	"CapSense_rawDataIndex\000"
 3811      656E7365 
 3811      5F726177 
 3811      44617461 
 3811      496E6465 
 3812              	.LASF73:
 3813 0041 43617053 		.ascii	"CapSense_sensorOnMask\000"
 3813      656E7365 
 3813      5F73656E 
 3813      736F724F 
 3813      6E4D6173 
 3814              	.LASF44:
 3815 0057 43617053 		.ascii	"CapSense_GetNegativeNoiseThreshold\000"
 3815      656E7365 
 3815      5F476574 
 3815      4E656761 
 3815      74697665 
 3816              	.LASF54:
 3817 007a 66696E67 		.ascii	"fingerThreshold\000"
 3817      65725468 
 3817      72657368 
 3817      6F6C6400 
 3818              	.LASF48:
 3819 008a 43617053 		.ascii	"CapSense_SetNegativeNoiseThreshold\000"
 3819      656E7365 
 3819      5F536574 
 3819      4E656761 
 3819      74697665 
 3820              	.LASF31:
 3821 00ad 43617053 		.ascii	"CapSense_UpdateWidgetBaseline\000"
 3821      656E7365 
 3821      5F557064 
 3821      61746557 
 3821      69646765 
 3822              	.LASF65:
 3823 00cb 43617053 		.ascii	"CapSense_GetDebounce\000"
 3823      656E7365 
 3823      5F476574 
 3823      4465626F 
 3823      756E6365 
 3824              	.LASF7:
 3825 00e0 6C6F6E67 		.ascii	"long long unsigned int\000"
 3825      206C6F6E 
 3825      6720756E 
 3825      7369676E 
 3825      65642069 
 3826              	.LASF72:
 3827 00f7 43617053 		.ascii	"CapSense_sensorSignal\000"
 3827      656E7365 
 3827      5F73656E 
 3827      736F7253 
 3827      69676E61 
 3828              	.LASF42:
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 118


 3829 010d 43617053 		.ascii	"CapSense_GetNoiseThreshold\000"
 3829      656E7365 
 3829      5F476574 
 3829      4E6F6973 
 3829      65546872 
 3830              	.LASF21:
 3831 0128 43617053 		.ascii	"CapSense_InitializeEnabledBaselines\000"
 3831      656E7365 
 3831      5F496E69 
 3831      7469616C 
 3831      697A6545 
 3832              	.LASF30:
 3833 014c 43617053 		.ascii	"CapSense_UpdateEnabledBaselines\000"
 3833      656E7365 
 3833      5F557064 
 3833      61746545 
 3833      6E61626C 
 3834              	.LASF6:
 3835 016c 6C6F6E67 		.ascii	"long long int\000"
 3835      206C6F6E 
 3835      6720696E 
 3835      7400
 3836              	.LASF0:
 3837 017a 7369676E 		.ascii	"signed char\000"
 3837      65642063 
 3837      68617200 
 3838              	.LASF62:
 3839 0186 43617053 		.ascii	"CapSense_DisableWidget\000"
 3839      656E7365 
 3839      5F446973 
 3839      61626C65 
 3839      57696467 
 3840              	.LASF57:
 3841 019d 72617749 		.ascii	"rawIndex\000"
 3841      6E646578 
 3841      00
 3842              	.LASF37:
 3843 01a6 43617053 		.ascii	"CapSense_GetBaselineData\000"
 3843      656E7365 
 3843      5F476574 
 3843      42617365 
 3843      6C696E65 
 3844              	.LASF59:
 3845 01bf 73746174 		.ascii	"state\000"
 3845      6500
 3846              	.LASF4:
 3847 01c5 6C6F6E67 		.ascii	"long int\000"
 3847      20696E74 
 3847      00
 3848              	.LASF60:
 3849 01ce 43617053 		.ascii	"CapSense_CheckIsAnyWidgetActive\000"
 3849      656E7365 
 3849      5F436865 
 3849      636B4973 
 3849      416E7957 
 3850              	.LASF9:
 3851 01ee 75696E74 		.ascii	"uint8\000"
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 119


 3851      3800
 3852              	.LASF75:
 3853 01f4 43617053 		.ascii	"CapSense_lowBaselineReset\000"
 3853      656E7365 
 3853      5F6C6F77 
 3853      42617365 
 3853      6C696E65 
 3854              	.LASF13:
 3855 020e 646F7562 		.ascii	"double\000"
 3855      6C6500
 3856              	.LASF69:
 3857 0215 43617053 		.ascii	"CapSense_widgetNumber\000"
 3857      656E7365 
 3857      5F776964 
 3857      6765744E 
 3857      756D6265 
 3858              	.LASF11:
 3859 022b 75696E74 		.ascii	"uint32\000"
 3859      333200
 3860              	.LASF55:
 3861 0232 68797374 		.ascii	"hysteresis\000"
 3861      65726573 
 3861      697300
 3862              	.LASF45:
 3863 023d 43617053 		.ascii	"CapSense_SetFingerThreshold\000"
 3863      656E7365 
 3863      5F536574 
 3863      46696E67 
 3863      65725468 
 3864              	.LASF49:
 3865 0259 43617053 		.ascii	"CapSense_SetDebounce\000"
 3865      656E7365 
 3865      5F536574 
 3865      4465626F 
 3865      756E6365 
 3866              	.LASF40:
 3867 026e 76616C75 		.ascii	"value\000"
 3867      6500
 3868              	.LASF50:
 3869 0274 43617053 		.ascii	"CapSense_SetLowBaselineReset\000"
 3869      656E7365 
 3869      5F536574 
 3869      4C6F7742 
 3869      6173656C 
 3870              	.LASF34:
 3871 0291 6C617374 		.ascii	"lastSensor\000"
 3871      53656E73 
 3871      6F7200
 3872              	.LASF86:
 3873 029c 43617053 		.ascii	"CapSense_ScanSensor\000"
 3873      656E7365 
 3873      5F536361 
 3873      6E53656E 
 3873      736F7200 
 3874              	.LASF8:
 3875 02b0 756E7369 		.ascii	"unsigned int\000"
 3875      676E6564 
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 120


 3875      20696E74 
 3875      00
 3876              	.LASF5:
 3877 02bd 6C6F6E67 		.ascii	"long unsigned int\000"
 3877      20756E73 
 3877      69676E65 
 3877      6420696E 
 3877      7400
 3878              	.LASF71:
 3879 02cf 43617053 		.ascii	"CapSense_sensorBaselineLow\000"
 3879      656E7365 
 3879      5F73656E 
 3879      736F7242 
 3879      6173656C 
 3880              	.LASF23:
 3881 02ea 43617053 		.ascii	"CapSense_UpdateBaselineNoThreshold\000"
 3881      656E7365 
 3881      5F557064 
 3881      61746542 
 3881      6173656C 
 3882              	.LASF80:
 3883 030d 43617053 		.ascii	"CapSense_debounce\000"
 3883      656E7365 
 3883      5F646562 
 3883      6F756E63 
 3883      6500
 3884              	.LASF36:
 3885 031f 64617461 		.ascii	"data\000"
 3885      00
 3886              	.LASF3:
 3887 0324 73686F72 		.ascii	"short unsigned int\000"
 3887      7420756E 
 3887      7369676E 
 3887      65642069 
 3887      6E7400
 3888              	.LASF18:
 3889 0337 73656E73 		.ascii	"sensor\000"
 3889      6F7200
 3890              	.LASF68:
 3891 033e 43617053 		.ascii	"CapSense_sensorEnableMask\000"
 3891      656E7365 
 3891      5F73656E 
 3891      736F7245 
 3891      6E61626C 
 3892              	.LASF82:
 3893 0358 43617053 		.ascii	"CapSense_numberOfSensors\000"
 3893      656E7365 
 3893      5F6E756D 
 3893      6265724F 
 3893      6653656E 
 3894              	.LASF29:
 3895 0371 43617053 		.ascii	"CapSense_UpdateSensorBaseline\000"
 3895      656E7365 
 3895      5F557064 
 3895      61746553 
 3895      656E736F 
 3896              	.LASF24:
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 121


 3897 038f 63616C63 		.ascii	"calc\000"
 3897      00
 3898              	.LASF84:
 3899 0394 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\CapSense_CSHL.c\000"
 3899      6E657261 
 3899      7465645F 
 3899      536F7572 
 3899      63655C50 
 3900              	.LASF38:
 3901 03bd 43617053 		.ascii	"CapSense_GetDiffCountData\000"
 3901      656E7365 
 3901      5F476574 
 3901      44696666 
 3901      436F756E 
 3902              	.LASF52:
 3903 03d7 6465626F 		.ascii	"debounce\000"
 3903      756E6365 
 3903      00
 3904              	.LASF15:
 3905 03e0 73697A65 		.ascii	"sizetype\000"
 3905      74797065 
 3905      00
 3906              	.LASF61:
 3907 03e9 43617053 		.ascii	"CapSense_EnableWidget\000"
 3907      656E7365 
 3907      5F456E61 
 3907      626C6557 
 3907      69646765 
 3908              	.LASF17:
 3909 03ff 43617053 		.ascii	"CapSense_InitializeSensorBaseline\000"
 3909      656E7365 
 3909      5F496E69 
 3909      7469616C 
 3909      697A6553 
 3910              	.LASF47:
 3911 0421 43617053 		.ascii	"CapSense_SetFingerHysteresis\000"
 3911      656E7365 
 3911      5F536574 
 3911      46696E67 
 3911      65724879 
 3912              	.LASF51:
 3913 043e 43617053 		.ascii	"CapSense_CheckIsSensorActive\000"
 3913      656E7365 
 3913      5F436865 
 3913      636B4973 
 3913      53656E73 
 3914              	.LASF41:
 3915 045b 43617053 		.ascii	"CapSense_GetFingerThreshold\000"
 3915      656E7365 
 3915      5F476574 
 3915      46696E67 
 3915      65725468 
 3916              	.LASF77:
 3917 0477 43617053 		.ascii	"CapSense_noiseThreshold\000"
 3917      656E7365 
 3917      5F6E6F69 
 3917      73655468 
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 122


 3917      72657368 
 3918              	.LASF83:
 3919 048f 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3919      4320342E 
 3919      392E3320 
 3919      32303135 
 3919      30333033 
 3920 04c2 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 3920      20726576 
 3920      6973696F 
 3920      6E203232 
 3920      31323230 
 3921 04f5 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 3921      66756E63 
 3921      74696F6E 
 3921      2D736563 
 3921      74696F6E 
 3922              	.LASF76:
 3923 051d 43617053 		.ascii	"CapSense_fingerThreshold\000"
 3923      656E7365 
 3923      5F66696E 
 3923      67657254 
 3923      68726573 
 3924              	.LASF90:
 3925 0536 43617053 		.ascii	"CapSense_SetBitValue\000"
 3925      656E7365 
 3925      5F536574 
 3925      42697456 
 3925      616C7565 
 3926              	.LASF12:
 3927 054b 666C6F61 		.ascii	"float\000"
 3927      7400
 3928              	.LASF64:
 3929 0551 43617053 		.ascii	"CapSense_GetLowBaselineReset\000"
 3929      656E7365 
 3929      5F476574 
 3929      4C6F7742 
 3929      6173656C 
 3930              	.LASF56:
 3931 056e 43617053 		.ascii	"CapSense_CheckIsWidgetActive\000"
 3931      656E7365 
 3931      5F436865 
 3931      636B4973 
 3931      57696467 
 3932              	.LASF1:
 3933 058b 756E7369 		.ascii	"unsigned char\000"
 3933      676E6564 
 3933      20636861 
 3933      7200
 3934              	.LASF19:
 3935 0599 43617053 		.ascii	"CapSense_InitializeAllBaselines\000"
 3935      656E7365 
 3935      5F496E69 
 3935      7469616C 
 3935      697A6541 
 3936              	.LASF35:
 3937 05b9 43617053 		.ascii	"CapSense_SetBaselineData\000"
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 123


 3937      656E7365 
 3937      5F536574 
 3937      42617365 
 3937      6C696E65 
 3938              	.LASF28:
 3939 05d2 6E6F6973 		.ascii	"noiseThreshold\000"
 3939      65546872 
 3939      6573686F 
 3939      6C6400
 3940              	.LASF2:
 3941 05e1 73686F72 		.ascii	"short int\000"
 3941      7420696E 
 3941      7400
 3942              	.LASF20:
 3943 05eb 77696467 		.ascii	"widget\000"
 3943      657400
 3944              	.LASF22:
 3945 05f2 69735365 		.ascii	"isSensorEnabled\000"
 3945      6E736F72 
 3945      456E6162 
 3945      6C656400 
 3946              	.LASF16:
 3947 0602 43617053 		.ascii	"CapSense_BaseInit\000"
 3947      656E7365 
 3947      5F426173 
 3947      65496E69 
 3947      7400
 3948              	.LASF32:
 3949 0614 73656E73 		.ascii	"sensorsPerWidget\000"
 3949      6F727350 
 3949      65725769 
 3949      64676574 
 3949      00
 3950              	.LASF74:
 3951 0625 43617053 		.ascii	"CapSense_lowBaselineResetCnt\000"
 3951      656E7365 
 3951      5F6C6F77 
 3951      42617365 
 3951      6C696E65 
 3952              	.LASF46:
 3953 0642 43617053 		.ascii	"CapSense_SetNoiseThreshold\000"
 3953      656E7365 
 3953      5F536574 
 3953      4E6F6973 
 3953      65546872 
 3954              	.LASF70:
 3955 065d 43617053 		.ascii	"CapSense_sensorBaseline\000"
 3955      656E7365 
 3955      5F73656E 
 3955      736F7242 
 3955      6173656C 
 3956              	.LASF14:
 3957 0675 63686172 		.ascii	"char\000"
 3957      00
 3958              	.LASF43:
 3959 067a 43617053 		.ascii	"CapSense_GetFingerHysteresis\000"
 3959      656E7365 
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 124


 3959      5F476574 
 3959      46696E67 
 3959      65724879 
 3960              	.LASF33:
 3961 0697 66697273 		.ascii	"firstSensor\000"
 3961      7453656E 
 3961      736F7200 
 3962              	.LASF53:
 3963 06a3 6465626F 		.ascii	"debounceIndex\000"
 3963      756E6365 
 3963      496E6465 
 3963      7800
 3964              	.LASF85:
 3965 06b1 433A5C55 		.ascii	"C:\\Users\\merlin\\Documents\\PSoC Creator\\Sandbox"
 3965      73657273 
 3965      5C6D6572 
 3965      6C696E5C 
 3965      446F6375 
 3966 06df 5F437261 		.ascii	"_CrazyEyes.cydsn\000"
 3966      7A794579 
 3966      65732E63 
 3966      7964736E 
 3966      00
 3967              	.LASF25:
 3968 06f0 7369676E 		.ascii	"sign\000"
 3968      00
 3969              	.LASF58:
 3970 06f5 6E756D4F 		.ascii	"numOfSensors\000"
 3970      6653656E 
 3970      736F7273 
 3970      00
 3971              	.LASF67:
 3972 0702 43617053 		.ascii	"CapSense_sensorRaw\000"
 3972      656E7365 
 3972      5F73656E 
 3972      736F7252 
 3972      617700
 3973              	.LASF39:
 3974 0715 43617053 		.ascii	"CapSense_SetDiffCountData\000"
 3974      656E7365 
 3974      5F536574 
 3974      44696666 
 3974      436F756E 
 3975              	.LASF89:
 3976 072f 43617053 		.ascii	"CapSense_GetBitValue\000"
 3976      656E7365 
 3976      5F476574 
 3976      42697456 
 3976      616C7565 
 3977              	.LASF63:
 3978 0744 43617053 		.ascii	"CapSense_GetWidgetNumber\000"
 3978      656E7365 
 3978      5F476574 
 3978      57696467 
 3978      65744E75 
 3979              	.LASF88:
 3980 075d 43617053 		.ascii	"CapSense_ScanEnabledWidgets\000"
ARM GAS  C:\Users\merlin\AppData\Local\Temp\cchlGLBb.s 			page 125


 3980      656E7365 
 3980      5F536361 
 3980      6E456E61 
 3980      626C6564 
 3981              	.LASF66:
 3982 0779 43617053 		.ascii	"CapSense_debounceCounter\000"
 3982      656E7365 
 3982      5F646562 
 3982      6F756E63 
 3982      65436F75 
 3983              	.LASF26:
 3984 0792 74656D70 		.ascii	"tempRaw\000"
 3984      52617700 
 3985              	.LASF87:
 3986 079a 43617053 		.ascii	"CapSense_IsBusy\000"
 3986      656E7365 
 3986      5F497342 
 3986      75737900 
 3987              	.LASF78:
 3988 07aa 43617053 		.ascii	"CapSense_negativeNoiseThreshold\000"
 3988      656E7365 
 3988      5F6E6567 
 3988      61746976 
 3988      654E6F69 
 3989              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
